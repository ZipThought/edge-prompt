This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
backend/
  scripts/
    get-windows-host.sh
  src/
    db/
      migrations/
        001_add_material_storage.ts
        002_add_users.ts
      index.ts
      migrate.ts
      schema.sql
    services/
      DatabaseService.test.ts
      DatabaseService.ts
      LMStudioService.ts
      MaterialProcessor.test.ts
      MaterialProcessor.ts
      StorageService.test.ts
      StorageService.ts
      ValidationService.ts
    test/
      setup.ts
    types/
      index.ts
      pdf.d.ts
    config.ts
    dev.ts
    index.ts
  .gitignore
  .mocharc.json
  package.json
  tsconfig.json
  tsconfig.node.json
common/
  src/
    types/
      index.ts
  package.json
  tsconfig.json
docs/
  deployment/
    DEPLOYMENT_GUIDE.md
    PERFORMANCE_OPTIMIZATION.md
    SECURITY_MODEL.md
  foundation/
    SYSTEM_ARCHITECTURE.md
    SYSTEM_VISION.md
  implementation/
    TECHNICAL_IMPLEMENTATION.md
  integration/
    EDUCATIONAL_INTEGRATION.md
  specifications/
    PROMPT_ENGINEERING.md
  IMPLEMENTATION_PLAN.md
  LICENSE
  README.md
frontend/
  public/
    index.html
  src/
    components/
      common/
        Navbar.tsx
        ProjectSelectionModal.tsx
      project/
        ProjectEditForm.tsx
        ProjectForm.tsx
        ProjectPanel.tsx
        ProjectView.tsx
      prompt/
        PromptTemplateForm.tsx
        PromptTemplateManager.tsx
        PromptTemplatePreview.tsx
        PromptTemplateView.tsx
      student/
        ResponseValidator.tsx
      teacher/
        ContentGenerator.tsx
        MaterialDetailView.tsx
        MaterialsManager.tsx
        MaterialUploader.tsx
        QuestionGenerator.tsx
        SimplifiedMaterialUploader.tsx
      tools/
        PromptEngineeringTool.tsx
      ErrorBoundary.tsx
    contexts/
      ProjectContext.tsx
    services/
      api.ts
      QuestionGenerationService.ts
    types/
      edgeprompt.ts
      index.ts
    App.tsx
    index.tsx
  .gitignore
  package.json
  tsconfig.json
.gitignore
CONTRIBUTING.md
LICENSE
package.json
README.md
run.sh
tsconfig.json

================================================================
Files
================================================================

================
File: backend/src/db/migrations/002_add_users.ts
================
import { DatabaseService } from '../../services/DatabaseService.js';
import { StorageService } from '../../services/StorageService.js';

export async function up() {
    const db = new DatabaseService();
    const storage = new StorageService();

    // Initialize storage
    await storage.initialize();

    await db.exec(`
        CREATE TABLE IF NOT EXISTS users (
            id TEXT PRIMARY KEY,
            username TEXT NOT NULL UNIQUE,
            email TEXT NOT NULL UNIQUE,
            password_hash TEXT NOT NULL,
            position TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    `);
}

export async function down() {
    const db = new DatabaseService();
    await db.exec(`
        DROP TABLE IF EXISTS users;
    `);
}

================
File: backend/scripts/get-windows-host.sh
================
#!/bin/bash

# Get Windows host IP from WSL2
WINDOWS_HOST=$(ip route show | grep -i default | awk '{ print $3}')
echo $WINDOWS_HOST

================
File: backend/src/db/migrations/001_add_material_storage.ts
================
import { DatabaseService } from '../../services/DatabaseService.js';
import { StorageService } from '../../services/StorageService.js';

export async function up() {
  const db = new DatabaseService();
  const storage = new StorageService();

  // Initialize storage
  await storage.initialize();

  // Add new columns
  await db.exec(`
    ALTER TABLE materials ADD COLUMN file_path TEXT;
    ALTER TABLE materials ADD COLUMN file_type TEXT;
    ALTER TABLE materials ADD COLUMN file_size INTEGER;
    ALTER TABLE materials ADD COLUMN processed_path TEXT;
    ALTER TABLE materials ADD COLUMN status TEXT DEFAULT 'pending' 
      CHECK (status IN ('pending', 'processing', 'completed', 'error'));

    CREATE INDEX IF NOT EXISTS idx_materials_status ON materials(status);
  `);
}

export async function down() {
  const db = new DatabaseService();

  // Remove new columns
  await db.exec(`
    DROP INDEX IF EXISTS idx_materials_status;
    ALTER TABLE materials DROP COLUMN file_path;
    ALTER TABLE materials DROP COLUMN file_type;
    ALTER TABLE materials DROP COLUMN file_size;
    ALTER TABLE materials DROP COLUMN processed_path;
    ALTER TABLE materials DROP COLUMN status;
  `);
}

================
File: backend/src/db/index.ts
================
export async function getMaterial(id: string): Promise<any> {
  return new Promise((resolve, reject) => {
    db.get(
      'SELECT id, project_id, title, content, focus_area, metadata, file_path, file_type, file_size, status, created_at FROM materials WHERE id = ?',
      [id],
      (err, row) => {
        if (err) {
          reject(err);
          return;
        }
        
        if (!row) {
          resolve(null);
          return;
        }
        
        // Parse metadata JSON if it exists
        if (row.metadata) {
          try {
            row.metadata = JSON.parse(row.metadata);
          } catch (e) {
            console.warn(`Failed to parse metadata for material ${id}`, e);
            row.metadata = {};
          }
        }
        
        resolve({
          id: row.id,
          projectId: row.project_id,
          title: row.title,
          content: row.content,
          focusArea: row.focus_area,
          metadata: row.metadata || {},
          filePath: row.file_path,
          fileType: row.file_type,
          fileSize: row.file_size,
          status: row.status,
          createdAt: row.created_at
        });
      }
    );
  });
}

export async function getPromptTemplate(id: string): Promise<any> {
  return new Promise((resolve, reject) => {
    db.get(
      'SELECT id, name, version, type, content, description, created_at FROM prompt_templates WHERE id = ?',
      [id],
      (err, row) => {
        if (err) {
          reject(err);
          return;
        }
        
        if (!row) {
          resolve(null);
          return;
        }
        
        // Parse content JSON if it exists
        if (row.content) {
          try {
            row.content = JSON.parse(row.content);
          } catch (e) {
            // If not valid JSON, keep as string
            console.warn(`Prompt template ${id} content is not valid JSON, keeping as string`);
          }
        }
        
        resolve({
          id: row.id,
          name: row.name,
          version: row.version,
          type: row.type,
          content: row.content,
          description: row.description,
          createdAt: row.created_at
        });
      }
    );
  });
}

================
File: backend/src/services/DatabaseService.test.ts
================
import { DatabaseService, User } from './DatabaseService.js';
import { StorageService } from './StorageService.js';
import { expect } from 'chai';
import { join } from 'path';
import { writeFile, rm } from 'fs/promises';
import { v4 as uuidv4 } from 'uuid';

describe('DatabaseService - Materials', () => {
  let db: DatabaseService;
  let storage: StorageService;
  let projectId: string;

  beforeEach(async () => {
    db = new DatabaseService();
    storage = new StorageService();
    await storage.initialize();

    // Create a test project
    projectId = await db.createProject({
      name: 'Test Project',
      description: 'Test project for materials',
      modelName: 'test-model',
      promptTemplateId: 'test-template',
      configuration: { language: 'en', gradeLevel: '5', subject: 'test' }
    });
  });

  afterEach(async () => {
    // Clean up test files
    await rm(storage.getConfig().rootDir, { recursive: true, force: true });
  });

  describe('material management', () => {
    it('should create and retrieve material', async () => {
      const materialId = await db.createMaterial({
        projectId,
        title: 'Test Material',
        content: 'Test content',
        focusArea: 'Test focus',
        metadata: { key: 'value' }
      });

      const material = await db.getMaterial(materialId);
      expect(material.title).to.equal('Test Material');
      expect(material.content).to.equal('Test content');
      expect(material.status).to.equal('pending');
      expect(material.metadata).to.deep.equal({ key: 'value' });
    });

    it('should list project materials', async () => {
      // Create multiple materials
      await db.createMaterial({
        projectId,
        title: 'Material 1',
        content: 'Content 1',
        focusArea: 'Focus 1'
      });

      await db.createMaterial({
        projectId,
        title: 'Material 2',
        content: 'Content 2',
        focusArea: 'Focus 2'
      });

      const materials = await db.getProjectMaterials(projectId);
      expect(materials).to.have.length(2);
      const titles = materials.map(m => m.title);
      expect(titles).to.include('Material 1');
      expect(titles).to.include('Material 2');
    });

    it('should update material status', async () => {
      const materialId = await db.createMaterial({
        projectId,
        title: 'Test Material',
        content: 'Test content',
        focusArea: 'Test focus'
      });

      await db.updateMaterialStatus(materialId, 'completed');
      
      const material = await db.getMaterial(materialId);
      expect(material.status).to.equal('completed');
    });

    it('should delete material and its files', async () => {
      // Create a test file
      const testFile = join(storage.getConfig().rootDir, 'test.txt');
      await writeFile(testFile, 'test content');

      const materialId = await db.createMaterial({
        projectId,
        title: 'Test Material',
        content: 'Test content',
        focusArea: 'Test focus',
        filePath: testFile
      });

      await db.deleteMaterial(materialId);

      try {
        await db.getMaterial(materialId);
        expect.fail('Material should have been deleted');
      } catch (error) {
        expect(error.message).to.include('not found');
      }
    });
  });
}); 

describe('DatabaseService - User Management', () => {
  let db: DatabaseService;

  beforeEach(() => {
    db = new DatabaseService();
  });

  it('should create a user', async () => {
    const userId = uuidv4();
    const userData = {
      id: userId,
      username: 'testuser',
      email: 'test@example.com',
      password_hash: 'hashed_password', // In real scenarios, this would be a bcrypt hash
      position: 'student',
    };

    await db.createUser(userData);    
    const retrievedUser = await db.getUserByEmail('test@example.com');

    
    expect(retrievedUser).to.not.be.null;
    expect(retrievedUser?.username).to.equal('testuser');
    expect(retrievedUser?.email).to.equal('test@example.com');
    expect(retrievedUser?.password_hash).to.equal('hashed_password');
    expect(retrievedUser?.position).to.equal('student');
    expect(retrievedUser?.created_at).to.not.be.null;

    await db.deleteUserById(userId); // Clean up after test
  });

  it('should get a user by email', async () => {
    const userId = uuidv4();
    const userData = {
      id: userId,
      username: 'testuser2',
      email: 'test2@example.com',
      password_hash: 'hashed_password2',
      position: 'teacher',
      created_at: new Date().toISOString()
    };

    await db.createUser(userData);
    const user = await db.getUserByEmail('test2@example.com');

    expect(user).to.not.be.null;
    expect(user?.username).to.equal('testuser2');
    expect(user?.email).to.equal('test2@example.com');
    expect(user?.password_hash).to.equal('hashed_password2');
    expect(user?.position).to.equal('teacher');
    expect(user?.created_at).to.not.be.null;

    await db.deleteUserById(userId); // Clean up after test  
  });

  it('should return null if user not found', async () => {
    const user = await db.getUserByEmail('nonexistent@example.com');
    expect(user).to.be.null;
  });

  it('should handle duplicate email', async () => {
    const userId1 = uuidv4();
    const userData1 = {
        id: userId1,
        username: 'user1',
        email: 'duplicate@example.com',
        password_hash: 'hashed1',
        position: 'student',
        created_at: new Date().toISOString()
    };
    await db.createUser(userData1);

    const userId2 = uuidv4();
    const userData2 = {
        id: userId2,
        username: 'user2',
        email: 'duplicate@example.com',
        password_hash: 'hashed2',
        position: 'teacher',
        created_at: new Date().toISOString()
    };

    try {
        await db.createUser(userData2);
        expect.fail('Expected createUser to throw an error');
    } catch (error: any) {
        expect(error.message).to.include('UNIQUE constraint failed'); // Adjust this to match your DB error message
    }

    await db.deleteUserById(userId1); // Clean up after test  
    await db.deleteUserById(userId2); // Clean up after test  
});

it('should handle duplicate username', async () => {
    const userId1 = uuidv4();
    const userData1 = {
        id: userId1,
        username: 'duplicateuser',
        email: 'user1@example.com',
        password_hash: 'hashed1',
        position: 'student',
        created_at: new Date().toISOString()
    };
    await db.createUser(userData1);

    const userId2 = uuidv4();
    const userData2 = {
        id: userId2,
        username: 'duplicateuser',
        email: 'user2@example.com',
        password_hash: 'hashed2',
        position: 'teacher',
        created_at: new Date().toISOString()
    };

    try {
        await db.createUser(userData2);
        expect.fail('Expected createUser to throw an error');
    } catch (error: any) {
        expect(error.message).to.include('UNIQUE constraint failed'); // Adjust this to match your DB error message
    }

    await db.deleteUserById(userId1); // Clean up after test  
    await db.deleteUserById(userId2); // Clean up after test  
  });
});

================
File: backend/src/services/MaterialProcessor.test.ts
================
import { MaterialProcessor } from './MaterialProcessor.js';
import { DatabaseService } from './DatabaseService.js';
import { StorageService } from './StorageService.js';
import { LMStudioService } from './LMStudioService.js';
import { expect } from 'chai';
import { join } from 'path';
import { writeFile, mkdir, rm, readFile } from 'fs/promises';

describe('MaterialProcessor', () => {
  let processor: MaterialProcessor;
  let db: DatabaseService;
  let storage: StorageService;
  let lmStudio: LMStudioService;
  let projectId: string;
  let testRoot: string;

  beforeEach(async () => {
    testRoot = join(__dirname, '../../test-uploads');
    
    // Initialize services
    db = new DatabaseService();
    storage = new StorageService({ rootDir: testRoot });
    lmStudio = new LMStudioService();
    processor = new MaterialProcessor(lmStudio, db, storage);

    // Initialize storage
    await storage.initialize();

    // Create test project
    projectId = await db.createProject({
      name: 'Test Project',
      description: 'Test project for materials',
      modelName: 'test-model',
      promptTemplateId: 'test-template',
      configuration: { language: 'en', gradeLevel: '5', subject: 'test' }
    });
  });

  afterEach(async () => {
    await rm(testRoot, { recursive: true, force: true });
  });

  describe('material processing', () => {
    it('should process text content', async () => {
      const material = await processor.processMaterial({
        type: 'text',
        content: 'Test content',
        metadata: {
          title: 'Test Material',
          focusArea: 'Testing'
        }
      }, projectId);

      expect(material.title).to.equal('Test Material');
      expect(material.content).to.equal('Test content');
      expect(material.status).to.equal('completed');
    });

    it('should process file content', async () => {
      // Create test file
      const tempDir = join(testRoot, 'temp');
      await mkdir(tempDir, { recursive: true });
      const testFile = join(tempDir, 'test.txt');
      await writeFile(testFile, 'File content');

      const material = await processor.processMaterial({
        type: 'txt',
        content: testFile,
        metadata: {
          title: 'File Material',
          focusArea: 'Testing'
        }
      }, projectId);

      // Check material properties
      expect(material.title).to.equal('File Material');
      expect(material.content).to.equal('File content');
      expect(material.status).to.equal('completed');
      expect(material.filePath).to.be.a('string');
      expect(material.fileType).to.equal('.txt');

      // Verify original file exists and has correct content
      const originalContent = await readFile(material.filePath!, 'utf8');
      expect(originalContent).to.equal('File content');
    });

    it('should handle processing errors', async () => {
      try {
        await processor.processMaterial({
          type: 'invalid',
          content: 'content',
          metadata: {
            title: 'Invalid Material',
            focusArea: 'Testing'
          }
        }, projectId);
        expect.fail('Should have thrown error');
      } catch (error) {
        expect(error.message).to.include('Unsupported material type');
      }
    });
  });
});

================
File: backend/src/services/StorageService.test.ts
================
import { StorageService } from './StorageService.js';
import { mkdir, writeFile, readFile, rm, stat } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { expect } from 'chai';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

describe('StorageService', () => {
  const testRoot = join(__dirname, '../../test-uploads');
  let storage: StorageService;

  beforeEach(async () => {
    // Create fresh storage instance with test config
    storage = new StorageService({
      rootDir: testRoot,
      allowedTypes: ['.txt', '.pdf'],
      maxFileSize: 1024 * 1024 // 1MB
    });
    
    // Initialize storage directories
    await storage.initialize();
  });

  afterEach(async () => {
    // Cleanup test directory after each test
    try {
      await rm(testRoot, { recursive: true, force: true });
    } catch (error) {
      console.error('Cleanup error:', error);
    }
  });

  describe('initialization', () => {
    it('should create required directories', async () => {
      const tempDir = join(testRoot, 'temp');
      const materialsDir = join(testRoot, 'materials');

      // Check if directories exist using stat
      const checkDir = async (dir: string) => {
        try {
          const stats = await stat(dir);
          return stats.isDirectory();
        } catch {
          return false;
        }
      };

      expect(await checkDir(tempDir)).to.be.true;
      expect(await checkDir(materialsDir)).to.be.true;
    });
  });

  describe('material storage', () => {
    const projectId = 'test-project';
    const materialId = 'test-material';

    it('should create material directory structure', async () => {
      const materialDir = await storage.createMaterialStorage(projectId, materialId);
      
      // Check if directory exists using stat
      const checkDir = async (dir: string) => {
        try {
          const stats = await stat(dir);
          return stats.isDirectory();
        } catch {
          return false;
        }
      };

      expect(await checkDir(materialDir)).to.be.true;
    });

    it('should save material file', async () => {
      // Create temp directory first
      await mkdir(join(testRoot, 'temp'), { recursive: true });
      
      // Create temp file
      const tempFile = join(testRoot, 'temp', 'test.txt');
      await writeFile(tempFile, 'test content');

      const savedPath = await storage.saveMaterialFile(tempFile, projectId, materialId);
      
      // Check if file exists and content matches
      const content = await readFile(savedPath, 'utf8');
      expect(content).to.equal('test content');
    });

    it('should reject invalid file types', async () => {
      // Create temp directory first
      await mkdir(join(testRoot, 'temp'), { recursive: true });
      
      const tempFile = join(testRoot, 'temp', 'test.invalid');
      await writeFile(tempFile, 'test content');

      try {
        await storage.saveMaterialFile(tempFile, projectId, materialId);
        expect.fail('Should have thrown error');
      } catch (error) {
        expect(error).to.be.instanceOf(Error);
        expect((error as Error).message).to.include('not allowed');
      }
    });
  });

  describe('validation', () => {
    it('should validate file size', () => {
      expect(storage.validateFileSize(1024)).to.be.true;
      expect(storage.validateFileSize(2 * 1024 * 1024)).to.be.false;
    });

    it('should validate file type', () => {
      expect(storage.validateFileType('test.txt')).to.be.true;
      expect(storage.validateFileType('test.pdf')).to.be.true;
      expect(storage.validateFileType('test.invalid')).to.be.false;
    });
  });
});

================
File: backend/src/test/setup.ts
================
import { config } from 'dotenv';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { DatabaseService } from '../services/DatabaseService.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load test environment variables
config({ path: join(__dirname, '../../.env.test') });

// Root hooks
export const mochaHooks = {
  beforeAll: async function(this: Mocha.Context) {
    this.timeout(10000); // 10 seconds
    const db = new DatabaseService();
    
    // Run migrations
    await db.transaction(async () => {
      // Create tables if they don't exist
      await db.exec(`
        CREATE TABLE IF NOT EXISTS projects (
          id TEXT PRIMARY KEY,
          name TEXT NOT NULL,
          description TEXT,
          model_name TEXT NOT NULL,
          prompt_template_id TEXT NOT NULL,
          configuration JSON NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS materials (
          id TEXT PRIMARY KEY,
          project_id TEXT NOT NULL,
          title TEXT,
          content TEXT NOT NULL,
          focus_area TEXT NOT NULL,
          metadata JSON,
          file_path TEXT,
          file_type TEXT,
          file_size INTEGER,
          status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'error')),
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY(project_id) REFERENCES projects(id)
        );

        CREATE INDEX IF NOT EXISTS idx_materials_project ON materials(project_id);
        CREATE INDEX IF NOT EXISTS idx_materials_status ON materials(status);
      `);
    });
  },

  afterAll: async function(this: Mocha.Context) {
    this.timeout(5000); // 5 seconds
    const db = new DatabaseService();
    await db.transaction(async () => {
      // Only delete test data
      await db.exec(`DELETE FROM materials WHERE project_id IN (SELECT id FROM projects WHERE name = 'Test Project')`);
      await db.exec(`DELETE FROM projects WHERE name = 'Test Project'`);
    });
  }
};

================
File: backend/src/types/pdf.d.ts
================
declare module 'pdfjs-dist/legacy/build/pdf.js' {
  const pdfjsLib: {
    getDocument: (data: Uint8Array) => PDFDocumentLoadingTask;
    GlobalWorkerOptions: {
      workerSrc: string;
      workerPort: any;
    };
  };

  interface PDFDocumentLoadingTask {
    promise: Promise<PDFDocumentProxy>;
  }

  interface PDFDocumentProxy {
    numPages: number;
    getPage: (pageNumber: number) => Promise<PDFPageProxy>;
  }

  interface PDFPageProxy {
    getTextContent: () => Promise<{
      items: Array<{
        str: string;
        [key: string]: any;
      }>;
    }>;
  }

  export = pdfjsLib;
}

declare module 'pdfjs-dist/legacy/build/pdf.worker.js' {
  const worker: any;
  export default worker;
}

================
File: backend/src/config.ts
================
import { config } from 'dotenv';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

config();

export const storageConfig = {
  rootDir: process.env.STORAGE_ROOT || join(dirname(__dirname), 'uploads'),
  allowedTypes: ['.pdf', '.docx', '.doc', '.txt', '.md'],
  maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760'), // 10MB default
};

export const dbConfig = {
  path: process.env.DB_PATH || join(dirname(__dirname), 'research.db'),
};

================
File: backend/src/dev.ts
================
// This file is used only for development
import './index.js';

================
File: backend/.gitignore
================
# Backend specific
/uploads/
/test-uploads/
*.db
*.db-*
research.db
research.db-shm
research.db-wal

# Environment files
.env
.env.*
!.env.example

# Build artifacts
/dist/
/build/
*.tsbuildinfo

# Logs
*.log
logs/

# IDE
.vscode/
.idea/

# OS
.DS_Store

================
File: backend/.mocharc.json
================
{
  "require": ["tsx/cjs", "src/test/setup.ts"],
  "extension": ["ts"],
  "watch-files": ["src/**/*.ts"],
  "timeout": 10000
}

================
File: backend/tsconfig.node.json
================
{
  "extends": "./tsconfig.json",
  "ts-node": {
    "esm": true,
    "experimentalSpecifiers": true
  }
}

================
File: common/src/types/index.ts
================
export interface Template {
  pattern: string;
  constraints: string[];
}

export interface ValidationRule {
  criteria: string;
  parameters: ValidationParameters;
}

export interface ValidationParameters {
  threshold: number;
  boundaries: {
    min: number;
    max: number;
  };
}

export interface ValidationResult {
  isValid: boolean;
  score: number;
  feedback: string;
}

export interface MaterialSource {
  type: string;
  content: string;
  metadata: {
    title?: string;
    subject?: string;
    grade?: string;
    chapter?: string;
    [key: string]: any;
  };
}

export interface Project {
  id: string;
  name: string;
  description?: string;
  modelName: string;
  promptTemplateId: string;
  configuration: string | ProjectConfiguration;
  createdAt?: string;
}

export interface ProjectConfiguration {
  language: string;
  gradeLevel: string;
  subject: string;
}

export interface PromptTemplate {
  id: string;
  name: string;
  version: string;
  type: 'question_generation' | 'validation' | 'objective_extraction';
  content: string;
  description?: string;
  createdAt?: string;
}

================
File: common/package.json
================
{
  "name": "@edge-prompt/common",
  "version": "1.0.0",
  "type": "module",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js"
    },
    "./types": {
      "types": "./dist/types/index.d.ts",
      "import": "./dist/types/index.js"
    }
  },
  "scripts": {
    "build": "tsc",
    "watch": "tsc -w"
  },
  "devDependencies": {
    "typescript": "^5.3.3"
  }
}

================
File: common/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "declaration": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "composite": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"]
}

================
File: docs/IMPLEMENTATION_PLAN.md
================
# Implementation Considerations & Roadmap

## Executive Summary
Key implementation considerations and decision frameworks for EdgePrompt development.

## 1. Implementation Principles

### Educational Impact First
- How does each implementation decision impact educational equity?
- What educational outcomes should guide technical prioritization?
- How can we ensure pedagogy drives technology, not the reverse?
- What measurement framework will validate educational effectiveness?

### Security and Safety Integration
- How should security be integrated throughout the development lifecycle?
- What security validation must occur at each implementation stage?
- How can we balance security with educational flexibility?
- What security governance model ensures continuous alignment?

### Adaptable Implementation
- How should implementation adapt to varied educational contexts?
- What deployment flexibility is required for diverse environments?
- How can implementation phases accommodate resource variations?
- What feedback mechanisms should guide implementation evolution?

### Resource-Conscious Development
- How should development prioritize resource-constrained environments?
- What optimization considerations must guide each implementation stage?
- How can implementation validate effectiveness across device profiles?
- What baseline performance must be maintained throughout development?

## 2. Key Decision Points

### Architecture Evolution
- What architectural decisions must be made early vs. deferred?
- How should architecture evolve from prototype to production?
- What architectural validation should occur at each stage?
- How does architectural evolution maintain security boundaries?

### Educational Workflow Integration
- When and how should educational workflows be integrated?
- What teacher and student feedback should shape implementation?
- How can curriculum alignment be validated continuously?
- What educational stakeholders should be involved at each stage?

### Prompt Engineering Framework
- How should prompt templates evolve during implementation?
- What validation framework ensures template effectiveness?
- How can template management support educational flexibility?
- What template governance maintains safety boundaries?

### Edge Deployment Strategy
- What edge capability progression makes most sense?
- How should offline functionality be incrementally delivered?
- What synchronization mechanisms should be prioritized?
- How can deployment validate effectiveness in varied connectivity?

## 3. Priority Framework

### Impact Assessment Matrix
- **Educational Impact**: How directly does this enhance educational equity?
- **Technical Foundation**: Is this a foundation for other capabilities?
- **Resource Requirement**: What resources are needed for implementation?
- **Risk Level**: What risks does this implementation introduce?

### Capability Categorization
- **Core Capabilities**: Essential for minimum educational value
- **Enhancement Capabilities**: Significant educational enhancement
- **Optimization Capabilities**: Improve experience or performance
- **Future Capabilities**: Long-term educational innovation

### Implementation Sequencing Considerations
- Technical dependencies between capabilities
- Educational workflow integration points
- Risk mitigation sequencing
- Resource availability alignment

## 4. Validation Framework

### Educational Effectiveness
- How will educational impact be measured throughout implementation?
- What teacher and student validation is required?
- How will curriculum alignment be verified?
- What educational outcome metrics indicate success?

### Technical Performance
- What performance benchmarks validate implementation?
- How will resource utilization be assessed?
- What edge deployment metrics indicate success?
- How will technical scalability be verified?

### Security Validation
- What security validation must accompany each implementation stage?
- How will prompt safety be continuously verified?
- What vulnerability assessment should occur throughout implementation?
- How will edge-specific security be validated?

## 5. Adaptability Considerations

### Context Variations
- How must implementation adapt to different educational systems?
- What cultural adaptations should be considered?
- How can implementation accommodate language variations?
- What regional infrastructure differences require adaptation?

### Scale Considerations
- How should implementation support varying deployment scales?
- What performance optimizations become critical at scale?
- How does architecture support different organizational models?
- What governance adaptations are needed for larger implementations?

## 6. Continuous Improvement

### Feedback Integration
- What feedback mechanisms should guide ongoing implementation?
- How should educational user experiences inform evolution?
- What technical monitoring should drive improvement?
- How will security assessments guide ongoing development?

### Knowledge Management
- How should implementation learning be captured and shared?
- What documentation approach supports ongoing improvement?
- How can implementation patterns be formalized for reuse?
- What community engagement supports sustainable development?

## Appendix: Decision Framework Templates
- Implementation prioritization templates
- Risk assessment frameworks
- Educational impact assessment model
- Technical dependency mapping tools

================
File: docs/LICENSE
================
Attribution-ShareAlike 4.0 International

=======================================================================

Creative Commons Corporation ("Creative Commons") is not a law firm and
does not provide legal services or legal advice. Distribution of
Creative Commons public licenses does not create a lawyer-client or
other relationship. Creative Commons makes its licenses and related
information available on an "as-is" basis. Creative Commons gives no
warranties regarding its licenses, any material licensed under their
terms and conditions, or any related information. Creative Commons
disclaims all liability for damages resulting from their use to the
fullest extent possible.

Using Creative Commons Public Licenses

Creative Commons public licenses provide a standard set of terms and
conditions that creators and other rights holders may use to share
original works of authorship and other material subject to copyright
and certain other rights specified in the public license below. The
following considerations are for informational purposes only, are not
exhaustive, and do not form part of our licenses.

     Considerations for licensors: Our public licenses are
     intended for use by those authorized to give the public
     permission to use material in ways otherwise restricted by
     copyright and certain other rights. Our licenses are
     irrevocable. Licensors should read and understand the terms
     and conditions of the license they choose before applying it.
     Licensors should also secure all rights necessary before
     applying our licenses so that the public can reuse the
     material as expected. Licensors should clearly mark any
     material not subject to the license. This includes other CC-
     licensed material, or material used under an exception or
     limitation to copyright. More considerations for licensors:
	wiki.creativecommons.org/Considerations_for_licensors

     Considerations for the public: By using one of our public
     licenses, a licensor grants the public permission to use the
     licensed material under specified terms and conditions. If
     the licensor's permission is not necessary for any reason--for
     example, because of any applicable exception or limitation to
     copyright--then that use is not regulated by the license. Our
     licenses grant only permissions under copyright and certain
     other rights that a licensor has authority to grant. Use of
     the licensed material may still be restricted for other
     reasons, including because others have copyright or other
     rights in the material. A licensor may make special requests,
     such as asking that all changes be marked or described.
     Although not required by our licenses, you are encouraged to
     respect those requests where reasonable. More_considerations
     for the public:
	wiki.creativecommons.org/Considerations_for_licensees

=======================================================================

Creative Commons Attribution-ShareAlike 4.0 International Public
License

By exercising the Licensed Rights (defined below), You accept and agree
to be bound by the terms and conditions of this Creative Commons
Attribution-ShareAlike 4.0 International Public License ("Public
License"). To the extent this Public License may be interpreted as a
contract, You are granted the Licensed Rights in consideration of Your
acceptance of these terms and conditions, and the Licensor grants You
such rights in consideration of benefits the Licensor receives from
making the Licensed Material available under these terms and
conditions.


Section 1 -- Definitions.

  a. Adapted Material means material subject to Copyright and Similar
     Rights that is derived from or based upon the Licensed Material
     and in which the Licensed Material is translated, altered,
     arranged, transformed, or otherwise modified in a manner requiring
     permission under the Copyright and Similar Rights held by the
     Licensor. For purposes of this Public License, where the Licensed
     Material is a musical work, performance, or sound recording,
     Adapted Material is always produced where the Licensed Material is
     synched in timed relation with a moving image.

  b. Adapter's License means the license You apply to Your Copyright
     and Similar Rights in Your contributions to Adapted Material in
     accordance with the terms and conditions of this Public License.

  c. BY-SA Compatible License means a license listed at
     creativecommons.org/compatiblelicenses, approved by Creative
     Commons as essentially the equivalent of this Public License.

  d. Copyright and Similar Rights means copyright and/or similar rights
     closely related to copyright including, without limitation,
     performance, broadcast, sound recording, and Sui Generis Database
     Rights, without regard to how the rights are labeled or
     categorized. For purposes of this Public License, the rights
     specified in Section 2(b)(1)-(2) are not Copyright and Similar
     Rights.

  e. Effective Technological Measures means those measures that, in the
     absence of proper authority, may not be circumvented under laws
     fulfilling obligations under Article 11 of the WIPO Copyright
     Treaty adopted on December 20, 1996, and/or similar international
     agreements.

  f. Exceptions and Limitations means fair use, fair dealing, and/or
     any other exception or limitation to Copyright and Similar Rights
     that applies to Your use of the Licensed Material.

  g. License Elements means the license attributes listed in the name
     of a Creative Commons Public License. The License Elements of this
     Public License are Attribution and ShareAlike.

  h. Licensed Material means the artistic or literary work, database,
     or other material to which the Licensor applied this Public
     License.

  i. Licensed Rights means the rights granted to You subject to the
     terms and conditions of this Public License, which are limited to
     all Copyright and Similar Rights that apply to Your use of the
     Licensed Material and that the Licensor has authority to license.

  j. Licensor means the individual(s) or entity(ies) granting rights
     under this Public License.

  k. Share means to provide material to the public by any means or
     process that requires permission under the Licensed Rights, such
     as reproduction, public display, public performance, distribution,
     dissemination, communication, or importation, and to make material
     available to the public including in ways that members of the
     public may access the material from a place and at a time
     individually chosen by them.

  l. Sui Generis Database Rights means rights other than copyright
     resulting from Directive 96/9/EC of the European Parliament and of
     the Council of 11 March 1996 on the legal protection of databases,
     as amended and/or succeeded, as well as other essentially
     equivalent rights anywhere in the world.

  m. You means the individual or entity exercising the Licensed Rights
     under this Public License. Your has a corresponding meaning.


Section 2 -- Scope.

  a. License grant.

       1. Subject to the terms and conditions of this Public License,
          the Licensor hereby grants You a worldwide, royalty-free,
          non-sublicensable, non-exclusive, irrevocable license to
          exercise the Licensed Rights in the Licensed Material to:

            a. reproduce and Share the Licensed Material, in whole or
               in part; and

            b. produce, reproduce, and Share Adapted Material.

       2. Exceptions and Limitations. For the avoidance of doubt, where
          Exceptions and Limitations apply to Your use, this Public
          License does not apply, and You do not need to comply with
          its terms and conditions.

       3. Term. The term of this Public License is specified in Section
          6(a).

       4. Media and formats; technical modifications allowed. The
          Licensor authorizes You to exercise the Licensed Rights in
          all media and formats whether now known or hereafter created,
          and to make technical modifications necessary to do so. The
          Licensor waives and/or agrees not to assert any right or
          authority to forbid You from making technical modifications
          necessary to exercise the Licensed Rights, including
          technical modifications necessary to circumvent Effective
          Technological Measures. For purposes of this Public License,
          simply making modifications authorized by this Section 2(a)
          (4) never produces Adapted Material.

       5. Downstream recipients.

            a. Offer from the Licensor -- Licensed Material. Every
               recipient of the Licensed Material automatically
               receives an offer from the Licensor to exercise the
               Licensed Rights under the terms and conditions of this
               Public License.

            b. Additional offer from the Licensor -- Adapted Material.
               Every recipient of Adapted Material from You
               automatically receives an offer from the Licensor to
               exercise the Licensed Rights in the Adapted Material
               under the conditions of the Adapter's License You apply.

            c. No downstream restrictions. You may not offer or impose
               any additional or different terms or conditions on, or
               apply any Effective Technological Measures to, the
               Licensed Material if doing so restricts exercise of the
               Licensed Rights by any recipient of the Licensed
               Material.

       6. No endorsement. Nothing in this Public License constitutes or
          may be construed as permission to assert or imply that You
          are, or that Your use of the Licensed Material is, connected
          with, or sponsored, endorsed, or granted official status by,
          the Licensor or others designated to receive attribution as
          provided in Section 3(a)(1)(A)(i).

  b. Other rights.

       1. Moral rights, such as the right of integrity, are not
          licensed under this Public License, nor are publicity,
          privacy, and/or other similar personality rights; however, to
          the extent possible, the Licensor waives and/or agrees not to
          assert any such rights held by the Licensor to the limited
          extent necessary to allow You to exercise the Licensed
          Rights, but not otherwise.

       2. Patent and trademark rights are not licensed under this
          Public License.

       3. To the extent possible, the Licensor waives any right to
          collect royalties from You for the exercise of the Licensed
          Rights, whether directly or through a collecting society
          under any voluntary or waivable statutory or compulsory
          licensing scheme. In all other cases the Licensor expressly
          reserves any right to collect such royalties.


Section 3 -- License Conditions.

Your exercise of the Licensed Rights is expressly made subject to the
following conditions.

  a. Attribution.

       1. If You Share the Licensed Material (including in modified
          form), You must:

            a. retain the following if it is supplied by the Licensor
               with the Licensed Material:

                 i. identification of the creator(s) of the Licensed
                    Material and any others designated to receive
                    attribution, in any reasonable manner requested by
                    the Licensor (including by pseudonym if
                    designated);

                ii. a copyright notice;

               iii. a notice that refers to this Public License;

                iv. a notice that refers to the disclaimer of
                    warranties;

                 v. a URI or hyperlink to the Licensed Material to the
                    extent reasonably practicable;

            b. indicate if You modified the Licensed Material and
               retain an indication of any previous modifications; and

            c. indicate the Licensed Material is licensed under this
               Public License, and include the text of, or the URI or
               hyperlink to, this Public License.

       2. You may satisfy the conditions in Section 3(a)(1) in any
          reasonable manner based on the medium, means, and context in
          which You Share the Licensed Material. For example, it may be
          reasonable to satisfy the conditions by providing a URI or
          hyperlink to a resource that includes the required
          information.

       3. If requested by the Licensor, You must remove any of the
          information required by Section 3(a)(1)(A) to the extent
          reasonably practicable.

  b. ShareAlike.

     In addition to the conditions in Section 3(a), if You Share
     Adapted Material You produce, the following conditions also apply.

       1. The Adapter's License You apply must be a Creative Commons
          license with the same License Elements, this version or
          later, or a BY-SA Compatible License.

       2. You must include the text of, or the URI or hyperlink to, the
          Adapter's License You apply. You may satisfy this condition
          in any reasonable manner based on the medium, means, and
          context in which You Share Adapted Material.

       3. You may not offer or impose any additional or different terms
          or conditions on, or apply any Effective Technological
          Measures to, Adapted Material that restrict exercise of the
          rights granted under the Adapter's License You apply.


Section 4 -- Sui Generis Database Rights.

Where the Licensed Rights include Sui Generis Database Rights that
apply to Your use of the Licensed Material:

  a. for the avoidance of doubt, Section 2(a)(1) grants You the right
     to extract, reuse, reproduce, and Share all or a substantial
     portion of the contents of the database;

  b. if You include all or a substantial portion of the database
     contents in a database in which You have Sui Generis Database
     Rights, then the database in which You have Sui Generis Database
     Rights (but not its individual contents) is Adapted Material,

     including for purposes of Section 3(b); and
  c. You must comply with the conditions in Section 3(a) if You Share
     all or a substantial portion of the contents of the database.

For the avoidance of doubt, this Section 4 supplements and does not
replace Your obligations under this Public License where the Licensed
Rights include other Copyright and Similar Rights.


Section 5 -- Disclaimer of Warranties and Limitation of Liability.

  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE
     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS
     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF
     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,
     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,
     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,
     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT
     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT
     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.

  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE
     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,
     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,
     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,
     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR
     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR
     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR
     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.

  c. The disclaimer of warranties and limitation of liability provided
     above shall be interpreted in a manner that, to the extent
     possible, most closely approximates an absolute disclaimer and
     waiver of all liability.


Section 6 -- Term and Termination.

  a. This Public License applies for the term of the Copyright and
     Similar Rights licensed here. However, if You fail to comply with
     this Public License, then Your rights under this Public License
     terminate automatically.

  b. Where Your right to use the Licensed Material has terminated under
     Section 6(a), it reinstates:

       1. automatically as of the date the violation is cured, provided
          it is cured within 30 days of Your discovery of the
          violation; or

       2. upon express reinstatement by the Licensor.

     For the avoidance of doubt, this Section 6(b) does not affect any
     right the Licensor may have to seek remedies for Your violations
     of this Public License.

  c. For the avoidance of doubt, the Licensor may also offer the
     Licensed Material under separate terms or conditions or stop
     distributing the Licensed Material at any time; however, doing so
     will not terminate this Public License.

  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public
     License.


Section 7 -- Other Terms and Conditions.

  a. The Licensor shall not be bound by any additional or different
     terms or conditions communicated by You unless expressly agreed.

  b. Any arrangements, understandings, or agreements regarding the
     Licensed Material not stated herein are separate from and
     independent of the terms and conditions of this Public License.


Section 8 -- Interpretation.

  a. For the avoidance of doubt, this Public License does not, and
     shall not be interpreted to, reduce, limit, restrict, or impose
     conditions on any use of the Licensed Material that could lawfully
     be made without permission under this Public License.

  b. To the extent possible, if any provision of this Public License is
     deemed unenforceable, it shall be automatically reformed to the
     minimum extent necessary to make it enforceable. If the provision
     cannot be reformed, it shall be severed from this Public License
     without affecting the enforceability of the remaining terms and
     conditions.

  c. No term or condition of this Public License will be waived and no
     failure to comply consented to unless expressly agreed to by the
     Licensor.

  d. Nothing in this Public License constitutes or may be interpreted
     as a limitation upon, or waiver of, any privileges and immunities
     that apply to the Licensor or You, including from the legal
     processes of any jurisdiction or authority.


=======================================================================

Creative Commons is not a party to its public
licenses. Notwithstanding, Creative Commons may elect to apply one of
its public licenses to material it publishes and in those instances
will be considered the “Licensor.” The text of the Creative Commons
public licenses is dedicated to the public domain under the CC0 Public
Domain Dedication. Except for the limited purpose of indicating that
material is shared under a Creative Commons public license or as
otherwise permitted by the Creative Commons policies published at
creativecommons.org/policies, Creative Commons does not authorize the
use of the trademark "Creative Commons" or any other trademark or logo
of Creative Commons without its prior written consent including,
without limitation, in connection with any unauthorized modifications
to any of its public licenses or any other arrangements,
understandings, or agreements concerning use of licensed material. For
the avoidance of doubt, this paragraph does not form part of the
public licenses.

Creative Commons may be contacted at creativecommons.org.

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="EdgePrompt - K-12 Educational LLM Framework" />
    <title>EdgePrompt</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>

================
File: frontend/src/components/common/Navbar.tsx
================
import React, { useEffect, useState } from 'react';
import { useProject } from '../../contexts/ProjectContext';

export const Navbar: React.FC = () => {
  const { projects, activeProject, setActiveProject } = useProject();

  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-primary">
      <div className="container">
        <a className="navbar-brand" href="/">
          <i className="bi bi-braces me-2"></i>
          EdgePrompt
        </a>
        
        {projects.length > 0 && (
          <div className="ms-auto me-4">
            <select 
              className="form-select form-select-sm" 
              value={activeProject?.id || ''} 
              onChange={(e) => {
                const selectedProject = projects.find(p => p.id === e.target.value);
                if (selectedProject) {
                  setActiveProject(selectedProject);
                }
              }}
            >
              <option value="">Select Project</option>
              {projects.map(project => (
                <option key={project.id} value={project.id}>
                  {project.name}
                </option>
              ))}
            </select>
          </div>
        )}
        
        <div className="navbar-text text-light">
          {activeProject ? (
            <span>
              <i className="bi bi-folder me-1"></i>
              {activeProject.name}
            </span>
          ) : (
            <span className="text-warning">
              <i className="bi bi-exclamation-triangle me-1"></i>
              No project selected
            </span>
          )}
        </div>
      </div>
    </nav>
  );
};

================
File: frontend/src/components/common/ProjectSelectionModal.tsx
================
import React from 'react';
import { useProject } from '../../contexts/ProjectContext';

interface Props {
  isOpen: boolean;
  onClose: () => void;
}

export const ProjectSelectionModal: React.FC<Props> = ({ isOpen, onClose }) => {
  const { projects, setActiveProject } = useProject();

  if (!isOpen) return null;

  return (
    <div className="modal show d-block" tabIndex={-1} style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
      <div className="modal-dialog">
        <div className="modal-content">
          <div className="modal-header bg-warning text-dark">
            <h5 className="modal-title">
              <i className="bi bi-exclamation-triangle-fill me-2"></i>
              Project Selection Required
            </h5>
            <button type="button" className="btn-close" onClick={onClose}></button>
          </div>
          <div className="modal-body">
            <p>Please select a project before uploading materials.</p>
            
            {projects.length > 0 ? (
              <div className="form-group">
                <label htmlFor="projectSelect" className="form-label">Choose a project:</label>
                <select 
                  id="projectSelect"
                  className="form-select" 
                  onChange={(e) => {
                    const selectedProject = projects.find(p => p.id === e.target.value);
                    if (selectedProject) {
                      setActiveProject(selectedProject);
                      onClose();
                    }
                  }}
                  defaultValue=""
                >
                  <option value="" disabled>Select a project</option>
                  {projects.map(project => (
                    <option key={project.id} value={project.id}>
                      {project.name}
                    </option>
                  ))}
                </select>
              </div>
            ) : (
              <div className="alert alert-info mb-0">
                <p className="mb-0">You don't have any projects yet. Please create a project first.</p>
              </div>
            )}
          </div>
          <div className="modal-footer">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              Close
            </button>
            {projects.length === 0 && (
              <button 
                type="button" 
                className="btn btn-primary"
                onClick={() => {
                  // Navigate to project creation or open project creation modal
                  onClose();
                  // Add project creation logic here
                }}
              >
                <i className="bi bi-plus-circle me-1"></i>
                Create Project
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

================
File: frontend/src/components/project/ProjectEditForm.tsx
================
import React, { useState } from 'react';
import { Project, ProjectConfiguration } from '../../types';
import { api } from '../../services/api';
import { useProject } from '../../contexts/ProjectContext';
import { PromptTemplatePreview } from '../prompt/PromptTemplatePreview';

interface Props {
  project: Project;
  onClose: () => void;
  onSuccess: () => void;
}

export const ProjectEditForm: React.FC<Props> = ({ project, onClose, onSuccess }) => {
  const { promptTemplates } = useProject();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const initialConfig = typeof project.configuration === 'string' 
    ? JSON.parse(project.configuration) as ProjectConfiguration
    : project.configuration;
  
  const [formData, setFormData] = useState({
    name: project.name,
    description: project.description || '',
    modelName: project.modelName,
    promptTemplateId: project.promptTemplateId,
    configuration: {
      language: initialConfig.language,
      gradeLevel: initialConfig.gradeLevel,
      subject: initialConfig.subject
    }
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      await api.updateProject(project.id, formData);
      onSuccess();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update project');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="card">
      <div className="card-header">
        <h5 className="mb-0">Edit Project</h5>
      </div>
      <div className="card-body">
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Project Name</label>
            <input
              type="text"
              className="form-control"
              value={formData.name}
              onChange={e => setFormData({...formData, name: e.target.value})}
              required
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Description</label>
            <textarea
              className="form-control"
              value={formData.description}
              onChange={e => setFormData({...formData, description: e.target.value})}
              rows={2}
            />
          </div>

          <div className="row">
            <div className="col-md-4">
              <div className="mb-3">
                <label className="form-label">Model</label>
                <select 
                  className="form-select"
                  value={formData.modelName}
                  onChange={e => setFormData({...formData, modelName: e.target.value})}
                  required
                >
                  <option value="Llama 3.2 3B">Llama 3.2 3B</option>
                  <option value="Llama 3.2 7B">Llama 3.2 7B</option>
                </select>
              </div>
            </div>
            <div className="col-md-4">
              <div className="mb-3">
                <label className="form-label">Language</label>
                <select
                  className="form-select"
                  value={formData.configuration.language}
                  onChange={e => setFormData({
                    ...formData,
                    configuration: {
                      ...formData.configuration,
                      language: e.target.value
                    }
                  })}
                  required
                >
                  <option value="English">English</option>
                  <option value="Indonesian">Indonesian</option>
                </select>
              </div>
            </div>
            <div className="col-md-4">
              <div className="mb-3">
                <label className="form-label">Subject</label>
                <input
                  type="text"
                  className="form-control"
                  value={formData.configuration.subject}
                  onChange={e => setFormData({
                    ...formData,
                    configuration: {
                      ...formData.configuration,
                      subject: e.target.value
                    }
                  })}
                  placeholder="e.g., English"
                  required
                />
              </div>
            </div>
          </div>

          <div className="mb-3">
            <label className="form-label">Grade Level</label>
            <input
              type="text"
              className="form-control"
              value={formData.configuration.gradeLevel}
              onChange={e => setFormData({
                ...formData,
                configuration: {
                  ...formData.configuration,
                  gradeLevel: e.target.value
                }
              })}
              placeholder="e.g., 5th Grade"
              required
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Prompt Template</label>
            {promptTemplates.length > 0 ? (
              <>
                <select 
                  className="form-select"
                  value={formData.promptTemplateId}
                  onChange={e => setFormData({...formData, promptTemplateId: e.target.value})}
                  required
                >
                  <option value="">Select template...</option>
                  {promptTemplates.map(template => (
                    <option key={template.id} value={template.id}>
                      {template.name} (v{template.version}) - {template.type}
                    </option>
                  ))}
                </select>
                {formData.promptTemplateId && (
                  <div className="mt-3">
                    <PromptTemplatePreview 
                      template={promptTemplates.find(t => t.id === formData.promptTemplateId)!} 
                    />
                  </div>
                )}
              </>
            ) : (
              <div className="alert alert-warning">
                <i className="bi bi-exclamation-triangle me-2"></i>
                No prompt templates available. Please create one first.
              </div>
            )}
          </div>

          {error && (
            <div className="alert alert-danger">
              <i className="bi bi-exclamation-triangle me-2"></i>
              {error}
            </div>
          )}

          <div className="d-flex justify-content-end gap-2">
            <button 
              type="button" 
              className="btn btn-light"
              onClick={onClose}
              disabled={loading}
            >
              Cancel
            </button>
            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" />
                  Saving...
                </>
              ) : (
                <>
                  <i className="bi bi-check-circle me-2"></i>
                  Save Changes
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

================
File: frontend/src/components/project/ProjectForm.tsx
================
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api';
import { PromptTemplate } from '../../types';

interface Props {
  onClose: () => void;
  onSuccess: () => void;
}

export const ProjectForm: React.FC<Props> = ({ onClose, onSuccess }) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [promptTemplates, setPromptTemplates] = useState<PromptTemplate[]>([]);
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    modelName: 'Llama 3.2 3B', // Default model
    promptTemplateId: '',
    configuration: {
      language: 'English',
      gradeLevel: '',
      subject: ''
    }
  });

  useEffect(() => {
    // Load prompt templates
    api.getPromptTemplates()
      .then(templates => setPromptTemplates(templates))
      .catch(err => setError('Failed to load prompt templates'));
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      await api.createProject(formData);
      onSuccess();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create project');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="card">
      <div className="card-header">
        <h5 className="mb-0">Create New Project</h5>
      </div>
      <div className="card-body">
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Project Name</label>
            <input
              type="text"
              className="form-control"
              value={formData.name}
              onChange={e => setFormData({...formData, name: e.target.value})}
              required
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Description</label>
            <textarea
              className="form-control"
              value={formData.description}
              onChange={e => setFormData({...formData, description: e.target.value})}
              rows={2}
            />
          </div>

          <div className="row">
            <div className="col-md-4">
              <div className="mb-3">
                <label className="form-label">Model</label>
                <select 
                  className="form-select"
                  value={formData.modelName}
                  onChange={e => setFormData({...formData, modelName: e.target.value})}
                  required
                >
                  <option value="Llama 3.2 3B">Llama 3.2 3B</option>
                  <option value="Llama 3.2 7B">Llama 3.2 7B</option>
                </select>
              </div>
            </div>
            <div className="col-md-4">
              <div className="mb-3">
                <label className="form-label">Language</label>
                <select
                  className="form-select"
                  value={formData.configuration.language}
                  onChange={e => setFormData({
                    ...formData,
                    configuration: {
                      ...formData.configuration,
                      language: e.target.value
                    }
                  })}
                  required
                >
                  <option value="English">English</option>
                  <option value="Indonesian">Indonesian</option>
                </select>
              </div>
            </div>
            <div className="col-md-4">
              <div className="mb-3">
                <label className="form-label">Subject</label>
                <input
                  type="text"
                  className="form-control"
                  value={formData.configuration.subject}
                  onChange={e => setFormData({
                    ...formData,
                    configuration: {
                      ...formData.configuration,
                      subject: e.target.value
                    }
                  })}
                  placeholder="e.g., English"
                  required
                />
              </div>
            </div>
          </div>

          <div className="mb-3">
            <label className="form-label">Grade Level</label>
            <input
              type="text"
              className="form-control"
              value={formData.configuration.gradeLevel}
              onChange={e => setFormData({
                ...formData,
                configuration: {
                  ...formData.configuration,
                  gradeLevel: e.target.value
                }
              })}
              placeholder="e.g., 5th Grade"
              required
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Prompt Template</label>
            {promptTemplates.length > 0 ? (
              <select 
                className="form-select"
                value={formData.promptTemplateId}
                onChange={e => setFormData({...formData, promptTemplateId: e.target.value})}
                required
              >
                <option value="">Select template...</option>
                {promptTemplates.map(template => (
                  <option key={template.id} value={template.id}>
                    {template.name} (v{template.version})
                  </option>
                ))}
              </select>
            ) : (
              <div className="alert alert-warning">
                <i className="bi bi-exclamation-triangle me-2"></i>
                No prompt templates available. Please create one first.
              </div>
            )}
          </div>

          {error && (
            <div className="alert alert-danger">
              <i className="bi bi-exclamation-triangle me-2"></i>
              {error}
            </div>
          )}

          <div className="d-flex justify-content-end gap-2">
            <button 
              type="button" 
              className="btn btn-light"
              onClick={onClose}
              disabled={loading}
            >
              Cancel
            </button>
            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" />
                  Creating...
                </>
              ) : (
                <>
                  <i className="bi bi-check-circle me-2"></i>
                  Create Project
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

================
File: frontend/src/components/prompt/PromptTemplateForm.tsx
================
import React, { useState } from 'react';
import { PromptTemplate } from '../../types';
import { api } from '../../services/api';
import { useProject } from '../../contexts/ProjectContext';

interface Props {
  onClose: () => void;
  onSuccess: () => void;
  template?: PromptTemplate; // For editing existing template
}

export const PromptTemplateForm: React.FC<Props> = ({ onClose, onSuccess, template }) => {
  const { refreshTemplates } = useProject();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const [formData, setFormData] = useState({
    name: template?.name || '',
    version: template?.version || '1.0',
    type: template?.type || 'question_generation',
    content: template?.content || '',
    description: template?.description || '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      if (template) {
        await api.updatePromptTemplate(template.id, formData);
      } else {
        await api.createPromptTemplate(formData);
      }
      await refreshTemplates();
      onSuccess();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save template');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="card">
      <div className="card-header">
        <h5 className="mb-0">{template ? 'Edit Template' : 'Create Template'}</h5>
      </div>
      <div className="card-body">
        <form onSubmit={handleSubmit}>
          <div className="row">
            <div className="col-md-6">
              <div className="mb-3">
                <label className="form-label">Template Name</label>
                <input
                  type="text"
                  className="form-control"
                  value={formData.name}
                  onChange={e => setFormData({...formData, name: e.target.value})}
                  required
                />
              </div>
            </div>
            <div className="col-md-3">
              <div className="mb-3">
                <label className="form-label">Version</label>
                <input
                  type="text"
                  className="form-control"
                  value={formData.version}
                  onChange={e => setFormData({...formData, version: e.target.value})}
                  required
                />
              </div>
            </div>
            <div className="col-md-3">
              <div className="mb-3">
                <label className="form-label">Type</label>
                <select
                  className="form-select"
                  value={formData.type}
                  onChange={e => setFormData({...formData, type: e.target.value as PromptTemplate['type']})}
                  required
                >
                  <option value="question_generation">Question Generation</option>
                  <option value="validation">Validation</option>
                  <option value="objective_extraction">Objective Extraction</option>
                </select>
              </div>
            </div>
          </div>

          <div className="mb-3">
            <label className="form-label">Description</label>
            <textarea
              className="form-control"
              value={formData.description}
              onChange={e => setFormData({...formData, description: e.target.value})}
              rows={2}
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Template Content</label>
            <textarea
              className="form-control font-monospace"
              value={formData.content}
              onChange={e => setFormData({...formData, content: e.target.value})}
              rows={8}
              required
            />
            <small className="text-muted">
              Use {'{context}'} and {'{focusArea}'} as placeholders in your template
            </small>
          </div>

          {error && (
            <div className="alert alert-danger">
              <i className="bi bi-exclamation-triangle me-2"></i>
              {error}
            </div>
          )}

          <div className="d-flex justify-content-end gap-2">
            <button 
              type="button" 
              className="btn btn-light"
              onClick={onClose}
              disabled={loading}
            >
              Cancel
            </button>
            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" />
                  Saving...
                </>
              ) : (
                <>
                  <i className="bi bi-check-circle me-2"></i>
                  {template ? 'Save Changes' : 'Create Template'}
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

================
File: frontend/src/components/prompt/PromptTemplateManager.tsx
================
import React, { useState } from 'react';
import { PromptTemplate } from '../../types';
import { api } from '../../services/api';
import { useProject } from '../../contexts/ProjectContext';
import { PromptTemplateForm } from './PromptTemplateForm';
import { PromptTemplatePreview } from './PromptTemplatePreview';

export const PromptTemplateManager: React.FC = () => {
  const { promptTemplates, refreshTemplates } = useProject();
  const [isCreating, setIsCreating] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<PromptTemplate | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleDelete = async (template: PromptTemplate) => {
    if (!window.confirm(`Are you sure you want to delete template "${template.name}"?`)) {
      return;
    }

    try {
      await api.deletePromptTemplate(template.id);
      await refreshTemplates();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete template');
    }
  };

  if (isCreating || editingTemplate) {
    return (
      <PromptTemplateForm
        template={editingTemplate || undefined}
        onClose={() => {
          setIsCreating(false);
          setEditingTemplate(null);
        }}
        onSuccess={() => {
          setIsCreating(false);
          setEditingTemplate(null);
        }}
      />
    );
  }

  return (
    <div className="card">
      <div className="card-header bg-light">
        <div className="d-flex justify-content-between align-items-center">
          <h5 className="mb-0">
            <i className="bi bi-file-earmark-text me-2"></i>
            Prompt Templates
          </h5>
          <button 
            className="btn btn-sm btn-primary"
            onClick={() => setIsCreating(true)}
          >
            <i className="bi bi-plus-circle me-1"></i>
            New Template
          </button>
        </div>
      </div>

      {error && (
        <div className="alert alert-danger m-3">
          <i className="bi bi-exclamation-triangle me-2"></i>
          {error}
        </div>
      )}

      <div className="list-group list-group-flush">
        {promptTemplates.map(template => (
          <div key={template.id} className="list-group-item">
            <div className="d-flex justify-content-between align-items-start mb-2">
              <div>
                <h6 className="mb-1">{template.name}</h6>
                <small className="text-muted">Version {template.version}</small>
              </div>
              <div className="btn-group">
                <button
                  className="btn btn-sm btn-outline-primary"
                  onClick={() => setEditingTemplate(template)}
                >
                  <i className="bi bi-pencil"></i>
                </button>
                <button
                  className="btn btn-sm btn-outline-danger"
                  onClick={() => handleDelete(template)}
                >
                  <i className="bi bi-trash"></i>
                </button>
              </div>
            </div>
            <PromptTemplatePreview template={template} />
          </div>
        ))}

        {promptTemplates.length === 0 && !isCreating && (
          <div className="text-center text-muted py-4">
            <i className="bi bi-file-earmark-plus display-4"></i>
            <p className="mt-2">No templates yet. Create your first template!</p>
          </div>
        )}
      </div>
    </div>
  );
};

================
File: frontend/src/components/prompt/PromptTemplatePreview.tsx
================
import React from 'react';
import { PromptTemplate } from '../../types';

interface Props {
  template: PromptTemplate;
}

export const PromptTemplatePreview: React.FC<Props> = ({ template }) => {
  return (
    <div className="card">
      <div className="card-header">
        <h6 className="mb-0">
          {template.name}
          <small className="text-muted ms-2">v{template.version}</small>
          <span className={`badge bg-${getTypeColor(template.type)} float-end`}>
            {template.type}
          </span>
        </h6>
      </div>
      <div className="card-body">
        <p className="text-muted small mb-2">{template.description}</p>
        <pre className="border rounded p-2 bg-light">
          <code>{template.content}</code>
        </pre>
      </div>
    </div>
  );
};

function getTypeColor(type: string): string {
  const colors = {
    'question_generation': 'primary',
    'validation': 'success',
    'objective_extraction': 'info',
    'default': 'secondary'
  };
  
  return colors[type as keyof typeof colors] || colors.default;
}

================
File: frontend/src/components/prompt/PromptTemplateView.tsx
================
import React, { useState } from 'react';
import { PromptTemplate } from '../../types';
import { api } from '../../services/api';

interface Props {
  template: PromptTemplate;
  onUpdate: () => void;
  onClose: () => void;
}

type PromptTemplateType = 'question_generation' | 'validation' | 'objective_extraction';

export const PromptTemplateView: React.FC<Props> = ({ template, onUpdate, onClose }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    name: template.name,
    version: template.version,
    type: template.type as PromptTemplateType,
    content: template.content,
    description: template.description || ''
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      await api.updatePromptTemplate(template.id, formData);
      onUpdate();
      setIsEditing(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update template');
    } finally {
      setLoading(false);
    }
  };

  if (!isEditing) {
    return (
      <div className="card">
        <div className="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 className="mb-0">{template.name}</h5>
            <small className="text-muted">Version {template.version}</small>
          </div>
          <div className="d-flex gap-2">
            <button 
              className="btn btn-sm btn-outline-primary"
              onClick={() => setIsEditing(true)}
            >
              <i className="bi bi-pencil me-1"></i>
              Edit
            </button>
            <button 
              className="btn btn-sm btn-outline-secondary"
              onClick={onClose}
            >
              <i className="bi bi-x-lg"></i>
            </button>
          </div>
        </div>
        <div className="card-body">
          {template.description && (
            <p className="text-muted mb-3">{template.description}</p>
          )}
          <div className="mb-3">
            <span className={`badge bg-${getTypeColor(template.type)}`}>
              {template.type}
            </span>
          </div>
          <div className="bg-light p-3 rounded">
            <pre className="mb-0" style={{ whiteSpace: 'pre-wrap' }}>
              {template.content}
            </pre>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="card">
      <div className="card-header">
        <h5 className="mb-0">Edit Template</h5>
      </div>
      <div className="card-body">
        <form onSubmit={handleSubmit}>
          <div className="row">
            <div className="col-md-6">
              <div className="mb-3">
                <label className="form-label">Template Name</label>
                <input
                  type="text"
                  className="form-control"
                  value={formData.name}
                  onChange={e => setFormData({...formData, name: e.target.value})}
                  required
                />
              </div>
            </div>
            <div className="col-md-3">
              <div className="mb-3">
                <label className="form-label">Version</label>
                <input
                  type="text"
                  className="form-control"
                  value={formData.version}
                  onChange={e => setFormData({...formData, version: e.target.value})}
                  required
                />
              </div>
            </div>
            <div className="col-md-3">
              <div className="mb-3">
                <label className="form-label">Type</label>
                <select
                  className="form-select"
                  value={formData.type}
                  onChange={e => setFormData({...formData, type: e.target.value as PromptTemplateType})}
                  required
                >
                  <option value="question_generation">Question Generation</option>
                  <option value="validation">Validation</option>
                  <option value="objective_extraction">Objective Extraction</option>
                </select>
              </div>
            </div>
          </div>

          <div className="mb-3">
            <label className="form-label">Description</label>
            <textarea
              className="form-control"
              value={formData.description}
              onChange={e => setFormData({...formData, description: e.target.value})}
              rows={2}
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Template Content</label>
            <textarea
              className="form-control font-monospace"
              value={formData.content}
              onChange={e => setFormData({...formData, content: e.target.value})}
              rows={10}
              required
            />
          </div>

          {error && (
            <div className="alert alert-danger">
              <i className="bi bi-exclamation-triangle me-2"></i>
              {error}
            </div>
          )}

          <div className="d-flex justify-content-end gap-2">
            <button 
              type="button" 
              className="btn btn-light"
              onClick={() => setIsEditing(false)}
              disabled={loading}
            >
              Cancel
            </button>
            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" />
                  Saving...
                </>
              ) : (
                <>
                  <i className="bi bi-check-circle me-2"></i>
                  Save Changes
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

function getTypeColor(type: string): string {
  const colors = {
    'question_generation': 'primary',
    'validation': 'success',
    'objective_extraction': 'info',
    'default': 'secondary'
  };
  
  return colors[type as keyof typeof colors] || colors.default;
}

================
File: frontend/src/components/teacher/MaterialDetailView.tsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Material } from '../../types';
import { api } from '../../services/api';
import { useProject } from '../../contexts/ProjectContext';
import { QuestionGenerator } from './QuestionGenerator';

interface Props {
  materialId: string;
  onBack: () => void;
  onRefresh: () => void;
}

export const MaterialDetailView: React.FC<Props> = ({ materialId, onBack, onRefresh }) => {
  const [material, setMaterial] = useState<Material | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'content' | 'objectives' | 'templates' | 'questions'>('content');
  
  // State for content editing
  const [isEditing, setIsEditing] = useState(false);
  const [editedContent, setEditedContent] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  
  // State for title editing
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [editedTitle, setEditedTitle] = useState('');
  const [isSavingTitle, setIsSavingTitle] = useState(false);
  
  // State for file re-upload
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isReprocessing, setIsReprocessing] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const loadMaterial = async () => {
      setLoading(true);
      try {
        const materialData = await api.getMaterial(materialId);
        setMaterial(materialData);
        setEditedContent(materialData.content);
        setEditedTitle(materialData.title || 'Untitled Material');
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load material');
      } finally {
        setLoading(false);
      }
    };

    loadMaterial();
  }, [materialId]);

  const handleSaveContent = async () => {
    if (!material) return;
    
    setIsSaving(true);
    try {
      await api.updateMaterialContent(material.id, editedContent);
      
      // Update the local state
      setMaterial({
        ...material,
        content: editedContent
      });
      
      setIsEditing(false);
      onRefresh();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save content');
    } finally {
      setIsSaving(false);
    }
  };

  const handleSaveTitle = async () => {
    if (!material) return;
    
    setIsSavingTitle(true);
    try {
      await api.updateMaterialTitle(material.id, editedTitle);
      
      // Update the local state
      setMaterial({
        ...material,
        title: editedTitle
      });
      
      setIsEditingTitle(false);
      onRefresh();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save title');
    } finally {
      setIsSavingTitle(false);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleReprocess = async () => {
    if (!material || !selectedFile) return;
    
    setIsReprocessing(true);
    try {
      const formData = new FormData();
      formData.append('file', selectedFile);
      
      const result = await api.reprocessMaterial(material.id, formData);
      
      // Update the local state with reprocessed content
      setMaterial({
        ...material,
        content: result.content,
        metadata: {
          ...material.metadata,
          learningObjectives: result.objectives,
          templates: result.templates,
          wordCount: result.wordCount,
          processedAt: new Date().toISOString()
        }
      });
      
      setSelectedFile(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
      
      onRefresh();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to reprocess material');
    } finally {
      setIsReprocessing(false);
    }
  };

  const handleDelete = async () => {
    if (!material || !window.confirm('Are you sure you want to delete this material?')) {
      return;
    }
    
    try {
      await api.deleteMaterial(material.id);
      onBack();
      onRefresh();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete material');
    }
  };

  const handleGenerateQuestions = () => {
    setActiveTab('questions');
  };

  if (loading) {
    return (
      <div className="text-center py-5">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
        <p className="mt-3">Loading material...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="alert alert-danger">
        <h4 className="alert-heading">Error</h4>
        <p>{error}</p>
        <button className="btn btn-outline-danger" onClick={onBack}>
          <i className="bi bi-arrow-left me-2"></i>Back
        </button>
      </div>
    );
  }

  if (!material) {
    return (
      <div className="alert alert-warning">
        <h4 className="alert-heading">Material Not Found</h4>
        <p>The material you're looking for could not be found.</p>
        <button className="btn btn-outline-warning" onClick={onBack}>
          <i className="bi bi-arrow-left me-2"></i>Back
        </button>
      </div>
    );
  }

  return (
    <div className="card">
      <div className="card-header bg-light">
        <div className="d-flex justify-content-between align-items-center">
          <div className="d-flex align-items-center">
            <button className="btn btn-sm btn-outline-secondary me-2" onClick={onBack}>
              <i className="bi bi-arrow-left"></i>
            </button>
            
            {isEditingTitle ? (
              <div className="input-group" style={{ maxWidth: '400px' }}>
                <input
                  type="text"
                  className="form-control form-control-sm"
                  value={editedTitle}
                  onChange={(e) => setEditedTitle(e.target.value)}
                  autoFocus
                />
                <button 
                  className="btn btn-sm btn-success" 
                  onClick={handleSaveTitle}
                  disabled={isSavingTitle || !editedTitle.trim()}
                >
                  {isSavingTitle ? (
                    <span className="spinner-border spinner-border-sm" role="status"></span>
                  ) : (
                    <i className="bi bi-check"></i>
                  )}
                </button>
                <button 
                  className="btn btn-sm btn-outline-secondary" 
                  onClick={() => {
                    setIsEditingTitle(false);
                    setEditedTitle(material.title || 'Untitled Material');
                  }}
                  disabled={isSavingTitle}
                >
                  <i className="bi bi-x"></i>
                </button>
              </div>
            ) : (
              <div className="d-flex align-items-center">
                <span className="h5 mb-0">{material.title || 'Untitled Material'}</span>
                <button 
                  className="btn btn-sm btn-link text-muted" 
                  onClick={() => setIsEditingTitle(true)}
                  title="Edit title"
                >
                  <i className="bi bi-pencil-fill"></i>
                </button>
                <span className={`badge bg-${getBadgeColor(material.status)} ms-2`}>
                  {material.status}
                </span>
              </div>
            )}
          </div>
          
          <div>
            {activeTab !== 'questions' && (
              <button
                className="btn btn-primary"
                onClick={handleGenerateQuestions}
              >
                <i className="bi bi-lightning-charge me-1"></i>
                Generate Questions
              </button>
            )}
          </div>
        </div>
      </div>

      <ul className="nav nav-tabs mb-3">
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'content' ? 'active' : ''}`}
            onClick={() => setActiveTab('content')}
          >
            <i className="bi bi-file-text me-1"></i> Content
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'objectives' ? 'active' : ''}`}
            onClick={() => setActiveTab('objectives')}
          >
            <i className="bi bi-bullseye me-1"></i> Learning Objectives 
            {(material.metadata?.learningObjectives?.length ?? 0) > 0 && (
              <span className="ms-1">({material.metadata?.learningObjectives?.length})</span>
            )}
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'templates' ? 'active' : ''}`}
            onClick={() => setActiveTab('templates')}
          >
            <i className="bi bi-grid me-1"></i> Templates 
            {(material.metadata?.templates?.length ?? 0) > 0 && (
              <span className="ms-1">({material.metadata?.templates?.length})</span>
            )}
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'questions' ? 'active' : ''}`}
            onClick={() => setActiveTab('questions')}
          >
            <i className="bi bi-question-circle me-1"></i> Questions
          </button>
        </li>
      </ul>

      <div className="card-body">
        {activeTab === 'content' && (
          <div>
            <div className="d-flex justify-content-between align-items-center mb-3">
              <h5 className="mb-0">Material Content</h5>
              <div>
                {isEditing ? (
                  <>
                    <button 
                      className="btn btn-sm btn-success me-2" 
                      onClick={handleSaveContent}
                      disabled={isSaving}
                    >
                      {isSaving ? (
                        <>
                          <span className="spinner-border spinner-border-sm me-1"></span>
                          Saving...
                        </>
                      ) : (
                        <>
                          <i className="bi bi-check-lg me-1"></i>
                          Save
                        </>
                      )}
                    </button>
                    <button 
                      className="btn btn-sm btn-outline-secondary" 
                      onClick={() => {
                        setIsEditing(false);
                        setEditedContent(material.content);
                      }}
                      disabled={isSaving}
                    >
                      Cancel
                    </button>
                  </>
                ) : (
                  <button 
                    className="btn btn-sm btn-outline-primary"
                    onClick={() => setIsEditing(true)}
                  >
                    <i className="bi bi-pencil me-1"></i>
                    Edit
                  </button>
                )}
              </div>
            </div>
            
            {/* File re-upload section */}
            <div className="mb-3 border p-3 rounded bg-light">
              <div className="d-flex align-items-center">
                <div className="flex-grow-1">
                  <label className="form-label mb-0">Update material file</label>
                  <div className="input-group">
                    <input 
                      ref={fileInputRef}
                      type="file" 
                      className="form-control form-control-sm" 
                      onChange={handleFileChange}
                      accept=".pdf,.docx,.doc,.md,.txt"
                    />
                    <button 
                      className="btn btn-primary btn-sm" 
                      onClick={handleReprocess}
                      disabled={!selectedFile || isReprocessing}
                    >
                      {isReprocessing ? (
                        <>
                          <span className="spinner-border spinner-border-sm me-1"></span>
                          Processing...
                        </>
                      ) : (
                        <>
                          <i className="bi bi-arrow-repeat me-1"></i>
                          Reprocess
                        </>
                      )}
                    </button>
                  </div>
                </div>
              </div>
              <small className="text-muted">Upload a new file to replace and reprocess the content</small>
            </div>
            
            {isEditing ? (
              <textarea
                className="form-control font-monospace"
                style={{ 
                  height: '500px', 
                  fontSize: '0.9rem',
                  whiteSpace: 'pre-wrap'
                }}
                value={editedContent}
                onChange={(e) => setEditedContent(e.target.value)}
              />
            ) : (
              <div 
                className="p-3 bg-light rounded border" 
                style={{ 
                  maxHeight: '500px', 
                  overflow: 'auto'
                }}
              >
                <pre style={{ whiteSpace: 'pre-wrap', fontSize: '0.9em' }}>
                  {material.content}
                </pre>
              </div>
            )}
            
            <div className="mt-3">
              <div className="row">
                <div className="col-md-3">
                  <div className="mb-3">
                    <span className="text-muted">Focus Area:</span>
                    <div className="fw-bold">{material.focusArea}</div>
                  </div>
                </div>
                <div className="col-md-3">
                  <div className="mb-3">
                    <span className="text-muted">Word Count:</span>
                    <div className="fw-bold">{material.metadata?.wordCount || 'N/A'}</div>
                  </div>
                </div>
                <div className="col-md-3">
                  <div className="mb-3">
                    <span className="text-muted">Subject:</span>
                    <div className="fw-bold">{material.metadata?.subject || 'N/A'}</div>
                  </div>
                </div>
                <div className="col-md-3">
                  <div className="mb-3">
                    <span className="text-muted">Grade Level:</span>
                    <div className="fw-bold">{material.metadata?.grade || 'N/A'}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'objectives' && (
          <div>
            <h5 className="mb-3">Learning Objectives</h5>
            <div className="list-group">
              {material.metadata?.learningObjectives?.length ? (
                material.metadata.learningObjectives.map((objective, index) => (
                  <div key={index} className="list-group-item">
                    {objective}
                  </div>
                ))
              ) : (
                <div className="alert alert-info">No learning objectives found.</div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'templates' && (
          <div>
            <h5 className="mb-3">Question Templates</h5>
            <div className="list-group">
              {material.metadata?.templates?.length ? (
                material.metadata.templates.map((template, index) => (
                  <div key={index} className="list-group-item">
                    <div className="mb-1 fw-bold">{template.pattern}</div>
                    <div className="mb-2">
                      <span className="badge bg-primary me-1">{template.targetGrade}</span>
                      <span className="badge bg-secondary">{template.subject}</span>
                    </div>
                    <div className="small text-muted mb-2">Constraints:</div>
                    <ul className="mb-0 ps-3">
                      {template.constraints.map((constraint, cIdx) => (
                        <li key={cIdx}><small>{constraint}</small></li>
                      ))}
                    </ul>
                  </div>
                ))
              ) : (
                <div className="alert alert-info">No templates found.</div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'questions' && (
          <QuestionGenerator material={material} />
        )}
      </div>

      <div className="card-footer bg-light d-flex justify-content-between">
        <button className="btn btn-sm btn-outline-danger" onClick={handleDelete}>
          <i className="bi bi-trash me-1"></i> Delete Material
        </button>
        <small className="text-muted align-self-center">
          Created: {new Date(material.createdAt).toLocaleString()}
        </small>
      </div>
    </div>
  );
};

function getBadgeColor(status: string): string {
  switch (status) {
    case 'completed': return 'success';
    case 'pending': return 'warning';
    case 'processing': return 'primary';
    case 'error': return 'danger';
    default: return 'secondary';
  }
}

================
File: frontend/src/components/teacher/MaterialsManager.tsx
================
import React, { useState, useEffect } from 'react';
import { Material } from '../../types';
import { api } from '../../services/api';
import { useProject } from '../../contexts/ProjectContext';
import { SimplifiedMaterialUploader } from './SimplifiedMaterialUploader';
import { MaterialDetailView } from './MaterialDetailView';

export const MaterialsManager: React.FC = () => {
  const { activeProject } = useProject();
  const [materials, setMaterials] = useState<Material[]>([]);
  const [selectedMaterialId, setSelectedMaterialId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadMaterials = async () => {
    if (!activeProject) return;
    
    setIsLoading(true);
    setError(null);
    try {
      const projectMaterials = await api.getMaterials(activeProject.id);
      setMaterials(projectMaterials);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load materials');
      console.error('Error loading materials:', err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadMaterials();
  }, [activeProject]);

  if (!activeProject) {
    return (
      <div className="alert alert-warning">
        <i className="bi bi-exclamation-triangle-fill me-2"></i>
        Please select a project to manage materials
      </div>
    );
  }

  return (
    <div className="row">
      {/* Left Sidebar */}
      <div className="col-md-3">
        <SimplifiedMaterialUploader onMaterialUploaded={loadMaterials} />
        
        <div className="card">
          <div className="card-header bg-light">
            <h5 className="mb-0">
              <i className="bi bi-journal-text me-2"></i>
              Materials
            </h5>
          </div>
          <div className="card-body p-0">
            {isLoading ? (
              <div className="text-center py-3">
                <div className="spinner-border spinner-border-sm text-primary" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
                <p className="mt-2 small">Loading materials...</p>
              </div>
            ) : materials.length === 0 ? (
              <div className="text-center py-3">
                <p className="text-muted mb-0 small">No materials found</p>
              </div>
            ) : (
              <div className="list-group list-group-flush">
                {materials.map(material => (
                  <button
                    key={material.id}
                    className={`list-group-item list-group-item-action ${selectedMaterialId === material.id ? 'active' : ''}`}
                    onClick={() => setSelectedMaterialId(material.id)}
                  >
                    <div className="d-flex justify-content-between align-items-start">
                      <div>
                        <div className="fw-semibold text-truncate" style={{ maxWidth: '160px' }}>
                          {material.title || 'Untitled Material'}
                        </div>
                        <div className="small text-truncate" style={{ maxWidth: '160px' }}>
                          {material.focusArea}
                        </div>
                      </div>
                      <span className={`badge bg-${getBadgeColor(material.status)}`}>
                        {material.status}
                      </span>
                    </div>
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="col-md-9">
        {selectedMaterialId ? (
          <MaterialDetailView 
            materialId={selectedMaterialId}
            onBack={() => setSelectedMaterialId(null)}
            onRefresh={loadMaterials}
          />
        ) : (
          <div className="text-center p-5 bg-light rounded border">
            <i className="bi bi-file-earmark-text display-1 text-muted"></i>
            <h4 className="mt-3">Select a Material</h4>
            <p className="text-muted">
              Click on a material from the list on the left,<br />
              or upload a new material to begin.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

function getBadgeColor(status: string): string {
  switch (status) {
    case 'completed': return 'success';
    case 'pending': return 'warning';
    case 'processing': return 'primary';
    case 'error': return 'danger';
    default: return 'secondary';
  }
}

================
File: frontend/src/components/teacher/QuestionGenerator.tsx
================
import React, { useState, useEffect } from 'react';
import { Material } from '../../types';
import { GeneratedQuestion } from '../../types/edgeprompt';
import { api } from '../../services/api';
import { useProject } from '../../contexts/ProjectContext';
import { QuestionGenerationService } from '../../services/QuestionGenerationService';

interface Props {
  material: Material;
}

export const QuestionGenerator: React.FC<Props> = ({ material }) => {
  const { activeProject } = useProject();
  const [generatedQuestions, setGeneratedQuestions] = useState<{[templateIndex: string]: GeneratedQuestion}>({});
  const [generatingTemplate, setGeneratingTemplate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [savedQuestions, setSavedQuestions] = useState<GeneratedQuestion[]>([]);
  
  // Get templates from material metadata
  const availableTemplates = material.metadata?.templates || [];

  // Load previously generated questions
  useEffect(() => {
    const loadQuestions = async () => {
      try {
        const questions = await api.getQuestions(material.id);
        setSavedQuestions(questions);
      } catch (err) {
        console.error('Error loading saved questions:', err);
      }
    };
    
    loadQuestions();
  }, [material.id]);

  const handleGenerateQuestion = async (template: any, index: number) => {
    if (!activeProject?.promptTemplateId) {
      setError('Project has no prompt template configured');
      return;
    }

    setGeneratingTemplate(`${index}`);
    setError(null);

    try {
      // Only pass IDs to the service, not the full template
      const generatedQuestion = await QuestionGenerationService.generateQuestion(
        material.id,
        activeProject.promptTemplateId,
        index,
        material.metadata?.useSourceLanguage || false
      );
      
      // Update the UI with the new question
      setGeneratedQuestions(prev => ({
        ...prev,
        [`${index}`]: generatedQuestion
      }));
      
      // Save question to database
      await QuestionGenerationService.saveGeneratedQuestion({
        ...generatedQuestion,
        metadata: {
          ...generatedQuestion.metadata,
          templateIndex: index
        }
      });
      
      // Refresh the saved questions list
      const questions = await api.getQuestions(material.id);
      setSavedQuestions(questions);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate question');
      console.error('Error generating question:', err);
    } finally {
      setGeneratingTemplate(null);
    }
  };

  const handleGenerateAllQuestions = async () => {
    if (!activeProject?.promptTemplateId) {
      setError('Project has no prompt template configured');
      return;
    }

    if (availableTemplates.length === 0) {
      setError('No templates available for this material');
      return;
    }

    setGeneratingTemplate('all');
    setError(null);

    try {
      // Generate questions for each template
      for (let i = 0; i < availableTemplates.length; i++) {
        const template = availableTemplates[i];
        
        // Simply pass the original template to the backend
        const generatedQuestion = await QuestionGenerationService.generateQuestion(
          material.id,
          activeProject.promptTemplateId,
          i,
          material.metadata?.useSourceLanguage || false
        );
        
        // Update the UI with the new question
        setGeneratedQuestions(prev => ({
          ...prev,
          [`${i}`]: generatedQuestion
        }));
        
        // Save question to database
        await QuestionGenerationService.saveGeneratedQuestion({
          ...generatedQuestion,
          metadata: {
            ...generatedQuestion.metadata,
            templateIndex: i
          }
        });
      }
      
      // Refresh the saved questions list
      const questions = await api.getQuestions(material.id);
      setSavedQuestions(questions);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate questions');
      console.error('Error generating questions:', err);
    } finally {
      setGeneratingTemplate(null);
    }
  };

  // Get a previously generated question for a template
  const getQuestionForTemplate = (index: number): GeneratedQuestion | null => {
    // First check in the current session's generated questions
    if (generatedQuestions[`${index}`]) {
      return generatedQuestions[`${index}`];
    }
    
    // Then check in previously saved questions
    const savedQuestion = savedQuestions.find(q => 
      q.metadata?.templateIndex === index
    );
    
    return savedQuestion || null;
  };

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h5 className="mb-0">Question Generator</h5>
        <button 
          className="btn btn-primary"
          onClick={handleGenerateAllQuestions}
          disabled={generatingTemplate !== null || availableTemplates.length === 0}
        >
          {generatingTemplate === 'all' ? (
            <>
              <span className="spinner-border spinner-border-sm me-2"></span>
              Generating All Questions...
            </>
          ) : (
            <>
              <i className="bi bi-lightning-charge-fill me-2"></i>
              Generate All Questions
            </>
          )}
        </button>
      </div>
      
      {error && (
        <div className="alert alert-danger">
          <i className="bi bi-exclamation-triangle-fill me-2"></i>
          {error}
        </div>
      )}
      
      <div className="mb-4">
        <h6 className="mb-3">Question Templates</h6>
        {availableTemplates.length === 0 ? (
          <div className="alert alert-info">
            <i className="bi bi-info-circle me-2"></i>
            No templates available for this material. Process the material first to generate templates.
          </div>
        ) : (
          <div className="list-group">
            {availableTemplates.map((template, index) => {
              const generatedQuestion = getQuestionForTemplate(index);
              
              return (
                <div key={index} className="list-group-item">
                  <div className="d-flex flex-column mb-3">
                    <div className="fw-bold mb-2">{template.pattern}</div>
                    <div className="d-flex align-items-center mb-2">
                      <span className="badge bg-primary me-2">{template.targetGrade}</span>
                      <span className="badge bg-secondary">{template.subject}</span>
                    </div>
                    <div className="small text-muted">
                      <strong>Constraints:</strong> {template.constraints.join(', ')}
                    </div>
                    <div className="small text-muted mt-1">
                      <strong>Learning Objectives:</strong> {template.learningObjectives?.join(', ') || 'None specified'}
                    </div>
                  </div>
                  
                  {generatedQuestion ? (
                    <div className="mb-3">
                      <div className="card">
                        <div className="card-header bg-light d-flex justify-content-between align-items-center">
                          <h6 className="mb-0">Generated Question</h6>
                          <div>
                            <button 
                              className="btn btn-sm btn-outline-primary me-2"
                              onClick={() => handleGenerateQuestion(template, index)}
                              disabled={generatingTemplate !== null}
                            >
                              <i className="bi bi-arrow-repeat me-1"></i>
                              Regenerate
                            </button>
                            <button 
                              className="btn btn-sm btn-outline-success"
                              onClick={() => {
                                navigator.clipboard.writeText(generatedQuestion.question);
                                alert('Question copied to clipboard');
                              }}
                            >
                              <i className="bi bi-clipboard me-1"></i>
                              Copy
                            </button>
                          </div>
                        </div>
                        <div className="card-body">
                          <div>
                            <h6>Question:</h6>
                            <p className="card-text">{generatedQuestion.question}</p>
                          </div>
                          
                          {generatedQuestion.rubric && generatedQuestion.rubric.validationChecks && Array.isArray(generatedQuestion.rubric.validationChecks) && (
                            <div className="mt-3">
                              <h6>Rubric:</h6>
                              <ul className="list-group list-group-flush">
                                {generatedQuestion.rubric.validationChecks.map((check: string, idx: number) => (
                                  <li key={idx} className="list-group-item py-1 small">{check}</li>
                                ))}
                              </ul>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="d-grid">
                      <button 
                        className="btn btn-outline-primary"
                        onClick={() => handleGenerateQuestion(template, index)}
                        disabled={generatingTemplate !== null}
                      >
                        {generatingTemplate === `${index}` ? (
                          <>
                            <span className="spinner-border spinner-border-sm me-2"></span>
                            Generating...
                          </>
                        ) : (
                          <>
                            <i className="bi bi-lightning-charge me-2"></i>
                            Generate Question
                          </>
                        )}
                      </button>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
};

================
File: frontend/src/components/teacher/SimplifiedMaterialUploader.tsx
================
import React, { useState, useEffect } from 'react';
import { MaterialUploader } from './MaterialUploader';
import { MaterialSource } from '../../../../backend/src/types';
import { useProject } from '../../contexts/ProjectContext';

interface Props {
  onMaterialLoad?: (material: MaterialSource) => void;
  onMaterialUploaded?: () => void;
  projectId?: string;
}

export const SimplifiedMaterialUploader: React.FC<Props> = ({ 
  onMaterialLoad, 
  onMaterialUploaded, 
  projectId: propProjectId 
}) => {
  const { activeProject } = useProject();
  const [showModal, setShowModal] = useState(false);
  
  // Use projectId from props if available, otherwise from context
  const projectId = propProjectId || (activeProject?.id);
  
  const handleMaterialUploaded = (material: MaterialSource) => {
    if (onMaterialLoad) {
      onMaterialLoad(material);
    }
    if (onMaterialUploaded) {
      onMaterialUploaded();
    }
    setShowModal(false);
  };
  
  const handleUploadClick = () => {
    if (!projectId) {
      // Show a toast or alert if no project is selected
      alert('Please select a project from the dropdown in the navigation bar before uploading materials.');
      return;
    }
    
    setShowModal(true);
  };
  
  return (
    <>
      <div className="d-grid gap-2 mb-4">
        <button 
          className="btn btn-primary btn-lg d-flex align-items-center justify-content-center"
          onClick={handleUploadClick}
        >
          <i className="bi bi-cloud-upload me-2 fs-5"></i>
          <span>Upload Learning Material</span>
        </button>
      </div>
      
      {/* Only show modal if we have a project ID */}
      {showModal && projectId && (
        <>
          <div 
            className="modal-backdrop" 
            style={{ 
              opacity: 0.5, 
              position: 'fixed', 
              top: 0, 
              left: 0, 
              right: 0, 
              bottom: 0, 
              zIndex: 1040 
            }}
            onClick={() => setShowModal(false)}
          ></div>
          
          <div 
            className="modal" 
            tabIndex={-1} 
            role="dialog"
            style={{ 
              display: 'block', 
              position: 'fixed', 
              top: 0, 
              left: 0, 
              right: 0, 
              bottom: 0, 
              zIndex: 1050,
              overflow: 'auto'
            }}
          >
            <div 
              className="modal-dialog modal-lg" 
              role="document"
              style={{ 
                margin: '1.75rem auto',
                transform: 'none'
              }}
            >
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title">
                    <i className="bi bi-cloud-upload me-2"></i>
                    Upload Learning Material
                  </h5>
                  <button 
                    type="button" 
                    className="btn-close" 
                    onClick={() => setShowModal(false)}
                    aria-label="Close"
                  ></button>
                </div>
                <div className="modal-body">
                  {/* Always pass the projectId to MaterialUploader */}
                  <MaterialUploader 
                    onMaterialLoad={handleMaterialUploaded} 
                    projectId={projectId}
                    showTitle={false}
                  />
                </div>
                <div className="modal-footer">
                  <button 
                    type="button" 
                    className="btn btn-secondary" 
                    onClick={() => setShowModal(false)}
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </>
  );
};

================
File: frontend/src/components/tools/PromptEngineeringTool.tsx
================
import React, { useState } from 'react';
// Remove this line since Bootstrap CSS is loaded globally in index.html
// import 'bootstrap/dist/css/bootstrap.min.css';
// Using Bootstrap icons instead of Lucide-React
// If you prefer to keep Lucide, run: npm install lucide-react

interface Variable {
  name: string;
  value: string;
}

type Side = 'left' | 'right';

const PromptEngineeringTool: React.FC = () => {
  // State for prompts and variables
  const [leftPrompt, setLeftPrompt] = useState('');
  const [rightPrompt, setRightPrompt] = useState('');
  const [leftVariables, setLeftVariables] = useState<Variable[]>([{ name: '', value: '' }]);
  const [rightVariables, setRightVariables] = useState<Variable[]>([{ name: '', value: '' }]);
  const [leftResponse, setLeftResponse] = useState('');
  const [rightResponse, setRightResponse] = useState('');

  // Function to add a new variable
  const addVariable = (side: Side) => {
    if (side === 'left') {
      setLeftVariables([...leftVariables, { name: '', value: '' }]);
    } else {
      setRightVariables([...rightVariables, { name: '', value: '' }]);
    }
  };

  // Function to remove a variable
  const removeVariable = (side: Side, index: number) => {
    if (side === 'left') {
      const newVariables = [...leftVariables];
      newVariables.splice(index, 1);
      setLeftVariables(newVariables);
    } else {
      const newVariables = [...rightVariables];
      newVariables.splice(index, 1);
      setRightVariables(newVariables);
    }
  };

  // Function to update variable name
  const updateVariableName = (side: Side, index: number, value: string) => {
    if (side === 'left') {
      const newVariables = [...leftVariables];
      newVariables[index].name = value;
      setLeftVariables(newVariables);
    } else {
      const newVariables = [...rightVariables];
      newVariables[index].name = value;
      setRightVariables(newVariables);
    }
  };

  // Function to update variable value
  const updateVariableValue = (side: Side, index: number, value: string) => {
    if (side === 'left') {
      const newVariables = [...leftVariables];
      newVariables[index].value = value;
      setLeftVariables(newVariables);
    } else {
      const newVariables = [...rightVariables];
      newVariables[index].value = value;
      setRightVariables(newVariables);
    }
  };

  // Function to generate responses
  const generateResponse = (side: Side) => {
    // In a real implementation, this would call the LLM API
    // For now, just setting a placeholder response
    if (side === 'left') {
      setLeftResponse(`Response for prompt: ${leftPrompt}\nWith variables: ${JSON.stringify(leftVariables, null, 2)}`);
    } else {
      setRightResponse(`Response for prompt: ${rightPrompt}\nWith variables: ${JSON.stringify(rightVariables, null, 2)}`);
    }
  };

  // Function to add a new prompt
  const addPrompt = () => {
    // This would be implemented to add another column or section
    alert('This would add another prompt section to continue with the next shot.');
  };

  // Function to compare responses
  const compareResponses = () => {
    // This would be implemented to compare the two responses
    alert('This would compare the responses from the two prompts.');
  };

  return (
    <div className="container-fluid d-flex flex-column vh-100 p-0">
      <div className="row flex-grow-1 g-0">
        {/* Left Panel */}
        <div className="col border-end">
          <div className="d-flex flex-column h-100 p-2">
            {/* Prompt Input */}
            <div className="card mb-3 flex-grow-1">
              <div className="card-header text-center bg-light">
                Prompt
              </div>
              <div className="card-body p-0">
                <textarea 
                  className="form-control border-0 h-100"
                  value={leftPrompt}
                  onChange={(e) => setLeftPrompt(e.target.value)}
                  style={{ minHeight: "150px", resize: "none" }}
                ></textarea>
              </div>
            </div>
            
            {/* Variables */}
            {leftVariables.map((variable, index) => (
              <div key={index} className="mb-3">
                <div className="input-group mb-1">
                  <input
                    type="text"
                    placeholder="Variable Name"
                    className="form-control"
                    value={variable.name}
                    onChange={(e) => updateVariableName('left', index, e.target.value)}
                  />
                  <button 
                    className="btn btn-outline-secondary"
                    onClick={() => removeVariable('left', index)}
                  >
                    <i className="bi bi-trash"></i>
                  </button>
                </div>
                <input
                  type="text"
                  placeholder="Variable Value"
                  className="form-control"
                  value={variable.value}
                  onChange={(e) => updateVariableValue('left', index, e.target.value)}
                />
              </div>
            ))}
            
            {/* Add Variable Button */}
            <div className="input-group mb-3">
              <input
                type="text"
                placeholder="Variable Name"
                className="form-control bg-light"
                disabled
              />
              <button 
                className="btn btn-outline-success"
                onClick={() => addVariable('left')}
              >
                <i className="bi bi-plus"></i>
              </button>
            </div>
            
            {/* Generate Button */}
            <button 
              className="btn btn-primary mb-3"
              onClick={() => generateResponse('left')}
            >
              GENERATE
            </button>
            
            {/* Response Area */}
            <div className="card flex-grow-1">
              <div className="card-header text-center bg-light">
                Response
              </div>
              <div className="card-body overflow-auto">
                <pre className="mb-0">{leftResponse}</pre>
              </div>
            </div>
          </div>
        </div>
        
        {/* Right Panel */}
        <div className="col">
          <div className="d-flex flex-column h-100 p-2">
            {/* Prompt Input */}
            <div className="card mb-3 flex-grow-1">
              <div className="card-header text-center bg-light">
                Prompt
              </div>
              <div className="card-body p-0">
                <textarea 
                  className="form-control border-0 h-100"
                  value={rightPrompt}
                  onChange={(e) => setRightPrompt(e.target.value)}
                  style={{ minHeight: "150px", resize: "none" }}
                ></textarea>
              </div>
            </div>
            
            {/* Variables */}
            {rightVariables.map((variable, index) => (
              <div key={index} className="mb-3">
                <div className="input-group mb-1">
                  <input
                    type="text"
                    placeholder="Variable Name"
                    className="form-control"
                    value={variable.name}
                    onChange={(e) => updateVariableName('right', index, e.target.value)}
                  />
                  <button 
                    className="btn btn-outline-secondary"
                    onClick={() => removeVariable('right', index)}
                  >
                    <i className="bi bi-trash"></i>
                  </button>
                </div>
                <input
                  type="text"
                  placeholder="Variable Value"
                  className="form-control"
                  value={variable.value}
                  onChange={(e) => updateVariableValue('right', index, e.target.value)}
                />
              </div>
            ))}
            
            {/* Add Variable Button */}
            <div className="input-group mb-3">
              <input
                type="text"
                placeholder="Variable Name"
                className="form-control bg-light"
                disabled
              />
              <button 
                className="btn btn-outline-success"
                onClick={() => addVariable('right')}
              >
                <i className="bi bi-plus"></i>
              </button>
            </div>
            
            {/* Generate Button */}
            <button 
              className="btn btn-primary mb-3"
              onClick={() => generateResponse('right')}
            >
              GENERATE
            </button>
            
            {/* Response Area */}
            <div className="card flex-grow-1">
              <div className="card-header text-center bg-light">
                Response
              </div>
              <div className="card-body overflow-auto">
                <pre className="mb-0">{rightResponse}</pre>
              </div>
            </div>
          </div>
        </div>
        
        {/* Compare Button (Right-most Column) */}
        <div className="col-1 d-flex align-items-center justify-content-center border-start">
          <button 
            className="btn btn-outline-primary"
            onClick={compareResponses}
            style={{ writingMode: "vertical-lr", transform: "rotate(180deg)", height: "150px" }}
          >
            COMPARE
          </button>
        </div>
      </div>
      
      {/* Add Prompt Button (Bottom) */}
      <div className="row g-0 border-top">
        <div className="col p-3 text-center">
          <button 
            className="btn btn-secondary mx-auto d-block mb-2"
            onClick={addPrompt}
          >
            ADD PROMPT
          </button>
          <small className="text-muted">
            When clicked, this will add another set of prompts to continue with the next shot.
          </small>
        </div>
      </div>
    </div>
  );
};

export default PromptEngineeringTool;

================
File: frontend/src/components/ErrorBoundary.tsx
================
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return (
        <div className="alert alert-danger m-3">
          <h4 className="alert-heading">
            <i className="bi bi-exclamation-triangle me-2"></i>
            Something went wrong
          </h4>
          <p>{this.state.error?.message}</p>
          <hr />
          <button 
            className="btn btn-outline-danger"
            onClick={() => window.location.reload()}
          >
            <i className="bi bi-arrow-clockwise me-2"></i>
            Reload Application
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

================
File: frontend/src/services/QuestionGenerationService.ts
================
import { api } from './api';

export class QuestionGenerationService {
  /**
   * Generates a question using backend processing
   */
  static async generateQuestion(
    materialId: string,
    promptTemplateId: string,
    templateIndex: number,
    useSourceLanguage: boolean = false
  ): Promise<any> {
    // Only pass IDs and minimal flags to the backend
    return api.generateQuestion(
      materialId,
      promptTemplateId,
      templateIndex,
      { useSourceLanguage }
    );
  }
  
  /**
   * Saves a generated question to the database
   */
  static async saveGeneratedQuestion(question: any): Promise<any> {
    return api.saveQuestion({
      materialId: question.materialId,
      promptTemplateId: question.promptTemplateId,
      question: question.question,
      metadata: question.metadata
    });
  }
}

================
File: frontend/src/types/edgeprompt.ts
================
/**
 * Domain-constrained content template (Tc from the paper)
 */
export interface ContentTemplate {
  pattern: string;           // Question pattern (e.g., "Write a descriptive paragraph about [topic]")
  constraints: string[];     // Domain constraints (e.g., ["Grade-appropriate", "Safe content"])
  subject: string;           // Subject area
  targetGrade: string;       // Target grade level
  source: any;               // Source material reference
  
  // Answer space specification (As from the paper)
  answerSpace: {
    minWords: number;        // Minimum word count
    maxWords: number;        // Maximum word count
    vocabulary: string;      // Vocabulary requirements (e.g., "grade-appropriate")
    structure: string;       // Structure requirements (e.g., "paragraph format")
  };
  
  // Learning objective mapping (O: Tc → L from the paper)
  learningObjectives: string[];  // Mapped learning outcomes
}

/**
 * Validation parameters (vp from the paper)
 */
export interface ValidationParameters {
  threshold: number;         // Confidence threshold
  boundaries: {
    min: number;             // Minimum score
    max: number;             // Maximum score
  };
}

/**
 * Teacher criteria (ct from the paper)
 */
export interface TeacherCriteria {
  relevance: number;         // Weight for relevance to question
  clarity: number;           // Weight for clarity of expression
  accuracy: number;          // Weight for factual accuracy
  creativity: number;        // Weight for creative expression
  grammar: number;           // Weight for grammatical correctness
  vocabulary: number;        // Weight for vocabulary usage
}

/**
 * Formalized rubric (R(ct, vp) from the paper)
 */
export interface FormalizedRubric {
  criteria: TeacherCriteria;
  parameters: ValidationParameters;
  scoringLevels: {
    [level: number]: string;  // Description of each scoring level
  };
}

/**
 * Edge-compatible transformed rubric (R' from the paper)
 */
export interface EdgeRubric {
  criteriaWeights: { [criteria: string]: number };
  validationChecks: string[];
  scoringGuidelines: string[];
  maxScore: number;
}

/**
 * Generated question with validation structure
 */
export interface GeneratedQuestion {
  materialId: string;
  promptTemplateId: string;
  questionId?: string;
  question: string;
  template?: any;
  rubric?: any;
  metadata: {
    generatedAt: string;
    templateIndex?: number;
    validationStages?: string[];
  };
}

/**
 * Validation result from backend
 */
export interface ValidationResult {
  isValid: boolean;
  score: number;
  feedback: string;
  details?: any;
  error?: string;
  id?: string;
}

================
File: frontend/src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: frontend/.gitignore
================
# Frontend specific
/dist/
/build/
/.next/
/.nuxt/
/out/

# Environment files
.env
.env.*
!.env.example

# Dependencies
/node_modules/

# Cache
.cache/
.npm/

# Build artifacts
*.tsbuildinfo

# Logs
*.log
logs/

# IDE
.vscode/
.idea/

# OS
.DS_Store

================
File: CONTRIBUTING.md
================
# Contributing to EdgePrompt

## Contribution Process

1. **Pull Request Review**: All contributions require review by the EdgePrompt Research Team before merging.
2. **Copyright Release**: Contributors must complete a simple copyright release form. Contact the team to receive this form.

**Note**: Active contributors may be granted direct repository access after initial contributions.

## Important Notice

This contribution policy is intentionally simple during the early research phase of the project. We reserve the right to modify the contribution process as the project evolves.

## License

By contributing to EdgePrompt, you agree that your contributions will be licensed under the project's MIT License for code and CC-BY-SA 4.0 for documentation.

================
File: LICENSE
================
MIT License

Copyright (c) 2025, EdgePrompt Research Team

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "edge-prompt",
  "private": true,
  "workspaces": [
    "common",
    "frontend",
    "backend"
  ],
  "scripts": {
    "build": "npm run build:common && npm run build --workspaces --if-present",
    "build:common": "npm run build -w @edge-prompt/common",
    "dev": "concurrently \"npm run build:common -- -w\" \"npm run dev -w backend\" \"npm run start -w frontend\"",
    "test": "npm test --workspaces --if-present"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  }
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "common" },
    { "path": "backend" },
    { "path": "frontend" }
  ]
}

================
File: backend/src/db/migrate.ts
================
import { DatabaseService } from '../services/DatabaseService.js';
import { StorageService } from '../services/StorageService.js';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function migrate() {
  console.log('Starting database migration...');
  
  try {
    const db = new DatabaseService();
    const storage = new StorageService();
    const schema = readFileSync(join(__dirname, 'schema.sql'), 'utf8');
    
    // Initialize storage
    await storage.initialize();

    // Run migrations in a transaction
    await db.transaction(async () => {
      // Create tables if they don't exist
      await db.exec(schema);
      console.log('Schema initialized');

      // Add default prompt template if none exists
      const templates = await db.getPromptTemplates();
      if (templates.length === 0) {
        await db.createPromptTemplate({
          name: 'Basic Question Generator',
          version: '1.0',
          type: 'question_generation',
          content: `Given the following context and focus area, generate a question that:
1. Tests understanding of the key concepts
2. Encourages critical thinking
3. Is relevant to the focus area

Context: {context}
Focus Area: {focusArea}

Generate a single question that meets these criteria.`,
          description: 'Default template for generating basic comprehension questions'
        });
        console.log('Created default prompt template');
      }
    });
    
    console.log('Migration completed successfully');
  } catch (error) {
    console.error('Migration failed:', error);
    process.exit(1);
  }
}

migrate();

================
File: backend/src/db/schema.sql
================
-- Core research tables
CREATE TABLE IF NOT EXISTS projects (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  model_name TEXT NOT NULL,
  prompt_template_id TEXT NOT NULL,
  configuration JSON NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS prompt_templates (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  version TEXT NOT NULL,
  type TEXT NOT NULL,
  content TEXT NOT NULL,
  description TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Data collection tables
CREATE TABLE IF NOT EXISTS materials (
  id TEXT PRIMARY KEY,
  project_id TEXT NOT NULL,
  title TEXT,
  content TEXT NOT NULL,
  focus_area TEXT NOT NULL,
  metadata JSON,
  file_path TEXT,
  file_type TEXT,
  file_size INTEGER,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'error')),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(project_id) REFERENCES projects(id)
);

CREATE TABLE IF NOT EXISTS generated_questions (
  id TEXT PRIMARY KEY,
  material_id TEXT NOT NULL,
  prompt_template_id TEXT NOT NULL,
  question TEXT NOT NULL,
  constraints JSON,
  metadata JSON,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(material_id) REFERENCES materials(id),
  FOREIGN KEY(prompt_template_id) REFERENCES prompt_templates(id)
);

CREATE TABLE IF NOT EXISTS responses (
  id TEXT PRIMARY KEY,
  question_id TEXT NOT NULL,
  response TEXT NOT NULL,
  score REAL,
  feedback TEXT,
  metadata JSON,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(question_id) REFERENCES generated_questions(id)
);

DROP TABLE users;

-- User tables
CREATE TABLE IF NOT EXISTS users (
  id TEXT PRIMARY KEY,
  username TEXT NOT NULL UNIQUE,
  password_hash TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  position TEXT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_materials_project ON materials(project_id);
CREATE INDEX IF NOT EXISTS idx_questions_material ON generated_questions(material_id);
CREATE INDEX IF NOT EXISTS idx_responses_question ON responses(question_id);
CREATE INDEX IF NOT EXISTS idx_materials_status ON materials(status);

================
File: backend/src/services/LMStudioService.ts
================
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

export class LMStudioService {
  private baseUrl: string;
  private model: string;
  private temperature: number;
  private maxTokens: number;

  constructor(baseUrl?: string) {
    const url = baseUrl || process.env.LM_STUDIO_URL;
    if (!url) {
      throw new Error('LM_STUDIO_URL environment variable is not set');
    }
    this.baseUrl = url;
    console.log('LM Studio URL:', this.baseUrl);
  }

  async complete(prompt: string): Promise<string> {
    try {
      console.log('Sending prompt to LM Studio:', prompt);
      
      const response = await axios.post(`${this.baseUrl}/v1/chat/completions`, {
        messages: [
          {
            role: "system",
            content: "You are an educational assessment AI that provides structured feedback in JSON format."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "local-model", // LM Studio will use whatever model is loaded
        temperature: 0.7,
        max_tokens: 1000,
        stream: false
      });

      console.log('LM Studio raw response:', response.data);
      
      // Extract the actual response text from the chat completion
      const responseText = response.data.choices[0].message.content;
      console.log('Extracted response:', responseText);
      
      return responseText;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        console.error('LM Studio error:', {
          message: error.message,
          code: error.code,
          response: error.response?.data,
          url: this.baseUrl
        });
      } else {
        console.error('LM Studio error:', error);
      }
      throw new Error('Failed to get completion from LM Studio');
    }
  }

  async isAvailable(): Promise<boolean> {
    try {
      console.log('Checking LM Studio availability at:', this.baseUrl);
      const response = await axios.get(`${this.baseUrl}/v1/models`);
      console.log('LM Studio models:', response.data);
      return response.status === 200;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        console.error('LM Studio connection error:', {
          message: error.message,
          code: error.code,
          response: error.response?.data,
          url: this.baseUrl
        });
      } else {
        console.error('LM Studio connection error:', error);
      }
      return false;
    }
  }

  getConfig() {
    return {
      apiUrl: this.baseUrl,
      model: this.model,
      temperature: this.temperature,
      maxTokens: this.maxTokens
    };
  }
}

================
File: backend/src/services/StorageService.ts
================
import { mkdir, rm, cp, writeFile } from 'fs/promises';
import { join, dirname, extname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export interface StorageConfig {
  rootDir: string;
  allowedTypes: string[];
  maxFileSize: number; // in bytes
}

export class StorageService {
  private config: StorageConfig;
  private rootDir: string;
  private tempDir: string;
  private materialsDir: string;

  constructor(config?: Partial<StorageConfig>) {
    this.config = {
      rootDir: join(dirname(dirname(__dirname)), 'uploads'),
      allowedTypes: ['.pdf', '.docx', '.doc', '.txt', '.md'],
      maxFileSize: 10 * 1024 * 1024, // 10MB
      ...config
    };

    this.rootDir = this.config.rootDir;
    this.tempDir = join(this.rootDir, 'temp');
    this.materialsDir = join(this.rootDir, 'materials');
  }

  getConfig(): StorageConfig {
    return {
      rootDir: this.rootDir
    };
  }

  async initialize(): Promise<void> {
    // Create directory structure
    await mkdir(this.tempDir, { recursive: true });
    await mkdir(this.materialsDir, { recursive: true });
  }

  async createMaterialStorage(projectId: string, materialId: string): Promise<string> {
    const materialDir = join(this.materialsDir, projectId, materialId);
    await mkdir(materialDir, { recursive: true });
    return materialDir;
  }

  async saveMaterialFile(
    tempPath: string, 
    projectId: string, 
    materialId: string
  ): Promise<string> {
    const ext = extname(tempPath);
    if (!this.config.allowedTypes.includes(ext.toLowerCase())) {
      throw new Error(`File type ${ext} not allowed`);
    }

    const materialDir = await this.createMaterialStorage(projectId, materialId);
    const destPath = join(materialDir, `material${ext}`);
    
    await cp(tempPath, destPath);
    await rm(tempPath); // Clean up temp file

    return destPath;
  }

  async cleanupTemp(): Promise<void> {
    try {
      await rm(this.tempDir, { recursive: true });
      await mkdir(this.tempDir, { recursive: true });
    } catch (error) {
      console.error('Failed to cleanup temp directory:', error);
    }
  }

  validateFileSize(size: number): boolean {
    return size <= this.config.maxFileSize;
  }

  validateFileType(filename: string): boolean {
    const ext = extname(filename).toLowerCase();
    return this.config.allowedTypes.includes(ext);
  }
}

================
File: docs/specifications/PROMPT_ENGINEERING.md
================
# EdgePrompt Prompt Engineering Methodology

## Implementation Notes

This document provides a high-density algorithmic specification for testing and validating the claims in the EdgePrompt paper. It is designed to be implemented by either AI assistants or human developers to generate empirical data supporting the paper's core arguments about neural-symbolic principles, multi-stage validation, and resource optimization in edge-deployed LLMs.

**Key implementation considerations:**
- This is an algorithm-level specification rather than code-level implementation
- Code can be generated in any language (Python, C++, JavaScript, etc.) from these specifications
- Hardware simulation allows testing on high-performance systems (RTX series GPUs, Apple Silicon, etc.)
- State-of-the-art LLMs (GPT-4o, Claude 3.7, Gemini 2.5) simulate teacher/student evaluation
- All outputs are designed for direct integration into the EdgePrompt paper

This document should be read in conjunction with the SYSTEM_VISION.md, which outlines the philosophical foundations and educational principles of EdgePrompt, and the conference paper draft which provides the formal mathematical framework being tested.

## 1. System Architecture

```mermaid
graph TD
    A[Template Repository] --> B[Test Orchestrator]
    C[Hardware Simulator] --> B
    D[Evaluation LLM] --> B
    
    B --> E[Template Processor]
    E --> F[Edge LLM Engine]
    F --> G[Validation Engine]
    
    G --> H[Metrics Collector]
    H --> I[Results Analyzer]
    I --> J[Paper-Ready Visualizations]
    
    K[Human Researcher] -->|Template Design| A
    J -->|Feedback Loop| K
```

The system consists of interconnected components that automate the testing process:
- The **Template Repository** stores structured prompts implementing $T_c$, $A_s$, and other formal constructs
- The **Hardware Simulator** emulates edge device constraints on high-performance hardware
- The **Edge LLM Engine** executes tests on target models (Gemma 3, Llama 3)
- The **Validation Engine** implements the multi-stage validation sequences
- The **Metrics Collector** captures comprehensive performance data
- The **Results Analyzer** generates paper-ready visualizations

## 2. Core Algorithms

### 2.1 Hardware Simulation Algorithm

```
ALGORITHM HardwareSimulation
INPUT: 
  - hardware_profile (object defining resource constraints)
  - execution_function (function to run under constraints)
OUTPUT: 
  - execution_result (object containing output and performance metrics)

1. Initialize resource monitoring system
2. Apply memory constraints: 
   - Linux: Use cgroups (memory.limit_in_bytes = profile.max_memory)
   - Docker: Use --memory flag and appropriate GPU limits
   - MacOS: Use resource limitation APIs
3. Apply compute constraints:
   - Limit CPU cores and frequencies
   - For GPU acceleration, limit VRAM and compute capability
4. Apply network constraints if specified (bandwidth and latency)
5. Start measurement of: time, memory, power, temperature
6. Execute the specified function under these constraints
7. Stop measurement
8. Release resource constraints
9. Return: execution result and collected metrics
```

### 2.2 Template Processing Algorithm

```
ALGORITHM TemplateProcessing
INPUT:
  - template_schema (JSON schema specifying the template structure)
  - template_instance (specific template with variables)
  - variable_values (dictionary of values to substitute)
OUTPUT:
  - processed_template (ready for model input)
  - metadata (information about processing steps)

1. Validate template_instance against template_schema
2. Extract all variables from template pattern using regex: \[([a-zA-Z_]+)\]
3. For each variable in extracted variables:
   a. If variable exists in variable_values:
      - Substitute [variable] with variable_values[variable]
   b. Else:
      - Raise error: missing required variable
4. Apply constraint encoding:
   a. For each constraint in template_instance.constraints:
      - Format constraint according to template type
      - Append to processed template in appropriate location
5. Optimize for token efficiency:
   a. Eliminate redundant whitespace
   b. Consolidate similar constraints
   c. Prioritize constraints by importance
6. Return processed template and metadata
```

### 2.3 Multi-Stage Validation Algorithm

```
ALGORITHM MultiStageValidation
INPUT:
  - question (string)
  - answer (string)
  - validation_sequence (array of ordered validation steps)
  - abort_on_failure (boolean)
OUTPUT:
  - validation_result (object with overall result and detailed stage results)

1. Initialize validation_result = {isValid: true, score: 0, stageResults: []}
2. For each stage in validation_sequence (ordered by priority):
   a. Format stage-specific prompt using: question, answer, and stage.template
   b. Start resource measurement for this stage
   c. Execute LLM inference with this prompt
   d. Parse LLM response to extract:
      - passed (boolean)
      - score (number)
      - feedback (string)
   e. End resource measurement
   f. Record stage result including:
      - stageId
      - passed/failed status
      - score
      - feedback
      - performance metrics
   g. If !passed AND abort_on_failure:
      - Set validation_result.isValid = false
      - Update validation_result.score based on stage.scoringImpact
      - Break loop (early exit optimization)
   h. If passed:
      - Update validation_result.score based on stage.scoringImpact
3. Aggregate feedback from all stages
4. Return validation_result
```

### 2.4 Metrics Collection Algorithm

```
ALGORITHM MetricsCollection
INPUT:
  - collection_config (configuration specifying metrics to collect)
  - sampling_interval_ms (how frequently to sample)
OUTPUT:
  - metrics_result (comprehensive performance data)

1. Initialize data structures for each metric category:
   - time_series = {timestamps: [], values: {}}
   - peak_values = {}
   - cumulative_values = {}

2. Define sampling function:
   a. Record current timestamp
   b. For each metric in config.metrics:
      i. Sample current value
      ii. Add to time_series
      iii. Update peak_values if current > peak
      iv. Update cumulative_values if applicable

3. Start background collection thread:
   a. While collection active:
      i. Call sampling function
      ii. Sleep for sampling_interval_ms
      iii. Check for termination signal

4. On collection completion:
   a. Calculate derived metrics:
      - Average utilization
      - Variance/stability
      - Rate metrics (tokens/sec, etc.)
   b. Format into standardized structure
   c. Return complete metrics_result
```

### 2.5 Edge LLM Execution Algorithm

```
ALGORITHM EdgeLLMExecution
INPUT:
  - model_config (model specification and optimization parameters)
  - prompt (processed template)
  - execution_config (parameters controlling execution)
OUTPUT:
  - generation_result (generated content and performance metrics)

1. Initialize model with specified configuration:
   a. Load quantized weights (int8/int4)
   b. Apply optimization techniques:
      - KV cache optimization
      - Flash attention if available
      - Operation fusion
      - Memory-mapped weights

2. Preprocess prompt:
   a. Tokenize input
   b. Apply prompt compression if needed
   c. Calculate token counts

3. Configure generation parameters:
   a. Set temperature, top_p, top_k
   b. Set maximum output length
   c. Set sampling strategy

4. Start performance monitoring:
   a. Track time, memory, compute utilization
   b. Record token-by-token generation stats

5. Execute generation:
   a. Feed tokens to model
   b. Apply hardware-specific optimizations
   c. Generate output tokens sequentially

6. Postprocess output:
   a. Detokenize output
   b. Calculate generation rate (tokens/second)
   c. Format response with metadata

7. Return generation_result with metrics
```

### 2.6 LLM-Based Evaluation Algorithm

```
ALGORITHM StateOfTheArtEvaluation
INPUT:
  - content (generated educational content)
  - reference_criteria (evaluation standards)
  - evaluation_role (teacher, student, or neutral evaluator)
OUTPUT:
  - evaluation_result (structured quality assessment)

1. Construct role-specific evaluation prompt:
   a. Set system message based on evaluation_role
   b. Include relevant educational context
   c. Provide detailed evaluation criteria
   d. Request structured JSON output

2. Execute inference against state-of-the-art LLM API:
   a. OpenAI (gpt-4o) || Anthropic (claude-3.7-sonnet) || Google (gemini-2.5)
   b. Set temperature = 0.1 (for consistency)
   c. Set response_format = json_object

3. Parse structured evaluation:
   a. Extract numerical scores by category
   b. Extract qualitative feedback
   c. Validate response structure

4. If simulating student responses:
   a. Use quality parameter to adjust response level
   b. Ensure age-appropriate language and concepts
   c. Introduce realistic errors for lower quality levels

5. Return standardized evaluation_result
```

### 2.7 Test Orchestration Algorithm

```
ALGORITHM TestOrchestration
INPUT:
  - test_suite (collection of test configurations)
  - resource_profiles (hardware simulation profiles)
  - models (LLM configurations)
  - templates (template definitions)
OUTPUT:
  - test_results (collection of all test data)
  - analysis_output (aggregated findings and visualizations)

1. Parse and validate all input configurations
2. For each test_case in test_suite:
   a. Load appropriate template
   b. Configure hardware simulation environment
   c. Initialize model with specified configuration
   d. Process template with test case variables
   e. Start metrics collection
   f. Execute edge LLM with processed template
   g. If validation test:
      i. Execute validation sequence
      ii. Simulate teacher/student evaluation
   h. Stop metrics collection
   i. Record comprehensive results including:
      - Generated content
      - Validation results (if applicable)
      - Performance metrics
      - Simulated evaluations
   j. Reset simulation environment
3. Analyze aggregate results:
   a. Group by relevant dimensions (template, model, hardware)
   b. Calculate statistical measures
   c. Generate visualizations:
      - Bar charts for comparative metrics
      - Line graphs for performance across models/hardware
      - Scatter plots for tradeoff analysis
      - Tables for detailed stage performance
   d. Format for direct paper inclusion
4. Return test_results and analysis_output
```

## 3. Template Schemas

### 3.1 Teacher Input Template Schema ($T_c$)

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "EdgePrompt Teacher Input Template",
  "description": "Schema for teacher input templates (Tc) as specified in the EdgePrompt paper",
  "type": "object",
  "required": ["id", "type", "pattern", "constraints", "answerSpace", "learningObjectives"],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for the template"
    },
    "type": {
      "type": "string",
      "enum": ["question_generation", "validation", "objective_extraction"],
      "description": "Type of template"
    },
    "pattern": {
      "type": "string",
      "description": "Question pattern with placeholders, e.g., 'Write a descriptive paragraph about [topic]'"
    },
    "constraints": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of constraints, e.g., ['Grade-appropriate vocabulary', 'Safe content']"
    },
    "answerSpace": {
      "type": "object",
      "required": ["minWords", "maxWords", "vocabulary", "structure"],
      "properties": {
        "minWords": {
          "type": "integer",
          "description": "Minimum word count for answers"
        },
        "maxWords": {
          "type": "integer",
          "description": "Maximum word count for answers"
        },
        "vocabulary": {
          "type": "string",
          "description": "Vocabulary requirements, e.g., 'grade-appropriate'"
        },
        "structure": {
          "type": "string",
          "description": "Structure requirements, e.g., 'paragraph format'"
        },
        "prohibitedContent": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of prohibited content types"
        }
      }
    },
    "learningObjectives": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of learning objectives this template addresses"
    },
    "variables": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Variables to substitute in the pattern"
    }
  }
}
```

### 3.2 Validation Sequence Schema ($\{v_1, \dots, v_n\}$)

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "EdgePrompt Validation Sequence",
  "description": "Schema for validation sequences as specified in the EdgePrompt paper",
  "type": "object",
  "required": ["id", "stages"],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for the validation sequence"
    },
    "stages": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["id", "template", "priority"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Stage identifier"
          },
          "template": {
            "type": "string",
            "description": "Validation prompt template"
          },
          "priority": {
            "type": "integer",
            "description": "Priority level (higher numbers checked first)"
          },
          "threshold": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Confidence threshold for this stage"
          },
          "scoringImpact": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "How much this stage contributes to final score"
          }
        }
      }
    },
    "abortOnFailure": {
      "type": "boolean",
      "default": true,
      "description": "Whether to abort the sequence if a stage fails"
    }
  }
}
```

### 3.3 Rubric Schema ($R(c_t, v_p)$)

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "EdgePrompt Rubric Schema",
  "description": "Schema for rubric formalization function R(c_t, v_p) as specified in the EdgePrompt paper",
  "type": "object",
  "required": ["id", "teacherCriteria", "validationParameters", "scoringLevels"],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for the rubric"
    },
    "teacherCriteria": {
      "type": "object",
      "additionalProperties": {
        "type": "number",
        "minimum": 0,
        "maximum": 1
      },
      "description": "Teacher criteria with weights (must sum to 1.0)"
    },
    "validationParameters": {
      "type": "object",
      "required": ["threshold", "boundaries"],
      "properties": {
        "threshold": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Confidence threshold for validation"
        },
        "boundaries": {
          "type": "object",
          "required": ["min", "max"],
          "properties": {
            "min": {
              "type": "number",
              "description": "Minimum score"
            },
            "max": {
              "type": "number",
              "description": "Maximum score"
            }
          }
        }
      }
    },
    "scoringLevels": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Scoring levels with descriptions"
    },
    "edgeOptimized": {
      "type": "object",
      "properties": {
        "criteriaList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "weightList": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "maxScore": {
          "type": "number"
        }
      },
      "description": "Edge-optimized version of the rubric (transformation S: R → R')"
    }
  }
}
```

## 4. Test Suite Specifications

### 4.1 Hardware Profiles

```json
[
  {
    "profile_id": "jetson_nano_sim",
    "description": "Simulated Jetson Nano (4GB RAM, 128-core Maxwell)",
    "simulation_config": {
      "max_memory_mb": 4000,
      "max_cores": 4,
      "max_gpu_memory_mb": 2000,
      "max_power_draw_watts": 10,
      "bandwidth_limit_mbps": 10
    },
    "implementation": {
      "linux": "sudo cgcreate -g memory,cpu:jetson_nano_sim && echo 4000M > /sys/fs/cgroup/memory/jetson_nano_sim/memory.limit_in_bytes && echo 400000 > /sys/fs/cgroup/cpu/jetson_nano_sim/cpu.cfs_quota_us",
      "docker": "docker run --memory=4g --cpus=4 --gpus=all --env CUDA_VISIBLE_DEVICES=0 --env PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128",
      "kubernetes": "resources: {limits: {memory: 4Gi, cpu: 4, nvidia.com/gpu: 1}}"
    }
  },
  {
    "profile_id": "jetson_orin_sim",
    "description": "Simulated Jetson Orin Nano (8GB RAM, 1024-core Ampere)",
    "simulation_config": {
      "max_memory_mb": 8000,
      "max_cores": 6,
      "max_gpu_memory_mb": 4000,
      "max_power_draw_watts": 15,
      "bandwidth_limit_mbps": 25
    },
    "implementation": {
      "linux": "sudo cgcreate -g memory,cpu:jetson_orin_sim && echo 8000M > /sys/fs/cgroup/memory/jetson_orin_sim/memory.limit_in_bytes && echo 600000 > /sys/fs/cgroup/cpu/jetson_orin_sim/cpu.cfs_quota_us",
      "docker": "docker run --memory=8g --cpus=6 --gpus=all --env CUDA_VISIBLE_DEVICES=0 --env PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:256",
      "kubernetes": "resources: {limits: {memory: 8Gi, cpu: 6, nvidia.com/gpu: 1}}"
    }
  },
  {
    "profile_id": "apple_m1_sim",
    "description": "Simulated Apple M1 (16GB RAM, 8-core CPU, 8-core GPU)",
    "simulation_config": {
      "max_memory_mb": 14000,
      "max_cores": 8,
      "cpu_frequency_mhz": 3200,
      "neural_engine_cores": 16,
      "max_power_draw_watts": 20
    },
    "implementation": {
      "macos": "sudo launchctl limit maxproc 1000 1500 && memory_pressure -l moderate",
      "docker": "docker run --platform=linux/amd64 --memory=14g --cpus=8",
      "resource_script": "limit_resources.py --memory=14000 --cores=8"
    }
  },
  {
    "profile_id": "tpu_edge_sim",
    "description": "Simulated Edge TPU (4GB RAM, 4 TOPS)",
    "simulation_config": {
      "max_memory_mb": 4000,
      "max_cores": 4,
      "simulated_tops": 4,
      "bandwidth_limit_mbps": 10
    },
    "implementation": {
      "docker": "docker run --memory=4g --cpus=4 --device=/dev/accel0:/dev/accel0",
      "cloud": "gcloud compute instances create tpu-edge-sim --machine-type=n1-standard-4 --accelerator=type=tpu-v4-8,count=1"
    }
  }
]
```

### 4.2 Model Configurations

```json
[
  {
    "model_id": "gemma-3-1b-edge",
    "base_model": "gemma-3-1b",
    "quantization": "int8",
    "context_window": 32768,
    "download_url": "https://huggingface.co/google/gemma-3-1b-it/resolve/main/model.safetensors",
    "optimization": {
      "kv_cache": true,
      "flash_attention": true,
      "tensor_parallelism": false,
      "execution_provider": "CUDA"
    }
  },
  {
    "model_id": "gemma-3-4b-edge",
    "base_model": "gemma-3-4b",
    "quantization": "int8",
    "context_window": 128000,
    "download_url": "https://huggingface.co/google/gemma-3-4b-it/resolve/main/model.safetensors",
    "optimization": {
      "kv_cache": true,
      "flash_attention": true,
      "tensor_parallelism": false,
      "execution_provider": "CUDA"
    }
  },
  {
    "model_id": "llama-3-3b-edge",
    "base_model": "llama-3-3b",
    "quantization": "int8",
    "context_window": 128000,
    "download_url": "https://huggingface.co/meta-llama/Llama-3-3b-hf/resolve/main/model.safetensors",
    "optimization": {
      "kv_cache": true,
      "flash_attention": true,
      "tensor_parallelism": false,
      "execution_provider": "CUDA"
    }
  }
]
```

### 4.3 Neural-Symbolic Validation Test Suite

```json
{
  "test_suite_id": "neural_symbolic_validation",
  "description": "Validates the neural-symbolic principles from the EdgePrompt paper",
  "templates": [
    "direct_constraint_template",
    "role_based_template",
    "example_guided_template"
  ],
  "models": [
    "gemma-3-1b-edge",
    "gemma-3-4b-edge",
    "llama-3-3b-edge"
  ],
  "hardware_profiles": [
    "jetson_nano_sim",
    "jetson_orin_sim"
  ],
  "test_cases": [
    {
      "id": "basic_comprehension",
      "variables": {
        "content_type": "paragraph",
        "topic": "rainforests",
        "length_parameters": "80-120 words",
        "explicit_safety_rules": "age-appropriate language, no violent content",
        "learning_objectives": "describe ecosystems, identify key features",
        "educational_material": "Rainforests are complex ecosystems with diverse plant and animal life..."
      },
      "expected_output": {
        "contains": ["ecosystem", "plants", "animals", "rainfall", "tropical"],
        "excludes": ["violent", "inappropriate", "adult"]
      }
    },
    {
      "id": "mathematical_problem",
      "variables": {
        "content_type": "word problem",
        "topic": "fractions",
        "length_parameters": "50-80 words",
        "explicit_safety_rules": "grade 5 appropriate, culturally neutral",
        "learning_objectives": "addition of fractions with different denominators",
        "educational_material": "When adding fractions with different denominators, we first find a common denominator..."
      },
      "expected_output": {
        "contains": ["fraction", "denominator", "add", "common"],
        "excludes": ["complex", "calculus", "inappropriate"]
      }
    }
  ],
  "analysis_targets": [
    {
      "name": "neural_symbolic_efficacy",
      "description": "Measures how well structured prompts enforce neural-symbolic principles",
      "metrics": ["safety_score", "educational_alignment", "execution_time"],
      "visualization": "bar_chart",
      "figure_name": "Figure 1: Neural-Symbolic Effectiveness"
    }
  ]
}
```

### 4.4 Multi-Stage Validation Test Suite

```json
{
  "test_suite_id": "multi_stage_validation",
  "description": "Validates the multi-stage validation approach from the EdgePrompt paper",
  "templates": ["validation_template"],
  "models": ["gemma-3-1b-edge", "llama-3-3b-edge"],
  "hardware_profiles": ["jetson_nano_sim", "jetson_orin_sim"],
  "test_cases": [
    {
      "id": "good_answer",
      "question": "Describe the importance of rainforests for our planet.",
      "answer": "Rainforests are important for our planet because they produce oxygen, absorb carbon dioxide, and are home to many plants and animals. They also help control the climate and provide medicines.",
      "expected_validation": {
        "is_valid": true,
        "stages_passed": ["length", "vocabulary", "content", "relevance"],
        "score": 4
      }
    },
    {
      "id": "fair_answer",
      "question": "Describe the importance of rainforests for our planet.",
      "answer": "Rainforests make oxygen and have animals. They are very important.",
      "expected_validation": {
        "is_valid": true,
        "stages_passed": ["length", "vocabulary"],
        "stages_failed": ["content", "detail"],
        "score": 2
      }
    },
    {
      "id": "poor_answer",
      "question": "Describe the importance of rainforests for our planet.",
      "answer": "I don't know.",
      "expected_validation": {
        "is_valid": false,
        "stages_passed": ["vocabulary"],
        "stages_failed": ["length", "content", "detail"],
        "score": 1
      }
    },
    {
      "id": "inappropriate_answer",
      "question": "Describe the importance of rainforests for our planet.",
      "answer": "Rainforests are stupid and boring. I hate this question.",
      "expected_validation": {
        "is_valid": false,
        "stages_passed": ["length"],
        "stages_failed": ["appropriate_tone", "content", "detail"],
        "score": 0
      }
    }
  ],
  "analysis_targets": [
    {
      "name": "validation_stage_effectiveness",
      "description": "Measures effectiveness of each validation stage",
      "metrics": ["stage_pass_rate", "execution_time", "memory_usage"],
      "visualization": "table",
      "table_name": "Table 1: Multi-Stage Validation Performance"
    },
    {
      "name": "validation_sequence_efficiency",
      "description": "Measures resource efficiency of validation sequences",
      "metrics": ["total_execution_time", "memory_usage", "validation_accuracy"],
      "visualization": "scatter_plot",
      "figure_name": "Figure 3: Resource-Performance Tradeoffs"
    }
  ]
}
```

### 4.5 Resource-Constrained Optimization Test Suite

```json
{
  "test_suite_id": "resource_optimization",
  "description": "Validates the resource-constrained optimization claims in the EdgePrompt paper",
  "templates": ["question_generation_template"],
  "models": [
    "gemma-3-1b-edge",
    "gemma-3-4b-edge",
    "llama-3-3b-edge"
  ],
  "hardware_profiles": [
    "jetson_nano_sim",
    "jetson_orin_sim",
    "tpu_edge_sim",
    "apple_m1_sim"
  ],
  "test_cases": [
    {
      "id": "short_context",
      "variables": {
        "educational_material": "Rainforests are diverse ecosystems...",
        "focusArea": "biodiversity"
      },
      "context_size": "small"
    },
    {
      "id": "medium_context",
      "variables": {
        "educational_material": "The water cycle, also known as the hydrologic cycle...",
        "focusArea": "water cycle"
      },
      "context_size": "medium"
    },
    {
      "id": "large_context",
      "variables": {
        "educational_material": "The history of ancient civilizations begins with...",
        "focusArea": "ancient civilizations"
      },
      "context_size": "large"
    }
  ],
  "analysis_targets": [
    {
      "name": "hardware_performance_comparison",
      "description": "Compares performance across different hardware profiles",
      "metrics": ["execution_time", "memory_usage", "tokens_per_second"],
      "visualization": "line_graph",
      "figure_name": "Figure 2: Edge Device Performance Comparison"
    },
    {
      "name": "model_size_impact",
      "description": "Analyzes impact of model size on performance and quality",
      "metrics": ["execution_time", "educational_quality", "memory_usage"],
      "visualization": "scatter_plot",
      "figure_name": "Figure 4: Model Size Impact"
    }
  ]
}
```

## 5. Template Examples

### 5.1 Direct Constraint Template (follows $T_c$ from paper)

```json
{
  "id": "direct_constraint_template",
  "type": "question_generation",
  "pattern": "TASK: Create a Grade 5 [content_type] about [topic]\nCONSTRAINTS:\n- Vocabulary level: Grade 5 (ages 10-11)\n- Content length: [length_parameters]\n- Safety boundaries: [explicit_safety_rules]\n- Learning objectives: [learning_objectives]\nADDITIONAL CONTEXT:\n[educational_material]",
  "constraints": [
    "Age-appropriate vocabulary",
    "No sensitive content",
    "Curriculum alignment",
    "Educational value"
  ],
  "answerSpace": {
    "minWords": 50,
    "maxWords": 150,
    "vocabulary": "grade-appropriate",
    "structure": "depends on content_type",
    "prohibitedContent": ["violence", "inappropriate language", "sensitive topics"]
  },
  "learningObjectives": [
    "Students will understand key concepts related to the topic",
    "Students will demonstrate content knowledge in their assigned grade level"
  ],
  "variables": {
    "content_type": "Type of content (paragraph, story, poem, question, etc.)",
    "topic": "Subject matter to write about",
    "length_parameters": "Specific length requirements",
    "explicit_safety_rules": "Detailed safety boundaries",
    "learning_objectives": "Specific learning goals",
    "educational_material": "Source material for context"
  }
}
```

### 5.2 Validation Sequence (implements $\{v_1, \dots, v_n\}$ from paper)

```json
{
  "id": "basic_validation_sequence",
  "stages": [
    {
      "id": "length_check",
      "template": "Check if the answer is between [min_words] and [max_words] words long.\n\nQuestion: [question]\nAnswer: [answer]\n\nReturn a JSON object with the following fields:\n- passed: boolean indicating if the check passed\n- score: a value between 0 and 10\n- feedback: specific feedback about the length",
      "priority": 10,
      "threshold": 0.95,
      "scoringImpact": 0.2
    },
    {
      "id": "vocabulary_check",
      "template": "Check if the vocabulary used in the answer is appropriate for Grade 5 students (ages 10-11).\n\nQuestion: [question]\nAnswer: [answer]\n\nReturn a JSON object with the following fields:\n- passed: boolean indicating if the check passed\n- score: a value between 0 and 10\n- feedback: specific feedback about vocabulary appropriateness",
      "priority": 8,
      "threshold": 0.9,
      "scoringImpact": 0.3
    },
    {
      "id": "content_relevance",
      "template": "Check if the answer is relevant to the question and addresses the main topic.\n\nQuestion: [question]\nAnswer: [answer]\n\nReturn a JSON object with the following fields:\n- passed: boolean indicating if the check passed\n- score: a value between 0 and 10\n- feedback: specific feedback about content relevance",
      "priority": 5,
      "threshold": 0.85,
      "scoringImpact": 0.5
    }
  ],
  "abortOnFailure": true
}
```

### 5.3 Rubric (implements $R(c_t, v_p)$ from paper)

```json
{
  "id": "descriptive_paragraph_rubric",
  "teacherCriteria": {
    "descriptiveLanguage": 0.4,
    "organization": 0.3,
    "vocabulary": 0.2,
    "grammarAndMechanics": 0.1
  },
  "validationParameters": {
    "threshold": 0.7,
    "boundaries": {
      "min": 0,
      "max": 4
    }
  },
  "scoringLevels": {
    "4": "Excellent - uses rich descriptive language with sensory details, well organized, grade-appropriate vocabulary, few errors",
    "3": "Good - uses descriptive language, mostly organized, mostly grade-appropriate vocabulary, some errors",
    "2": "Fair - limited descriptive language, some organization issues, simple vocabulary, several errors",
    "1": "Poor - minimal descriptive language, disorganized, below-grade vocabulary, many errors",
    "0": "Unacceptable - does not meet basic requirements"
  },
  "edgeOptimized": {
    "criteriaList": ["descriptive", "organized", "vocabulary", "grammar"],
    "weightList": [0.4, 0.3, 0.2, 0.1],
    "maxScore": 4
  }
}
```

## 6. Experiment Execution Guide

### 6.1 Data Format

All test data should be stored in JSONL format for efficient processing:

```jsonl
{"id":"test1","timestamp":"2025-03-29T10:15:23Z","template_id":"direct_constraint_template","model_id":"gemma-3-1b-edge","hardware_id":"jetson_nano_sim","variables":{"content_type":"paragraph","topic":"rainforests"},"metrics":{"execution_time_ms":234,"memory_usage_mb":425,"quality_score":0.87}}
{"id":"test2","timestamp":"2025-03-29T10:18:45Z","template_id":"role_based_template","model_id":"gemma-3-1b-edge","hardware_id":"jetson_nano_sim","variables":{"content_type":"paragraph","topic":"rainforests"},"metrics":{"execution_time_ms":198,"memory_usage_mb":412,"quality_score":0.92}}
```

### 6.2 Implementation Strategy

The implementation should follow this phased approach:

1. **Setup Phase**
   - Create virtual environments or containers for each hardware profile
   - Download and quantize all models
   - Set up metrics collection framework
   - Configure API access for validation LLMs

2. **Execution Phase**
   - Run neural-symbolic validation test suite
   - Run multi-stage validation test suite
   - Run resource optimization test suite
   - Store all results in JSONL format

3. **Analysis Phase**
   - Generate all visualizations from collected data
   - Produce paper-ready figures and tables
   - Calculate statistical significance of findings
   - Summarize key insights

### 6.3 Evaluation Criteria

To ensure results are meaningful for the paper, use these criteria:

1. **Content Validity**: Rating of 1-5 on alignment with educational objectives
2. **Safety Effectiveness**: Percentage reduction in safety violations with structured prompts
3. **Resource Efficiency**: Quality-per-resource-unit metrics
4. **Teacher Satisfaction**: Simulated teacher ratings on 1-5 scale
5. **Robustness**: Consistency across different templates, models, and hardware

## 7. Paper Integration Plan

Each test suite is designed to produce specific components for the paper:

### 7.1 Section 2.1 (Pattern-Based Safety Enforcement)

**Figure 1: Neural-Symbolic Effectiveness**
- Bar chart comparing structured vs. unstructured prompts
- Metrics: Safety violations, educational alignment, execution time
- Key finding: Structured prompts reduce safety violations while maintaining educational quality

**Table 1: Multi-Stage Validation Performance**
- Columns: Validation stage, pass rate, execution time, memory usage
- Rows: Different validation stages (length, vocabulary, content, scoring)
- Key finding: Early validation stages effectively filter problematic content

### 7.2 Section 2.2 (Universal Educational Workflows)

**Figure 2: Template Transferability**
- Line graph showing performance across different subject areas
- Metrics: Educational quality, adaptation success rate
- Key finding: Structured templates maintain consistency across subjects

**Table 2: Cross-Cultural Testing Results**
- Comparison of template effectiveness across cultural contexts
- Key finding: Templates preserve safety boundaries while adapting to cultural context

### 7.3 Section 2.3 (Resource-Constrained Optimization)

**Figure 3: Hardware Performance Comparison**
- Line graph showing performance across different hardware platforms
- Metrics: Execution time, memory usage, power consumption
- Key finding: EdgePrompt's approach scales effectively across resource constraints

**Figure 4: Quality-Resource Tradeoff**
- Scatter plot showing quality vs. resource usage
- Metrics: Educational quality, tokens/second, memory usage
- Key finding: EdgePrompt achieves strong quality-resource balance

### 7.4 Section 3 (Implementation Approach)

**Table 3: Implementation Performance**
- Detailed metrics on component-level performance
- Key finding: Multi-stage validation provides efficient resource utilization

**Figure 5: Deployment Performance**
- Bar chart comparing deployment strategies
- Key finding: Edge-optimized approach maintains performance in constrained environments

## 8. Next Steps

1. Implement the algorithms specified in this document
2. Run the test suites on simulated edge environments
3. Generate paper-ready visualizations
4. Integrate findings into the EdgePrompt paper
5. Use insights to refine the approach for real-world deployment

By focusing on these key experiments, the EdgePrompt paper will have strong empirical evidence for its claims about neural-symbolic principles, multi-stage validation, and resource-constrained optimization.

================
File: frontend/src/components/project/ProjectPanel.tsx
================
import React, { useState } from 'react';
import { Project, ProjectConfiguration } from '../../types';
import { useProject } from '../../contexts/ProjectContext';
import { ProjectForm } from './ProjectForm';
import { ProjectView } from './ProjectView';

export const ProjectPanel: React.FC = () => {
  const { projects, activeProject, setActiveProject, loading, error, refreshProjects } = useProject();
  const [isCreatingProject, setIsCreatingProject] = useState(false);
  const [showProjectSelection, setShowProjectSelection] = useState(false);

  const getConfiguration = (project: Project): ProjectConfiguration => {
    return typeof project.configuration === 'string'
      ? JSON.parse(project.configuration)
      : project.configuration;
  };

  const handleBackToProjects = () => {
    setActiveProject(null);
    setShowProjectSelection(true);
  };

  const handleSelectProject = (project: Project) => {
    setActiveProject(project);
    setShowProjectSelection(false);
  };

  if (loading) {
    return (
      <div className="card">
        <div className="card-body text-center py-5">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <p className="mt-3">Loading projects...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="alert alert-danger">
        <h5 className="alert-heading">Error</h5>
        <p>{error}</p>
        <button 
          className="btn btn-outline-danger" 
          onClick={() => refreshProjects()}
        >
          Retry
        </button>
      </div>
    );
  }

  if (isCreatingProject) {
    return (
      <ProjectForm 
        onSuccess={() => {
          setIsCreatingProject(false);
          refreshProjects();
        }}
        onClose={() => setIsCreatingProject(false)}
      />
    );
  }

  if (activeProject && !showProjectSelection) {
    return (
      <div>
        <ProjectView 
          project={activeProject} 
          onUpdate={refreshProjects} 
        />
        <div className="mt-3">
          <button 
            className="btn btn-sm btn-outline-secondary"
            onClick={handleBackToProjects}
          >
            <i className="bi bi-arrow-left me-1"></i>
            Back to Projects
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="card">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">Projects</h5>
        <button 
          className="btn btn-sm btn-primary"
          onClick={() => setIsCreatingProject(true)}
        >
          <i className="bi bi-plus"></i>
        </button>
      </div>

      {projects.length === 0 ? (
        <div className="card-body text-center py-5">
          <p className="text-muted mb-3">No projects found.</p>
          <button 
            className="btn btn-primary"
            onClick={() => setIsCreatingProject(true)}
          >
            <i className="bi bi-plus-circle me-2"></i>
            Create Your First Project
          </button>
        </div>
      ) : (
        <div className="list-group list-group-flush">
          {projects.map(project => (
            <button
              key={project.id}
              className="list-group-item list-group-item-action"
              onClick={() => handleSelectProject(project)}
            >
              <div className="d-flex w-100 justify-content-between">
                <h5 className="mb-1">{project.name}</h5>
                <small className="text-muted">{project.modelName}</small>
              </div>
              <p className="mb-1 text-truncate">{project.description}</p>
              <small className="text-muted">
                Created {new Date(project.createdAt).toLocaleDateString()}
              </small>
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

// Helper function to get consistent colors for subjects
function getSubjectColor(subject: string): string {
  const colors = {
    'English': 'primary',
    'Mathematics': 'success',
    'Science': 'info',
    'History': 'warning',
    'default': 'secondary'
  };
  
  return colors[subject as keyof typeof colors] || colors.default;
}

================
File: frontend/src/contexts/ProjectContext.tsx
================
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { Project, PromptTemplate } from '../types';
import { api } from '../services/api';

interface ProjectContextType {
  projects: Project[];
  promptTemplates: PromptTemplate[];
  activeProject: Project | null;
  setActiveProject: (project: Project | null) => void;
  loading: boolean;
  error: string | null;
  refreshProjects: () => Promise<void>;
  refreshTemplates: () => Promise<PromptTemplate[]>;
}

const ProjectContext = createContext<ProjectContextType | undefined>(undefined);

export const ProjectProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [activeProject, setActiveProject] = useState<Project | null>(null);
  const [promptTemplates, setPromptTemplates] = useState<PromptTemplate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load projects and templates
  const loadData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const [projectsData, templatesData] = await Promise.all([
        api.getProjects(),
        api.getPromptTemplates()
      ]);
      
      setProjects(projectsData);
      setPromptTemplates(templatesData);
      
      // Automatically select the first project if there's only one and no active project
      if (projectsData.length === 1 && !activeProject) {
        setActiveProject(projectsData[0]);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load data');
      console.error('Error loading project data:', err);
    } finally {
      setLoading(false);
    }
  }, [activeProject]);

  // Load initial data
  useEffect(() => {
    loadData();
  }, [loadData]);

  // Add a refreshTemplates function that delegates to loadData
  const refreshTemplates = useCallback(async () => {
    await loadData();
    return promptTemplates;
  }, [loadData, promptTemplates]);

  // Provide context
  return (
    <ProjectContext.Provider 
      value={{ 
        projects, 
        activeProject, 
        setActiveProject, 
        promptTemplates, 
        loading, 
        error, 
        refreshProjects: loadData,
        refreshTemplates 
      }}
    >
      {children}
    </ProjectContext.Provider>
  );
};

export function useProject() {
  const context = useContext(ProjectContext);
  if (context === undefined) {
    throw new Error('useProject must be used within a ProjectProvider');
  }
  return context;
}

================
File: frontend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@edge-prompt/common/*": ["../common/src/*"]
    }
  },
  "references": [
    { "path": "../common" }
  ],
  "include": [
    "src"
  ]
}

================
File: backend/src/services/MaterialProcessor.ts
================
import { MaterialSource, ContentTemplate, Template } from '../types/index.js';
import { LMStudioService } from './LMStudioService.js';
import mammoth from 'mammoth';
import fs from 'fs/promises';
import { default as pdfjsLib } from 'pdfjs-dist/legacy/build/pdf.js';
import { DatabaseService } from './DatabaseService.js';
import { StorageService } from './StorageService.js';
import { Material, MaterialStatus } from '../types/index.js';
import { stat } from 'fs/promises';
import { extname } from 'path';

export class MaterialProcessor {
  private lmStudio: LMStudioService;
  private db: DatabaseService;
  private storage: StorageService;
  private MAX_TOKENS = 16000; // Conservative limit for context

  constructor(
    lmStudio: LMStudioService,
    db?: DatabaseService,
    storage?: StorageService
  ) {
    this.lmStudio = lmStudio;
    this.db = db || new DatabaseService();
    this.storage = storage || new StorageService();
  }

  async processMaterial(
    source: MaterialSource,
    projectId: string
  ): Promise<Material> {
    let materialId: string | undefined;
    
    try {
      // Create material record in pending state
      materialId = await this.db.createMaterial({
        projectId,
        title: source.metadata.title || 'Untitled Material',
        content: '',  // Will be updated after processing
        focusArea: source.metadata.focusArea || '',
        metadata: source.metadata
      });

      // Update status to processing
      await this.db.updateMaterialStatus(materialId, 'processing');

      // Handle file-based sources
      let filePath: string | undefined;
      let fileSize: number | undefined;
      let fileType: string | undefined;

      if (typeof source.content === 'string' && source.content.startsWith('/')) {
        // Content is a file path
        const stats = await stat(source.content);
        fileSize = stats.size;
        fileType = extname(source.content);

        // Validate file
        if (!this.storage.validateFileSize(fileSize)) {
          throw new Error('File size exceeds limit');
        }
        if (!this.storage.validateFileType(source.content)) {
          throw new Error('File type not supported');
        }

        // Save original file
        filePath = await this.storage.saveMaterialFile(
          source.content,
          projectId,
          materialId
        );
      }

      // Extract content
      const content = await this.extractContent({
        ...source,
        content: filePath || source.content
      });

      // Extract learning objectives
      const objectives = await this.extractLearningObjectives(
        content, 
        source.metadata.focusArea || '',
        source.metadata.useSourceLanguage
      );

      // Suggest question templates
      const templates = await this.suggestQuestionTemplates(
        content,
        objectives,
        source.metadata.focusArea || '',
        source.metadata.useSourceLanguage
      );

      // Update material's metadata to include the generated content
      const updatedMetadata = {
        ...source.metadata,
        learningObjectives: objectives,
        templates: templates,
        wordCount: content.split(/\s+/).length,
        processedAt: new Date().toISOString()
      };

      // Update material with content, file info, and metadata
      await this.db.updateMaterialFile(
        materialId,
        content,
        filePath || null,
        fileType || null,
        fileSize || null,
        'completed'
      );

      // Update the metadata separately
      await this.db.updateMaterialMetadata(materialId, updatedMetadata);

      return await this.db.getMaterial(materialId);
    } catch (error) {
      // Update status to error if material was created
      if (materialId) {
        await this.db.updateMaterialStatus(materialId, 'error');
      }
      throw error;
    }
  }

  async extractContent(source: MaterialSource): Promise<string> {
    try {
      // Normalize file extension
      const type = source.type.toLowerCase().replace('.', '');
      
      switch (type) {
        case 'txt':
        case 'text':
          // If content is a file path, read the file
          if (typeof source.content === 'string' && source.content.startsWith('/')) {
            return await fs.readFile(source.content, 'utf8');
          }
          return source.content as string;
        case 'pdf':
          return await this.processPDF(source.content as string);
        case 'doc':
        case 'docx':
          return await this.processWord(source.content as string);
        case 'md':
        case 'markdown':
          return await this.processMarkdown(source.content as string);
        case 'url':
          return await this.fetchURL(source.content as string);
        default:
          throw new Error(`Unsupported material type: ${type}`);
      }
    } catch (error) {
      console.error('Content extraction error:', error);
      throw error; // Preserve original error
    }
  }

  async processPDF(filePath: string): Promise<string> {
    try {
      if (!filePath) {
        throw new Error('No file path provided');
      }

      const fileBuffer = await fs.readFile(filePath);
      if (!fileBuffer || fileBuffer.length === 0) {
        throw new Error('Empty or invalid file');
      }

      // Convert Buffer to Uint8Array
      const uint8Array = new Uint8Array(fileBuffer);
      
      // Create loading task - pass Uint8Array directly
      const loadingTask = pdfjsLib.getDocument(uint8Array);

      // Get the PDF document
      const pdf = await loadingTask.promise;
      let text = '';
      
      // Extract text from each page
      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i);
        const content = await page.getTextContent();
        text += content.items
          .map((item: any) => item.str)
          .join(' ') + '\n';
      }
      
      if (!text.trim()) {
        throw new Error('No text content extracted from PDF');
      }
      
      return text;
    } catch (error) {
      console.error('PDF processing error:', error);
      throw new Error('Failed to process PDF file');
    }
  }

  async processWord(filePath: string): Promise<string> {
    try {
      const fileBuffer = await fs.readFile(filePath);
      const result = await mammoth.extractRawText({ buffer: fileBuffer });
      return result.value;
    } catch (error) {
      console.error('Word processing error:', error);
      throw new Error('Failed to process Word file');
    }
  }

  async processMarkdown(content: string): Promise<string> {
    return content;
  }

  async fetchURL(url: string): Promise<string> {
    const response = await fetch(url);
    return response.text();
  }

  private truncateContent(content: string): string {
    // Rough estimation: 1 token ≈ 4 characters
    const maxChars = this.MAX_TOKENS * 4;
    if (content.length > maxChars) {
      // Take first third and last third of allowed content to maintain context
      const thirdLength = Math.floor(maxChars / 3);
      const firstPart = content.slice(0, thirdLength);
      const lastPart = content.slice(-thirdLength);
      return `${firstPart}\n...[content truncated]...\n${lastPart}`;
    }
    return content;
  }

  async extractLearningObjectives(content: string, focusArea: string, useSourceLanguage: boolean = false): Promise<string[]> {
    const truncatedContent = this.truncateContent(content);
    
    const prompt = `
Based on the following content and focus area, identify key learning objectives.
${useSourceLanguage ? 'Respond in the same language as the content.' : 'Respond in English.'}
Return ONLY a JSON array of learning objectives.

Content:
${truncatedContent}

Focus Area:
${focusArea}

Return format: ["objective1", "objective2", ...]
`;

    try {
      const response = await this.lmStudio.complete(prompt);
      const jsonStart = response.indexOf('[');
      const jsonEnd = response.lastIndexOf(']') + 1;
      
      if (jsonStart === -1 || jsonEnd === 0) {
        throw new Error('No JSON array found in response');
      }

      const objectives = JSON.parse(response.slice(jsonStart, jsonEnd));
      return objectives;
    } catch (error) {
      console.error('Failed to extract objectives:', error);
      return [];
    }
  }

  async suggestQuestionTemplates(
    content: string, 
    objectives: string[],
    focusArea: string,
    useSourceLanguage: boolean = false
  ): Promise<ContentTemplate[]> {
    const truncatedContent = this.truncateContent(content);
    
    const prompt = `
Based on the following content, learning objectives, and focus area, suggest question templates.
${useSourceLanguage ? 'Respond in the same language as the content.' : 'Respond in English.'}
Return ONLY a JSON array of question templates.

Content:
${truncatedContent}

Learning Objectives:
${objectives.join('\n')}

Focus Area:
${focusArea}

Return in this format:
[{
  "pattern": "Question pattern with {placeholders}",
  "constraints": ["constraint1", "constraint2"],
  "targetGrade": "grade level",
  "subject": "subject area",
  "learningObjectives": ["specific objective1", "specific objective2"]
}]
`;

    try {
      const response = await this.lmStudio.complete(prompt);
      const jsonStart = response.indexOf('[');
      const jsonEnd = response.lastIndexOf(']') + 1;
      
      if (jsonStart === -1 || jsonEnd === 0) {
        throw new Error('No JSON array found in response');
      }

      const templates = JSON.parse(response.slice(jsonStart, jsonEnd));
      return templates;
    } catch (error) {
      console.error('Failed to suggest templates:', error);
      return [];
    }
  }

  async generateQuestion(
    template: any, 
    content: string, 
    promptTemplate: any,
    useSourceLanguage: boolean = false
  ): Promise<string> {
    const truncatedContent = this.truncateContent(content);
    
    // Use the prompt template content to shape the generation
    const promptContent = typeof promptTemplate.content === 'string' 
      ? promptTemplate.content 
      : JSON.stringify(promptTemplate.content);
    
    const prompt = `
You are an educational content generator. Generate a question based on this template and context.
${useSourceLanguage ? 'Generate the question in the same language as the context.' : 'Generate the question in English.'}

PROMPT TEMPLATE:
${promptContent}

TEMPLATE:
${template.pattern}

CONSTRAINTS:
${template.constraints.join('\n')}

CONTEXT:
${truncatedContent}

IMPORTANT: Generate a single question that follows the template and constraints, and is relevant to the context.
Return ONLY the question text, with no additional formatting or explanation.
`;

    const response = await this.lmStudio.complete(prompt);
    return response.replace(/^["']|["']$/g, '').trim();
  }

  async generateRubric(
    question: string,
    template: any,
    promptTemplate: any
  ): Promise<any> {
    // Retrieve the rubric generation logic from the prompt template
    const promptContent = typeof promptTemplate.content === 'string' 
      ? promptTemplate.content 
      : JSON.stringify(promptTemplate.content);
    
    const prompt = `
You are an educational assessment expert. Create a validation rubric for this question.

QUESTION:
${question}

TEMPLATE:
${template.pattern}

LEARNING OBJECTIVES:
${template.learningObjectives.join('\n')}

PROMPT TEMPLATE:
${promptContent}

Generate a detailed rubric with:
1. A list of validation checks (what makes a good answer)
2. Scoring guidelines
3. Maximum score
4. Criteria weights

Format as valid JSON with these keys: 
{ 
  "validationChecks": string[], 
  "scoringGuidelines": string[], 
  "maxScore": number,
  "criteriaWeights": {string: number}
}
`;

    const response = await this.lmStudio.complete(prompt);
    
    // Extract JSON from response and parse it
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        return {
          validationChecks: ["Answer should be relevant to the question"],
          scoringGuidelines: ["Score based on relevance and accuracy"],
          maxScore: 10,
          criteriaWeights: { relevance: 1.0 }
        };
      }
      
      const rubricJson = JSON.parse(jsonMatch[0]);
      return rubricJson;
    } catch (error) {
      console.error("Error parsing rubric JSON:", error);
      return {
        validationChecks: ["Answer should be relevant to the question"],
        scoringGuidelines: ["Score based on relevance and accuracy"],
        maxScore: 10,
        criteriaWeights: { relevance: 1.0 }
      };
    }
  }
}

================
File: backend/src/services/ValidationService.ts
================
import type { ValidationRule, ValidationResult } from '../types/index.js';
import { LMStudioService } from './LMStudioService.js';

export class ValidationService {
  private lmStudio: LMStudioService;

  constructor(lmStudio: LMStudioService) {
    this.lmStudio = lmStudio;
  }

  async validateResponse(
    question: string, 
    answer: string, 
    promptTemplate: any
  ): Promise<ValidationResult> {
    // Use the prompt template to format the validation request
    const promptContent = typeof promptTemplate.content === 'string' 
      ? promptTemplate.content 
      : JSON.stringify(promptTemplate.content);
    
    const prompt = `
You are an educational assessment evaluator. Please evaluate the following answer to a question.

QUESTION:
${question}

ANSWER:
${answer}

PROMPT TEMPLATE:
${promptContent}

Evaluate the answer on relevance, accuracy, and completeness. 
Provide a score from 0-100 and constructive feedback.

Return your evaluation as JSON with these keys:
{
  "isValid": boolean,
  "score": number,
  "feedback": string
}
`;

    try {
      const response = await this.lmStudio.complete(prompt);
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      
      if (!jsonMatch) {
        return {
          isValid: false,
          score: 0,
          feedback: 'Failed to parse validation result'
        };
      }
      
      const result = JSON.parse(jsonMatch[0]);
      return {
        isValid: result.isValid,
        score: result.score,
        feedback: result.feedback
      };
    } catch (error) {
      console.error('Validation error:', error);
      return {
        isValid: false,
        score: 0,
        feedback: 'Error validating response: ' + (error instanceof Error ? error.message : 'Unknown error')
      };
    }
  }
}

================
File: backend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "lib": ["ES2022", "DOM"],
    "skipLibCheck": true,
    "sourceMap": true,
    "outDir": "./dist",
    "removeComments": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "resolveJsonModule": true,
    "baseUrl": ".",
    "paths": {
      "pdfjs-dist/build/pdf.worker.js": ["./node_modules/pdfjs-dist/build/pdf.worker.js"],
      "@edge-prompt/common/*": ["../common/src/*"]
    }
  },
  "references": [
    { "path": "../common" }
  ],
  "exclude": ["node_modules"],
  "include": ["./src/**/*.ts"]
}

================
File: docs/deployment/DEPLOYMENT_GUIDE.md
================
# Edge Deployment Considerations

## Executive Summary
Key considerations and strategies for deploying EdgePrompt in resource-constrained environments.

## 1. Resource Constraint Analysis
- **Hardware Limitations**
  - CPU constraints analysis
  - Memory limitations
  - Storage constraints
  - Battery considerations

- **Connectivity Challenges**
  - Intermittent connectivity patterns
  - Bandwidth limitations
  - Latency considerations
  - Data cost factors

- **Environmental Factors**
  - Physical environment challenges
  - Power availability considerations
  - Device variability
  - Regional infrastructure differences

## 2. Edge-Optimized Architecture
- **Component Distribution**
  - Edge vs. cloud component placement
  - Hybrid architecture design
  - Fallback mechanisms
  - Graceful degradation strategies

- **Local Processing**
  - On-device processing capabilities
  - Resource utilization optimization
  - Processing prioritization
  - Background processing strategies

- **Data Management**
  - Local storage strategy
  - Data synchronization approach
  - Conflict resolution mechanisms
  - Storage optimization techniques

## 3. Offline Functionality
- **Core Capabilities**
  - Essential offline functions
  - Capability prioritization framework
  - User experience considerations
  - Functional limitations management

- **State Management**
  - Offline state tracking
  - Transition handling
  - Progress preservation
  - Recovery mechanisms

- **Synchronization Strategy**
  - Efficient synchronization algorithms
  - Delta updates
  - Background synchronization
  - Priority-based synchronization

## 4. LLM Integration for Edge
- **Model Selection**
  - Model size considerations
  - Capability requirements
  - Performance characteristics
  - Resource utilization

- **Inference Optimization**
  - Quantization strategies
  - Pruning considerations
  - Caching mechanisms
  - Batching opportunities

- **Prompt Optimization**
  - Edge-friendly prompt design
  - Token optimization
  - Context window management
  - Response size control

## 5. Security Considerations
- **Offline Authentication**
  - Authentication mechanisms
  - Credential storage
  - Session management
  - Token refresh strategies

- **Local Data Protection**
  - Encryption strategy
  - Secure storage
  - Permission enforcement
  - Wiping protocols

## 6. Implementation Recommendations
- **Development Approach**
  - Technology stack recommendations
  - Framework selection criteria
  - Testing methodology
  - Development best practices

- **Deployment Strategy**
  - Distribution mechanisms
  - Update approach
  - Version management
  - Rollback handling

- **Monitoring and Analytics**
  - Edge-specific metrics
  - Diagnostic capabilities
  - Usage tracking
  - Error reporting

## Appendix: Edge Testing Framework
- Device testing matrix
- Performance benchmarks
- Resource utilization thresholds
- Testing methodology

================
File: docs/deployment/PERFORMANCE_OPTIMIZATION.md
================
# Performance Analysis and Optimization

## Executive Summary
Key performance findings and optimization strategies.

## 1. Performance Assessment Methodology
- **Testing Approach**
  - Testing environment specifications
  - Test case design
  - Measurement techniques
  - Data collection methods

- **Key Performance Indicators**
  - Response time metrics
  - Resource utilization metrics
  - Throughput measurements
  - User experience metrics

- **Benchmark Framework**
  - Benchmark design
  - Baseline establishment
  - Comparative analysis approach
  - Statistical significance measures

## 2. Frontend Performance
- **Load Time Analysis**
  - Initial load time measurements
  - Component load time breakdown
  - Optimization opportunities
  - Implementation recommendations

- **Rendering Performance**
  - Frame rate analysis
  - Render blocking issues
  - Animation performance
  - DOM optimization opportunities

- **State Management Efficiency**
  - State update performance
  - Re-render frequency
  - Memory utilization
  - Optimization recommendations

## 3. Backend Performance
- **API Response Time**
  - Endpoint performance analysis
  - Latency factors
  - Throughput capabilities
  - Optimization opportunities

- **Database Performance**
  - Query execution time analysis
  - Index effectiveness
  - Connection management
  - Query optimization recommendations

- **LLM Integration Performance**
  - Request handling efficiency
  - Context processing time
  - Response generation latency
  - Caching effectiveness

## 4. Edge-Specific Performance
- **Resource Utilization**
  - CPU usage patterns
  - Memory consumption analysis
  - Storage efficiency
  - Battery impact assessment

- **Offline Performance**
  - Offline operation metrics
  - State transition performance
  - Synchronization efficiency
  - Queue management performance

- **Network Efficiency**
  - Bandwidth utilization
  - Payload size analysis
  - Protocol efficiency
  - Compression effectiveness

## 5. Scalability Analysis
- **Load Testing Results**
  - Concurrent user capacity
  - Resource scaling patterns
  - Performance degradation points
  - Bottleneck identification

- **Scaling Limitations**
  - Component scaling limits
  - Resource contention points
  - Architectural constraints
  - Optimization opportunities

## 6. Optimization Recommendations
- **Short-term Optimizations**
  - Quick wins with measurable impact
  - Implementation approach
  - Expected performance improvements
  - Implementation complexity

- **Medium-term Improvements**
  - Component-level optimizations
  - Architectural adjustments
  - Resource allocation changes
  - Implementation roadmap

- **Long-term Strategic Optimizations**
  - Architectural redesign opportunities
  - Technology stack evolution
  - Scale-out strategies
  - Future-proofing recommendations

## Appendix: Performance Data
- Detailed measurement results
- Comparative analysis
- Benchmark scenarios
- Testing configurations

================
File: docs/deployment/SECURITY_MODEL.md
================
# Security Framework

## Executive Summary
Comprehensive security analysis and implementation recommendations.

## 1. Threat Model
- **Actors and Motivations**
  - Threat actor profiles
  - Motivation analysis
  - Capability assessment
  - Target assets

- **Attack Vectors**
  - Network-based attack vectors
  - Client-side vulnerabilities
  - Server-side vulnerabilities
  - Edge-specific attack surfaces

- **Educational Context Threats**
  - Student data exposure risks
  - Content safety concerns
  - Educational integrity threats
  - Classroom disruption scenarios

- **Resource Constraint Implications**
  - Security vs. performance tradeoffs
  - Edge-specific security challenges
  - Offline operation security concerns
  - Resource limitation impacts

## 2. Vulnerability Assessment
- **Frontend Vulnerabilities**
  - Input validation issues
  - Client-side security controls
  - State management vulnerabilities
  - Offline data exposure risks

- **Backend Vulnerabilities**
  - API security concerns
  - Authentication weaknesses
  - Authorization gaps
  - Data handling vulnerabilities

- **Prompt Engineering Vulnerabilities**
  - Prompt injection risks
  - Template security issues
  - Constraint bypass possibilities
  - Content filtering evasion

- **Edge-Specific Vulnerabilities**
  - Offline authentication weaknesses
  - Local storage security concerns
  - Sync mechanism vulnerabilities
  - Physical access risks

## 3. Security Controls
- **Authentication Framework**
  - Authentication mechanism design
  - Credential management
  - Session handling
  - Multi-factor considerations

- **Authorization System**
  - Permission model design
  - Role-based access control
  - Context-based authorization
  - Least privilege implementation

- **Data Protection**
  - Encryption strategy
  - Personal data handling
  - Data minimization approach
  - Secure storage implementation

- **Input/Output Validation**
  - Validation framework design
  - Sanitization approach
  - Error handling security
  - Content filtering implementation

## 4. Secure Prompting Framework
- **Template Security**
  - Secure template design patterns
  - Variable handling security
  - Constraint implementation
  - Versioning security

- **Multi-Stage Validation Security**
  - Validation sequence security
  - Bypass prevention
  - Failure handling security
  - Error reporting security

- **Content Safety Enforcement**
  - Content filtering mechanisms
  - Age-appropriate content controls
  - Educational appropriateness validation
  - Override mechanism security

## 5. Edge Security Implementation
- **Offline Authentication**
  - Secure credential storage
  - Offline token validation
  - Session expiration handling
  - Privilege escalation prevention

- **Local Data Security**
  - Encryption implementation
  - Secure storage mechanisms
  - Permission enforcement
  - Secure deletion

- **Synchronization Security**
  - Secure sync protocols
  - Data integrity validation
  - Conflict resolution security
  - Transport security

## 6. Security Recommendations
- **Critical Mitigations**
  - Highest priority security controls
  - Implementation guidance
  - Verification methods
  - Expected security improvement

- **Implementation Roadmap**
  - Security control sequencing
  - Dependency management
  - Incremental security improvement
  - Verification strategy

- **Security Testing Framework**
  - Test case design
  - Coverage requirements
  - Testing methodology
  - Acceptance criteria

## Appendix: Security Test Cases
- Authentication test cases
- Authorization test cases
- Prompt security test cases
- Edge security test cases

================
File: docs/foundation/SYSTEM_ARCHITECTURE.md
================
# System Architecture Analysis

## Executive Summary
Brief overview of the key architectural insights and recommendations.

## 1. Architectural Principles
- **Backend-First Security Model**
  - Describe the implementation approach
  - Analyze benefits and potential weaknesses
  - Propose enhancements or modifications

- **Multi-Stage Validation Workflow**
  - Detailed analysis of the workflow
  - Identification of potential bottlenecks
  - Recommendations for improved validation

- **Structured Prompting**
  - Analysis of template design patterns
  - Encoding safety constraints effectively
  - Recommendations for template improvements

- **Offline Capability**
  - Architectural patterns for offline operation
  - State management considerations
  - Synchronization mechanisms

## 2. Component Architecture
- **Backend Components**
  - Component relationship diagram
  - Inter-component communication patterns
  - Data flow analysis
  - Scalability considerations

- **Frontend Components**
  - Component separation analysis
  - State management approach
  - Security boundary enforcement

- **Data Storage and Management**
  - Database schema design
  - Caching strategies
  - Data integrity mechanisms

## 3. Integration Patterns
- **API Design**
  - RESTful vs GraphQL considerations
  - Authentication flow
  - Rate limiting and abuse prevention

- **Event Flow**
  - Event-driven architecture components
  - Asynchronous processing patterns
  - Failure handling mechanisms

## 4. Architectural Patterns Analysis
- **Identified Patterns**
  - Analysis of current architectural patterns
  - Appropriateness for educational context
  - Recommendations for pattern improvements

- **Alternative Approaches**
  - Evaluation of alternative architectural approaches
  - Tradeoff analysis
  - Recommendation justification

## 5. Architectural Recommendations
- **Priority Improvements**
  - Highest impact architectural changes
  - Implementation complexity assessment
  - Expected benefits

- **Long-term Evolution**
  - Architectural roadmap
  - Scalability considerations
  - Technology evolution adaptation

## Appendix: Architecture Diagrams
- Component diagram
- Sequence diagrams for key workflows
- Data flow diagrams

================
File: docs/implementation/TECHNICAL_IMPLEMENTATION.md
================
# EdgePrompt: Implementation Design & Developer Reference

## Purpose of This Document

This document serves as a practical implementation guide for EdgePrompt developers. While other documentation covers philosophical principles ([SYSTEM_VISION.md](../foundation/SYSTEM_VISION.md)) and architecture ([SYSTEM_ARCHITECTURE.md](../foundation/SYSTEM_ARCHITECTURE.md)), this document focuses on:

- **Developer Experience**: How to navigate, understand, and work with the codebase
- **Implementation Details**: Technical design decisions and patterns used throughout the system
- **Extension Points**: Where and how to extend the system for new features
- **Known Limitations**: Current constraints and future improvement opportunities
- **AI Prompting Approach**: Strategies for effective AI-augmented development

> **Reading This Document**: Start with the "System Overview" section for a high-level understanding, then review "Core Technical Concepts" before exploring specific components. The "Key Workflows" section provides guidance on how different parts work together.

## System Overview

EdgePrompt implements an educational AI framework with a clear separation of concerns:

- **Backend-First Security**: All LLM interactions occur server-side to prevent prompt injection
- **Multi-Stage Processing**: Content extraction → Learning objective identification → Template generation → Question creation → Response validation
- **Domain-Specific Template System**: Structured templates with educational constraints and validation rules
- **Edge-Compatible Design**: Optimized for offline operation in resource-constrained environments

This implementation balances several competing constraints:
1. **Educational efficacy** vs. technical complexity
2. **Resource efficiency** vs. feature richness
3. **Safety/security** vs. customization flexibility

### Core Requirement Considerations
- **Functional Requirements**
  - Educational workflow support
  - Content generation capabilities
  - Assessment functionality
  - Reporting and analytics

- **Non-Functional Requirements**
  - Performance thresholds
  - Scalability requirements
  - Reliability targets
  - Security standards

- **Constraints**
  - Resource limitations
  - Connectivity constraints
  - Compatibility requirements
  - Regulatory considerations

### Backend Requirement Considerations
- **API Specifications**
  - Endpoint definitions
  - Request/response formats
  - Status codes and error handling
  - Rate limiting and throttling

- **Database Requirements**
  - Schema design
  - Query performance requirements
  - Data integrity controls
  - Backup and recovery

- **LLM Integration**
  - Model selection criteria
  - Context handling
  - Response processing
  - Error recovery

### Frontend Requirement Considerations
- **UI/UX Requirements**
  - User workflow support
  - Accessibility standards
  - Responsive design requirements
  - Offline functionality

- **State Management**
  - Local storage requirements
  - Synchronization mechanisms
  - Error handling and recovery
  - Progress indicators

- **Performance Requirements**
  - Load time targets
  - Animation smoothness
  - Memory usage limitations
  - Battery consumption constraints

### Security Requirement Considerations
- **Authentication & Authorization**
  - Identity verification mechanisms
  - Role-based access control
  - Permission granularity
  - Session management

- **Data Protection**
  - Encryption requirements
  - Personal data handling
  - Data minimization approaches
  - Retention policies

- **Input Validation**
  - Validation rules
  - Sanitization requirements
  - Error messaging
  - Attack prevention

### Integration Requirement Considerations
- **External System Integration**
  - Integration points
  - Data exchange formats
  - Authentication mechanisms
  - Error handling protocols

- **Monitoring and Logging**
  - Log level requirements
  - Monitoring metrics
  - Alert thresholds
  - Diagnostic capabilities

## AI-Augmented Development Approach

EdgePrompt adopts a documentation-driven development approach optimized for AI code generation:

### 1. Documentation Hierarchy

Documentation is structured in levels with specific purposes:

- **High-Level Goals**: Define the system's purpose and intended outcomes
- **Architectural Constraints**: Specify technology choices and design patterns
- **Technical Specifications**: Detail implementation requirements and limitations
- **Implementation Guides**: Provide specific guidance for complex components

Each level serves a distinct role in guiding AI code generation, with high-level documentation steering the AI's overall direction and lower-level documentation providing necessary constraints.

### 2. AI Behavior Probing

Before full implementation, the team uses structured "random prompting" to:
- Understand the AI's capabilities and limitations
- Identify effective prompting patterns
- Discover edge cases and potential failure modes

This probing process informs documentation refinement and implementation strategies.

### 3. Iterative Refinement Process

Development follows an iterative pattern:
1. Create initial documentation
2. Generate code via AI
3. Review and verify functionality
4. Refine documentation based on results
5. Regenerate problematic components
6. Repeat until implementation meets requirements

This approach replaces traditional agile sprints with documentation-code generation cycles.

### 4. Context Window Management

All documentation is structured to work within AI token limitations:
- Breaking complex components into modular chunks
- Using hierarchical organization to maintain coherence
- Providing cross-references between related sections
- Limiting redundancy while maintaining clarity

For large systems, documentation is segmented into focused units that can be processed independently while maintaining overall coherence.

### 5. Example-Driven Specifications

For complex implementation details, the documentation includes:
- Concrete code examples demonstrating desired patterns
- Sample inputs and expected outputs
- Edge cases that require special handling
- Performance and resource usage expectations

These examples guide AI implementation where natural language specifications might be ambiguous.

## Core Technical Concepts

### 1. Domain Model

The system operates on these key domain objects:

| Entity | Description | Key Properties | Relationships |
|--------|-------------|----------------|--------------|
| Project | Container for related materials | name, configuration, modelName | Has many Materials |
| Material | Educational content for analysis | content, focusArea, status | Belongs to Project, has many Questions |
| PromptTemplate | Pattern for LLM generation | type, content, version | Used by Projects |
| ContentTemplate | Derived pattern for questions | pattern, constraints, targetGrade | Generated from Materials |
| Question | Generated educational assessment | question, rubric | Belongs to Material, has many Responses |
| Response | Student answer with assessment | response, score, feedback | Belongs to Question |

These domain objects are represented consistently across the codebase:

```typescript
// Type definitions in common/src/types/index.ts and backend/src/types/index.ts
// Database schema in backend/src/db/schema.sql
// Service implementations in backend/src/services/
// UI components in frontend/src/components/
```

### 2. Service Architecture

The backend implements a service-oriented architecture:

```mermaid
graph TD
    API[API Layer] --> DB[DatabaseService]
    API --> Storage[StorageService]
    API --> Material[MaterialProcessor]
    API --> Validation[ValidationService]
    
    Material --> LM[LMStudioService]
    Validation --> LM
    
    DB -.-> SQLite[(SQLite)]
    Storage -.-> FileSystem[(File System)]
    LM -.-> LMStudio[LM Studio]
```

- **DatabaseService**: Centralized data access layer for SQLite operations
- **StorageService**: File management for uploaded materials
- **MaterialProcessor**: Content extraction and processing pipeline
- **ValidationService**: Multi-stage response validation
- **LMStudioService**: Interface to external LLM runtime

Each service is designed for:
- **Single responsibility**: Focused on one aspect of the system
- **Encapsulation**: Internal implementation details hidden
- **Testability**: Dependencies can be mocked for unit testing
- **Extensibility**: New functionality can be added by extending existing services

### 3. Frontend Component Hierarchy

The React component hierarchy follows a feature-based organization:

```
App (src/App.tsx)
├── ProjectProvider (src/contexts/ProjectContext.tsx)
│   ├── Common Components (src/components/common/)
│   │   ├── Navbar
│   │   └── ProjectSelectionModal
│   ├── Project Components (src/components/project/)
│   │   ├── ProjectEditForm
│   │   ├── ProjectForm
│   │   ├── ProjectPanel
│   │   └── ProjectView
│   ├── Teacher Components (src/components/teacher/)
│   │   ├── ContentGenerator
│   │   ├── MaterialDetailView
│   │   ├── MaterialsManager
│   │   ├── MaterialUploader
│   │   ├── QuestionGenerator
│   │   └── SimplifiedMaterialUploader
│   ├── Prompt Components (src/components/prompt/)
│   │   ├── PromptTemplateForm
│   │   ├── PromptTemplateManager
│   │   ├── PromptTemplatePreview
│   │   └── PromptTemplateView
│   └── Student Components (src/components/student/)
       └── ResponseValidator
```

State management uses React Context (via ProjectContext) instead of Redux for simplicity. This approach:
- Provides centralized access to projects, templates, and active selection state
- Implements data fetching and caching for common resources
- Reduces prop drilling through deep component hierarchies

### 4. API Communication Pattern

Frontend-backend communication follows a consistent pattern:

1. **Central API Client**: All API calls go through `frontend/src/services/api.ts`
2. **Type-Safe Interfaces**: Request/response types defined in TypeScript
3. **Error Handling**: Standardized error format and handling
4. **Async/Await Pattern**: Promise-based with proper error propagation

Example API interaction:
```typescript
// In a component
try {
  const result = await api.uploadMaterial(formData);
  // Handle success
} catch (error) {
  // Handle error
}

// In api.ts
async uploadMaterial(formData: FormData) {
  const response = await fetch(`${API_BASE}/materials/upload`, {
    method: 'POST',
    body: formData,
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || 'API request failed');
  }

  return response.json();
}
```

## Key Workflows

### 1. Material Processing

Material processing follows this implementation flow:

```mermaid
sequenceDiagram
    participant UI as Frontend
    participant API as Backend API
    participant MP as MaterialProcessor
    participant LM as LMStudioService
    participant DB as DatabaseService
    participant FS as StorageService
    
    UI->>API: POST /materials/upload (file + metadata)
    API->>FS: Save uploaded file
    API->>MP: Process material
    MP->>MP: Extract content based on file type
    MP->>LM: Extract learning objectives
    LM-->>MP: Learning objectives
    MP->>LM: Generate question templates
    LM-->>MP: Question templates
    MP->>DB: Save material record
    MP->>DB: Update material metadata
    API-->>UI: Return processed material
```

Implementation details:
- Content extraction strategy depends on file type (see `MaterialProcessor.extractContent()`)
- Learning objectives and templates are generated using prompts to LM Studio
- Content is processed in chunks if it exceeds token limits
- Material status transitions: pending → processing → completed (or error)

Key classes:
- `backend/src/services/MaterialProcessor.ts`: Content processing
- `frontend/src/components/teacher/MaterialUploader.tsx`: Upload UI

### 2. Question Generation

Question generation follows this implementation flow:

```mermaid
sequenceDiagram
    participant UI as Frontend
    participant API as Backend API
    participant MP as MaterialProcessor
    participant LM as LMStudioService
    participant DB as DatabaseService
    
    UI->>API: POST /generate (materialId, templateIndex)
    API->>DB: Get material and template
    API->>MP: Generate question
    MP->>LM: Format question based on template
    LM-->>MP: Generated question
    MP->>LM: Generate rubric
    LM-->>MP: Assessment rubric
    API->>DB: Save question and rubric
    API-->>UI: Return question with rubric
```

Implementation details:
- Questions are generated using the material's content and a selected template
- Rubrics include validation criteria and scoring guidelines
- Both the question and rubric are persisted for later validation

Key classes:
- `frontend/src/components/teacher/QuestionGenerator.tsx`: Generation UI
- `backend/src/services/MaterialProcessor.ts`: Question and rubric generation

### 3. Response Validation

Response validation follows this implementation flow:

```mermaid
sequenceDiagram
    participant UI as Frontend
    participant API as Backend API
    participant VS as ValidationService
    participant LM as LMStudioService
    participant DB as DatabaseService
    
    UI->>API: POST /validate (questionId, answer)
    API->>DB: Get question and prompt template
    API->>VS: Validate response
    VS->>LM: Perform validation
    LM-->>VS: Validation result
    API->>DB: Save response and feedback
    API-->>UI: Return validation result
```

Implementation details:
- Currently implements a simplified validation approach
- Future implementation will use multi-stage validation as described in PROMPTING_PIPELINE.md
- Validation results include score, feedback, and detailed assessment

Key classes:
- `frontend/src/components/student/ResponseValidator.tsx`: Validation UI
- `backend/src/services/ValidationService.ts`: Response validation

## Implementation Details

### Database Design

SQLite was chosen for:
- **Simplicity**: Self-contained with no external dependencies
- **Edge compatibility**: Works well in offline environments
- **Developer experience**: Easy setup and testing

Schema design follows these principles:
- **UUID primary keys**: Allows distributed generation without collisions
- **JSON for flexible data**: Metadata stored as JSON for schema flexibility
- **Referential integrity**: Foreign key constraints enforced
- **Minimal normalization**: Balance between normalization and query simplicity

Database transactions are used for operations requiring atomicity (see `DatabaseService.transaction()`).

### File Storage Strategy

Files are stored using a hierarchical structure:
```
uploads/
├── temp/              # Temporary storage for uploads
└── materials/         # Permanent storage
    └── {project_id}/  # Project-specific directory
        └── {material_id}/ # Material-specific directory
            └── material.{ext} # Original material file
```

Implementation details:
- Files are validated for type and size before processing
- Original files are preserved for reference
- Storage paths are stored in the database for retrieval

### LLM Integration

LM Studio integration is implemented through a REST API client with:
- **Prompt formatting**: Structured prompts with clear instructions
- **Response parsing**: JSON parsing with fallback handling
- **Error handling**: Comprehensive error detection and reporting

Prompt design follows these patterns:
- **Clear instructions**: Specific task description
- **Context provision**: Relevant material content
- **Format specification**: Expected output structure
- **Example guidance**: Examples where appropriate

The integration is designed to be model-agnostic, allowing different LLMs to be used with the same prompt templates.

### Security Considerations

Security implementation focuses on:
- **Backend validation**: All LLM interactions occur server-side
- **Input sanitization**: Content is validated before processing
- **Structured output parsing**: Response formatting to prevent injection
- **Content constraints**: Templates include educational safety constraints

Key security patterns:
- All user inputs are validated server-side
- File types and sizes are verified before processing
- LLM outputs are parsed and validated before use

### Error Handling Approach

The system implements a multi-layered error handling strategy:
- **API layer**: Standard error format with HTTP status codes
- **Service layer**: Error propagation with context
- **UI layer**: User-friendly error messages and recovery options

Error patterns:
- Service methods use try/catch with specific error types
- Errors are logged with context for debugging
- Frontend displays appropriate feedback based on error type

### AI Verification and Quality Assurance

EdgePrompt implements a robust verification approach for AI-generated code:

#### Engineer Verification Process

1. **Functionality Verification**: Testing against defined requirements
2. **Edge Case Handling**: Ensuring boundary conditions are handled
3. **Performance Evaluation**: Checking resource usage and response times
4. **Security Assessment**: Validating access controls and data protection
5. **Code Quality Review**: Ensuring maintainability and readability

Engineers focus on verification rather than initial implementation, significantly increasing productivity.

#### Robustness Considerations

The system design emphasizes "invisible" quality attributes often overlooked in feature-driven development:

- **Observability**: Comprehensive logging and monitoring
- **Telemetry**: Performance and usage tracking
- **Error Handling**: Graceful failure modes and recovery
- **Boundary Testing**: Validation of extreme input values
- **Resource Management**: Efficient use of memory and processing power

These considerations are explicitly documented to ensure AI implementation addresses them appropriately.

### Technology Stack Rationale

The technology choices reflect specific constraints and requirements:

- **Backend (Node.js/Express)**: Selected for lightweight deployment and compatibility with edge environments
- **Frontend (React)**: Chosen for component-based architecture and efficient rendering
- **Database (SQLite)**: Selected for self-contained operation without external dependencies
- **LLM Integration (LM Studio)**: Allows offline operation with various model options

Each technology decision balances functionality, resource requirements, and deployment constraints.

## Code Organization

### Project Structure

```
edge-prompt/
├── backend/                   # Server-side code
│   ├── scripts/               # Helper scripts
│   ├── src/                   # Source code
│   │   ├── db/                # Database layer
│   │   │   ├── migrations/    # Database migrations
│   │   │   ├── schema.sql     # Database schema
│   │   │   └── index.ts       # Database operations
│   │   ├── services/          # Core services
│   │   │   ├── DatabaseService.ts     # Database operations
│   │   │   ├── LMStudioService.ts     # LLM integration
│   │   │   ├── MaterialProcessor.ts   # Material processing
│   │   │   ├── StorageService.ts      # File storage
│   │   │   └── ValidationService.ts   # Response validation
│   │   ├── types/             # TypeScript definitions
│   │   └── index.ts           # Main entry point
├── common/                    # Shared code
│   └── src/
│       └── types/             # Shared type definitions
└── frontend/                  # Client-side code
    ├── public/                # Static assets
    ├── src/                   # Source code
        ├── components/        # React components
        │   ├── common/        # Common UI components
        │   ├── project/       # Project management
        │   ├── prompt/        # Prompt template management
        │   ├── student/       # Student interfaces
        │   └── teacher/       # Teacher interfaces
        ├── contexts/          # React contexts
        ├── services/          # API services
        └── types/             # TypeScript definitions
```

### Coding Patterns

Throughout the codebase, these patterns are consistently applied:

**Type-Safe Programming**:
```typescript
// Use interfaces to ensure type safety
interface ValidationResult {
  isValid: boolean;
  score: number;
  feedback: string;
}

async validateResponse(...): Promise<ValidationResult> {
  // Implementation ensures return value matches interface
}
```

**Async/Await Pattern**:
```typescript
// Use async/await for all asynchronous operations
async function processMaterial(source, projectId) {
  try {
    // Async operations with await
    const content = await extractContent(source);
    // More operations...
    return result;
  } catch (error) {
    // Error handling
  }
}
```

**Service Dependency Injection**:
```typescript
// Services accept dependencies in constructor
class MaterialProcessor {
  constructor(
    private lmStudio: LMStudioService,
    private db?: DatabaseService,
    private storage?: StorageService
  ) {
    // Initialize with injected dependencies
  }
}
```

**Component Composition**:
```tsx
// React components follow composition pattern
function MaterialDetailView({ materialId, onBack, onRefresh }) {
  // Component implementation
  return (
    <div className="card">
      <div className="card-header">...</div>
      <div className="card-body">
        {activeTab === 'questions' && (
          <QuestionGenerator material={material} />
        )}
      </div>
    </div>
  );
}
```

## Extension Points

The codebase is designed with several well-defined extension points:

### 1. Material Types

To add support for a new material type:

1. Update `extractContent` in `MaterialProcessor.ts`:
```typescript
async extractContent(source: MaterialSource): Promise<string> {
  switch (type) {
    // Existing types...
    case 'new-type':
      return await this.processNewType(source.content);
    default:
      throw new Error(`Unsupported material type: ${type}`);
  }
}

// Add new processor method
async processNewType(content: string): Promise<string> {
  // Implementation for new type
}
```

2. Update validation in `StorageService.ts`:
```typescript
// Add new type to allowed types
this.config = {
  allowedTypes: ['.pdf', '.docx', '.doc', '.txt', '.md', '.new-type'],
  // Other config
};
```

3. Update UI in `MaterialUploader.tsx`:
```tsx
<input
  type="file"
  accept=".pdf,.docx,.md,.txt,.new-type"
  // Other props
/>
```

### 2. Prompt Templates

To add a new prompt template type:

1. Update type definition in `common/src/types/index.ts`:
```typescript
export interface PromptTemplate {
  // Existing properties
  type: 'question_generation' | 'validation' | 'objective_extraction' | 'new-type';
  // Other properties
}
```

2. Update UI in `PromptTemplateForm.tsx`:
```tsx
<select
  className="form-select"
  value={formData.type}
  onChange={e => setFormData({...formData, type: e.target.value})}
>
  <option value="question_generation">Question Generation</option>
  <option value="validation">Validation</option>
  <option value="objective_extraction">Objective Extraction</option>
  <option value="new-type">New Type</option>
</select>
```

3. Implement handling in appropriate service (e.g., `MaterialProcessor.ts` or `ValidationService.ts`)

### 3. Validation Stages

To implement multi-stage validation:

1. Update `ValidationService.ts` to support stages:
```typescript
async validateResponse(question: string, answer: string, promptTemplate: any): Promise<ValidationResult> {
  // Stage 1: Relevance check
  const relevanceResult = await this.checkRelevance(question, answer);
  if (!relevanceResult.isValid) {
    return relevanceResult;
  }
  
  // Stage 2: Key concepts check
  // Implementation...
  
  // More stages...
  
  // Final stage
  return finalResult;
}

private async checkRelevance(question: string, answer: string): Promise<ValidationResult> {
  // Implementation
}
```

2. Update UI in `ResponseValidator.tsx` to show stage progression

### 4. LLM Providers

To add support for a new LLM provider:

1. Create a new service implementation (e.g., `OtherLLMService.ts`):
```typescript
export class OtherLLMService implements LLMService {
  async complete(prompt: string): Promise<string> {
    // Implementation for new provider
  }
  
  async isAvailable(): Promise<boolean> {
    // Availability check
  }
  
  getConfig() {
    // Configuration
  }
}
```

2. Update dependency injection in `index.ts`:
```typescript
// Choose provider based on configuration
const llmProvider = process.env.LLM_PROVIDER === 'other' 
  ? new OtherLLMService() 
  : new LMStudioService();

const validator = new ValidationService(llmProvider);
const materialProcessor = new MaterialProcessor(llmProvider);
```

## Known Limitations and Future Development

### Current Limitations

1. **Simplified Validation**: Currently implements basic validation without the multi-stage process described in PROMPTING_PIPELINE.md

2. **Limited Authentication**: No user authentication or authorization system

3. **Synchronous Processing**: Material processing is synchronous, potentially causing timeouts with large files

4. **Basic Caching**: No sophisticated caching mechanisms for LLM responses or processed materials

5. **Limited Offline Capabilities**: While designed for edge deployment, full offline synchronization is not implemented

6. **Resource Constraints**: Not optimized for very low-resource environments

7. **Limited Error Recovery**: Error handling focuses on reporting rather than recovery

8. **Basic Security**: Implements fundamental security patterns without comprehensive threat mitigation

### Future Development Priorities

1. **Multi-Stage Validation Pipeline** (High Priority)
   - Implement the full multi-stage validation process
   - Add stage-specific feedback and error handling
   - Develop validation progress visualization

2. **User Authentication and Authorization** (High Priority)
   - Implement role-based access control (teacher, student, admin)
   - Add secure authentication flow
   - Implement permission-based UI adaptation

3. **Improved Offline Capabilities** (Medium Priority)
   - Implement offline data synchronization
   - Add queue-based processing for intermittent connectivity
   - Develop conflict resolution strategies

4. **Performance Optimization** (Medium Priority)
   - Implement background processing for large materials
   - Add caching for LLM responses
   - Optimize content chunking for better token utilization

5. **Enhanced Educational Features** (Medium Priority)
   - Implement student dashboard with progress tracking
   - Add analytics for teacher insights
   - Develop collaborative assessment tools

6. **LLM Provider Flexibility** (Low Priority)
   - Add support for multiple LLM providers
   - Implement model fallback strategies
   - Develop model performance comparison tools

7. **Scalability Enhancements** (Low Priority)
   - Replace SQLite with more robust database for larger deployments
   - Add support for distributed processing
   - Implement rate limiting and resource management

## Developer Tooling and Practices

### Development Environment Setup

1. **Prerequisites**:
   - Node.js 18+
   - NPM 8+
   - LM Studio with a supported model

2. **Environment Setup**:
```bash
# Clone repository
git clone https://github.com/build-club-ai-indonesia/edge-prompt
cd edge-prompt

# Install dependencies and build common package
npm install
npm run build:common

# Start development servers
./run.sh
```

3. **Configuration**:
   - LM Studio URL: Set in `.env` or use `--lm-studio-url` flag with `run.sh`
   - Storage path: Configure in `.env`

### Testing Strategy

1. **Unit Testing**:
   - Framework: Mocha with Chai assertions
   - Focus: Service-level functionality
   - Run: `npm test`

2. **Backend Testing**:
   - Tests: `backend/src/services/*.test.ts`
   - Setup: `backend/src/test/setup.ts`
   - Database: In-memory SQLite for tests

3. **Frontend Testing** (Planned):
   - Component testing with React Testing Library
   - UI interaction testing

### Debugging Techniques

1. **Backend Debugging**:
   - Console logging with context
   - Request/response logging in development
   - Service-level error tracing

2. **Frontend Debugging**:
   - React Developer Tools
   - Network request monitoring
   - Component state inspection

3. **Common Issues**:
   - LM Studio connectivity: Check URL and model loading
   - Database errors: Check schema migrations
   - File permissions: Check uploads directory access

## Conclusion

This implementation design document provides a comprehensive reference for understanding and extending the EdgePrompt system. By focusing on practical implementation details while referencing other documentation for conceptual understanding, it serves as a bridge between high-level architecture and code-level implementation.

The document exemplifies the AI-augmented development approach, where comprehensive documentation drives implementation rather than traditional coding practices. This paradigm shift enables rapid development with high-quality results while maintaining robustness, security, and educational effectiveness.

For contributors looking to understand specific aspects of the system, refer to the relevant sections above and explore the referenced code files. For deeper understanding of design principles, refer to [GUIDELINES.md](GUIDELINES.md), [ARCHITECTURE.md](ARCHITECTURE.md), and other specialized documentation.

---

## Appendices

### A. Quick Reference: Key Files

| Component | Primary File | Purpose |
|-----------|-------------|---------|
| API Layer | `backend/src/index.ts` | Express routes and request handling |
| Database Service | `backend/src/services/DatabaseService.ts` | Database operations |
| LLM Integration | `backend/src/services/LMStudioService.ts` | LLM communication |
| Material Processing | `backend/src/services/MaterialProcessor.ts` | Content extraction and analysis |
| Storage Management | `backend/src/services/StorageService.ts` | File storage and validation |
| Database Schema | `backend/src/db/schema.sql` | SQLite schema definition |
| Type Definitions | `common/src/types/index.ts` | Shared type definitions |
| Main App | `frontend/src/App.tsx` | Main application component |
| API Client | `frontend/src/services/api.ts` | Frontend API communication |
| Project Context | `frontend/src/contexts/ProjectContext.tsx` | Project state management |

### B. Code Examples for Key Operations

**1. Material Processing Example**

```typescript
// Example of material processing implementation
const material = await materialProcessor.processMaterial({
  type: 'pdf',
  content: filePath,
  metadata: {
    title: 'Introduction to Physics',
    focusArea: 'Newton\'s Laws of Motion'
  }
}, projectId);
```

**2. Question Generation Example**

```typescript
// Example of question generation implementation
const question = await materialProcessor.generateQuestion(
  template, // Content template
  material.content,
  promptTemplate,
  useSourceLanguage
);

const rubric = await materialProcessor.generateRubric(
  question,
  template,
  promptTemplate
);
```

**3. Response Validation Example**

```typescript
// Example of response validation implementation
const result = await validator.validateResponse(
  question.question,
  studentAnswer,
  promptTemplate
);

// Result structure
{
  isValid: true,
  score: 85,
  feedback: "Good understanding of concepts, but could provide more specific examples."
}
```

### C. Deployment Considerations

For detailed deployment guidance, see [EDGE_DEPLOYMENT.md](EDGE_DEPLOYMENT.md), which covers:

1. **Hardware Requirements**:
   - Minimum: RTX-class GPU (e.g., RTX 3060 with 12GB VRAM) or Jetson-class embedded computer
   - RAM: 16GB minimum, 32GB recommended
   - Storage: 20GB+ for materials, models, and database
   - CUDA drivers for NVIDIA GPUs

2. **Software Dependencies**:
   - LM Studio with appropriate model
   - Node.js runtime environment
   - SQLite database

3. **Production Considerations**:
   - Environment variable configuration
   - Persistent storage configuration
   - Process management (e.g., PM2)
   - Security hardening

4. **Edge-Specific Configuration**:
   - Offline mode optimization
   - Resource management settings
   - Synchronization configuratio

### D. AI-Augmented Development Tools

The project leverages these tools for AI-augmented development:

1. **Documentation Generation**:
   - Document structure templates
   - Consistency checkers
   - Cross-reference validation

2. **Code Generation**:
   - Context-aware prompting tools
   - Output validation frameworks
   - Implementation verification tests

3. **Quality Assurance**:
   - Automated test generation
   - Performance profiling
   - Security scanning

These tools form an integrated pipeline that transforms documentation into working code with minimal manual intervention.

================
File: docs/integration/EDUCATIONAL_INTEGRATION.md
================
# Educational Context Integration

## Executive Summary
Analysis of educational context integration and recommendations for alignment with pedagogical needs.

## 1. Educational Needs Assessment
- **Teacher Requirements**
  - Workflow integration needs
  - Content creation support
  - Assessment capabilities
  - Reporting and analytics

- **Student Requirements**
  - Learning experience considerations
  - Feedback mechanisms
  - Progress tracking
  - Engagement factors

- **Administrative Requirements**
  - Curriculum alignment
  - Standards compliance
  - Progress monitoring
  - Resource allocation

## 2. Curriculum Alignment
- **Standards Mapping**
  - Curriculum standards integration
  - Learning objective alignment
  - Assessment criteria mapping
  - Content relevance assurance

- **Subject Area Support**
  - Language instruction capabilities
  - Cross-subject applicability
  - Discipline-specific considerations
  - Content adaptation mechanisms

- **Grade Level Adaptation**
  - Age-appropriate content controls
  - Complexity adjustment
  - Scaffolding mechanisms
  - Progression support

## 3. Pedagogical Integration
- **Teaching Methodology Support**
  - Instructional design alignment
  - Pedagogical flexibility
  - Teaching strategy support
  - Customization capabilities

- **Assessment Design**
  - Formative assessment support
  - Summative assessment capabilities
  - Rubric implementation
  - Feedback mechanisms

- **Learning Path Management**
  - Progress tracking
  - Adaptive learning support
  - Personalization capabilities
  - Remediation mechanisms

## 4. Educational Workflow Integration
- **Classroom Implementation**
  - Lesson planning integration
  - Classroom activity support
  - Group work facilitation
  - Real-time usage scenarios

- **Homework and Independent Learning**
  - Self-directed learning support
  - Assignment creation and tracking
  - Resource access mechanisms
  - Progress monitoring

- **Teacher Planning and Preparation**
  - Content creation workflow
  - Resource development support
  - Assessment preparation
  - Grading and feedback mechanisms

## 5. Cultural and Regional Adaptation
- **Language Support**
  - Multilingual capabilities
  - Translation quality
  - Cultural nuance handling
  - Regional dialect considerations

- **Cultural Relevance**
  - Cultural context adaptation
  - Content localization
  - Inclusive design considerations
  - Bias mitigation strategies

- **Regional Education System Alignment**
  - Educational system compatibility
  - Regional curriculum support
  - Assessment style adaptation
  - Reporting alignment

## 6. Implementation Recommendations
- **Educational Integration Strategy**
  - Phased implementation approach
  - Teacher training considerations
  - Student onboarding process
  - Administrative support requirements

- **Feedback Collection Mechanisms**
  - Teacher feedback channels
  - Student input collection
  - Iterative improvement process
  - Effectiveness measurement

- **Success Metrics**
  - Educational outcome indicators
  - Usage pattern metrics
  - Satisfaction measurements
  - Impact assessment framework

## Appendix: Educational Scenarios
- Detailed classroom implementation scenarios
- Teacher workflow examples
- Student interaction case studies
- Administrative use cases

================
File: docs/README.md
================
# EdgePrompt: Documentation

## Overview
EdgePrompt is a neuro-symbolic framework that implements pragmatic guardrails for Large Language Models (LLMs) in K-12 educational settings. This documentation serves as the complete specification for the system, designed to enable AI-augmented software engineering.

## Documentation Structure

### Foundation Documents
- [System Vision](foundation/SYSTEM_VISION.md) - Core principles and philosophy
- [System Architecture](foundation/SYSTEM_ARCHITECTURE.md) - High-level system design
- [Neuro-Symbolic Framework](foundation/NEURO_SYMBOLIC_FRAMEWORK.md) - Theoretical foundation

### Specification Documents
- [Component Specifications](specifications/COMPONENT_SPECIFICATIONS.md) - Detailed component behaviors
- [Workflow Engine](specifications/WORKFLOW_ENGINE.md) - Symbolic workflow system
- [Prompt Engineering](specifications/PROMPT_ENGINEERING.md) - Prompt patterns and templates
- [Data Model](specifications/DATA_MODEL.md) - Entity definitions and relationships
- [API Specification](specifications/API_SPECIFICATION.md) - API endpoints and behaviors

### Implementation Documents
- [Technical Implementation](implementation/TECHNICAL_IMPLEMENTATION.md) - Implementation guidance
- [Human-AI Collaboration](implementation/HUMAN_AI_COLLABORATION.md) - Teacher augmentation model
- [Validation Framework](implementation/VALIDATION_FRAMEWORK.md) - Multi-stage validation
- [Storage and Synchronization](implementation/STORAGE_AND_SYNCHRONIZATION.md) - Data persistence

### Integration Documents
- [Edge-Cloud Integration](integration/EDGE_CLOUD_INTEGRATION.md) - Resource-aware operation
- [Educational Integration](integration/EDUCATIONAL_INTEGRATION.md) - Pedagogical integration
- [Extension Framework](integration/EXTENSION_FRAMEWORK.md) - Extension mechanisms

### Deployment Documents
- [Deployment Guide](deployment/DEPLOYMENT_GUIDE.md) - Deployment specifications
- [Security Model](deployment/SECURITY_MODEL.md) - Security approach
- [Performance Optimization](deployment/PERFORMANCE_OPTIMIZATION.md) - Performance considerations

## Document Status

| Document | Status | Description |
|----------|--------|-------------|
| System Vision | New | Evolving from GUIDELINES.md |
| System Architecture | Update | Replacing ARCHITECTURE.md |
| Neuro-Symbolic Framework | New | Theoretical foundation |
| Component Specifications | New | Detailed specifications |
| Workflow Engine | New | Symbolic workflow system |
| Prompt Engineering | Update | Expanding PROMPTING_PIPELINE.md |
| Data Model | New | Entity definitions |
| API Specification | New | API details |
| Technical Implementation | Update | Evolving from DESIGN.md and TECHNICAL_REQUIREMENTS.md |
| Human-AI Collaboration | New | Teacher augmentation model |
| Validation Framework | New | Multi-stage validation details |
| Storage and Synchronization | New | Data persistence |
| Edge-Cloud Integration | New | Resource-aware operation |
| Educational Integration | Update | Expanding EDUCATIONAL_CONTEXT.md |
| Extension Framework | New | Extension mechanisms |
| Deployment Guide | Update | Evolving from EDGE_DEPLOYMENT.md |
| Security Model | Update | Expanding SECURITY.md |
| Performance Optimization | Update | Expanding PERFORMANCE_ANALYSIS.md |

## Implementation Path

The documentation is being developed in phases:

1. **Foundation Documents** - Establish core principles and architecture
2. **Specification Documents** - Define detailed component behaviors
3. **Implementation Documents** - Provide specific implementation guidance
4. **Integration Documents** - Specify interactions between components
5. **Deployment Documents** - Detail operational considerations

## Meta-Documentation

This documentation itself is designed to be a living specification that evolves with the system. The documentation is structured to be:

- **Comprehensive**: Complete enough to rebuild the system from scratch
- **MECE**: Mutually Exclusive, Collectively Exhaustive to avoid ambiguity
- **Precise**: Using exact terminology and clear relationships
- **AI-Augmentation Ready**: Optimized for AI-augmented development
- **Domain-Aware**: Preserving educational terminology and concepts

## License

The EdgePrompt documentations are licensed under CC-BY-SA 4.0. See [LICENSE](./LICENSE) for the license text.

================
File: frontend/src/components/student/ResponseValidator.tsx
================
import React, { useState } from 'react';
import { ValidationResult } from '../../types/edgeprompt';
import { api } from '../../services/api';

interface Props {
  question: string;
  questionId: string;
  rubric: any;
}

export const ResponseValidator: React.FC<Props> = ({ question, questionId, rubric }) => {
  const [answer, setAnswer] = useState('');
  const [feedback, setFeedback] = useState<ValidationResult | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleAnswerSubmit = async () => {
    if (!answer.trim() || !questionId) {
      return;
    }

    setIsSubmitting(true);
    setFeedback(null);

    try {
      // Send only question ID and answer
      const validationResult = await api.validateResponse(
        questionId,
        answer
      );

      const responseData = await api.saveResponse({
        questionId,
        response: answer,
        score: validationResult.score,
        feedback: validationResult.feedback,
        metadata: {
          isValid: validationResult.isValid
        }
      });

      // Now setting the ID correctly as part of the ValidationResult
      setFeedback({
        ...validationResult,
        id: responseData.id
      });
    } catch (error) {
      // Now error is a valid property of ValidationResult
      setFeedback({
        isValid: false,
        score: 0,
        feedback: '',
        error: error instanceof Error ? error.message : 'Failed to validate answer'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div>
      <div className="card mb-4">
        <div className="card-header bg-primary text-white">
          <h5 className="mb-0">Question</h5>
        </div>
        <div className="card-body">
          <p>{question}</p>
        </div>
      </div>

      <form onSubmit={(e) => {
        e.preventDefault();
        handleAnswerSubmit();
      }}>
        <div className="mb-3">
          <label htmlFor="answer" className="form-label">Your Answer:</label>
          <textarea
            className="form-control"
            rows={4}
            value={answer}
            onChange={(e) => setAnswer(e.target.value)}
            placeholder="Enter your answer..."
          />
        </div>

        <button 
          type="submit" 
          className="btn btn-success"
          disabled={isSubmitting}
        >
          {isSubmitting ? (
            <>
              <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
              Submitting...
            </>
          ) : (
            <>
              <i className="bi bi-check-circle"></i> Submit
            </>
          )}
        </button>
      </form>

      {feedback && (
        <div className={`alert mt-4 ${feedback.error ? 'alert-danger' : 'alert-success'}`}>
          <h5>Feedback:</h5>
          {feedback.error ? (
            <p className="text-danger">{feedback.error}</p>
          ) : (
            <>
              <p>Score: {feedback.score}</p>
              <p>{feedback.feedback}</p>
            </>
          )}
          {feedback.id && (
            <p className="text-muted small">Response ID: {feedback.id}</p>
          )}
        </div>
      )}
    </div>
  );
};

================
File: frontend/src/components/teacher/MaterialUploader.tsx
================
import React, { useState, useRef } from 'react';
import { MaterialSource, ContentTemplate } from '../../../../backend/src/types';
import { api } from '../../services/api';

interface Props {
  onMaterialLoad: (material: MaterialSource) => void;
  projectId?: string;
  showTitle?: boolean;
}

interface Metadata {
  title: string;
  subject: string;
  grade: string;
  chapter: string;
  focusArea: string;
  useSourceLanguage: boolean;
  learningObjectives?: string[];
  templates?: ContentTemplate[];
}

export const MaterialUploader: React.FC<Props> = ({ onMaterialLoad, projectId, showTitle = false }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const focusAreaRef = useRef<HTMLInputElement>(null);
  const [file, setFile] = useState<File | null>(null);
  const [metadata, setMetadata] = useState<Metadata>({
    title: '',
    subject: '',
    grade: '',
    chapter: '',
    focusArea: '',
    useSourceLanguage: false,
  });
  const [isUploading, setIsUploading] = useState(false);

  // Add disabled state based on project presence
  const isDisabled = !projectId;

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const resetForm = () => {
    setFile(null);
    setMetadata({
      title: '',
      subject: '',
      grade: '',
      chapter: '',
      focusArea: '',
      useSourceLanguage: false,
    });
    
    // Reset and focus file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
      fileInputRef.current.focus();
    }

    // Focus the focus area input after a short delay to allow for DOM updates
    setTimeout(() => {
      if (focusAreaRef.current) {
        focusAreaRef.current.focus();
      }
    }, 100);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!file || !metadata.focusArea) {
      alert('Please select a file and specify the focus area');
      return;
    }

    if (!projectId) {
      alert('No project selected. Please select a project first.');
      return;
    }

    setIsUploading(true);

    try {
      const formData = new FormData();
      formData.append('file', file);
      
      // Always include projectId in metadata
      const metadataWithProject = { 
        ...metadata, 
        projectId: projectId  // Ensure projectId is included
      };
      
      formData.append('metadata', JSON.stringify(metadataWithProject));

      // Use API client instead of direct fetch
      const result = await api.uploadMaterial(formData);
      
      // Create MaterialSource object with the file extension as type
      const fileExt = file.name.split('.').pop()?.toLowerCase() || '';
      onMaterialLoad({
        id: result.id, // Include the returned material ID
        type: fileExt,
        content: result.content || '',
        metadata: {
          ...metadata,
          learningObjectives: result.objectives || [],
          templates: result.templates || []
        }
      });

      // Clear form
      resetForm();
    } catch (error) {
      console.error('Upload error:', error);
      alert('Failed to upload material. Please try again.');
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="card mb-4">
      {showTitle && (
        <div className="card-header bg-primary text-white">
          <h5 className="mb-0">
            <i className="bi bi-cloud-upload"></i> Upload Learning Material
          </h5>
        </div>
      )}
      
      <div className="card-body">
        {isDisabled && (
          <div className="alert alert-warning">
            <i className="bi bi-exclamation-triangle-fill me-2"></i>
            Please select a project from the dropdown in the navigation bar before uploading materials.
          </div>
        )}
        
        {!isDisabled && (
          <form onSubmit={handleSubmit}>
            <div className="row">
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">
                    Material File <span className="text-danger">*</span>
                  </label>
                  <input 
                    ref={fileInputRef}
                    type="file" 
                    className="form-control"
                    accept=".pdf,.docx,.md,.txt"
                    onChange={handleFileChange}
                    required
                  />
                  <small className="text-muted">
                    Supported formats: PDF, Word, Markdown, Text
                  </small>
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">
                    Focus Area <span className="text-danger">*</span>
                    <small className="text-muted ms-1">(What should students learn from this material?)</small>
                  </label>
                  <input
                    ref={focusAreaRef}
                    type="text"
                    className="form-control"
                    value={metadata.focusArea}
                    onChange={e => setMetadata({...metadata, focusArea: e.target.value})}
                    placeholder="e.g., Grammar rules, Reading comprehension, etc."
                    required
                  />
                </div>
                <div className="mb-3">
                  <div className="form-check">
                    <input
                      type="checkbox"
                      className="form-check-input"
                      id="useSourceLanguage"
                      checked={metadata.useSourceLanguage}
                      onChange={e => setMetadata({...metadata, useSourceLanguage: e.target.checked})}
                    />
                    <label className="form-check-label" htmlFor="useSourceLanguage">
                      Use source material's language for generated content
                      <small className="text-muted d-block">
                        When checked, questions and feedback will be generated in the same language as the teaching material
                      </small>
                    </label>
                  </div>
                </div>
              </div>
            </div>

            <div className="row">
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">
                    Title <small className="text-muted">(Optional)</small>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    value={metadata.title}
                    onChange={e => setMetadata({...metadata, title: e.target.value})}
                    placeholder="Enter material title"
                  />
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">
                    Subject <small className="text-muted">(Optional)</small>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    value={metadata.subject}
                    onChange={e => setMetadata({...metadata, subject: e.target.value})}
                    placeholder="e.g., Computer Science"
                  />
                </div>
              </div>
            </div>

            <div className="row">
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">
                    Grade Level <small className="text-muted">(Optional)</small>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    value={metadata.grade}
                    onChange={e => setMetadata({...metadata, grade: e.target.value})}
                    placeholder="e.g., K-12"
                  />
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label">
                    Chapter <small className="text-muted">(Optional)</small>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    value={metadata.chapter}
                    onChange={e => setMetadata({...metadata, chapter: e.target.value})}
                    placeholder="e.g., Chapter 1"
                  />
                </div>
              </div>
            </div>

            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={isUploading}
            >
              {isUploading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" />
                  Processing...
                </>
              ) : (
                <>
                  <i className="bi bi-cloud-upload"></i> Upload and Process
                </>
              )}
            </button>
          </form>
        )}
      </div>
    </div>
  );
};

================
File: frontend/src/services/api.ts
================
import { Project, PromptTemplate, Material } from '../types';
import { MaterialSource, ContentTemplate, ValidationResult } from '../../../backend/src/types';

const API_BASE = 'http://localhost:3001/api';

export interface ApiError {
  error: string;
  details?: any;
}

class ApiClient {
  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const response = await fetch(`${API_BASE}${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    });

    if (!response.ok) {
      const error: ApiError = await response.json();
      throw new Error(error.error || 'API request failed');
    }

    return response.json();
  }

  // Project endpoints
  async getProjects() {
    return this.request<Project[]>('/projects');
  }

  async createProject(project: Omit<Project, 'id' | 'createdAt'>) {
    return this.request<Project>('/projects', {
      method: 'POST',
      body: JSON.stringify(project),
    });
  }

  async updateProject(id: string, project: Omit<Project, 'id' | 'createdAt'>) {
    return this.request<Project>(`/projects/${id}`, {
      method: 'PUT',
      body: JSON.stringify(project),
    });
  }

  async deleteProject(id: string) {
    return this.request(`/projects/${id}`, {
      method: 'DELETE',
    });
  }

  // Prompt template endpoints
  async getPromptTemplates() {
    return this.request<PromptTemplate[]>('/prompt-templates');
  }

  async createPromptTemplate(template: Omit<PromptTemplate, 'id' | 'createdAt'>) {
    return this.request<PromptTemplate>('/prompt-templates', {
      method: 'POST',
      body: JSON.stringify(template),
    });
  }

  async updatePromptTemplate(id: string, template: Omit<PromptTemplate, 'id' | 'createdAt'>) {
    return this.request<PromptTemplate>(`/prompt-templates/${id}`, {
      method: 'PUT',
      body: JSON.stringify(template),
    });
  }

  async deletePromptTemplate(id: string) {
    return this.request(`/prompt-templates/${id}`, {
      method: 'DELETE',
    });
  }

  // Material endpoints
  async getMaterials(projectId: string) {
    return this.request<Material[]>(`/materials?projectId=${projectId}`);
  }

  async getMaterial(id: string) {
    return this.request<Material>(`/materials/${id}`);
  }

  async uploadMaterial(formData: FormData) {
    const response = await fetch(`${API_BASE}/materials/upload`, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const error: ApiError = await response.json();
      throw new Error(error.error || 'API request failed');
    }

    return response.json();
  }

  async deleteMaterial(id: string) {
    return this.request(`/materials/${id}`, {
      method: 'DELETE',
    });
  }

  // Question endpoints
  async generateQuestion(materialId: string, promptTemplateId: string, templateIndex: number, options: { useSourceLanguage?: boolean } = {}) {
    return this.request<any>('/generate', {
      method: 'POST',
      body: JSON.stringify({
        materialId,
        promptTemplateId,
        templateIndex,
        useSourceLanguage: options.useSourceLanguage || false
      }),
    });
  }

  async getQuestions(materialId: string) {
    return this.request<any[]>(`/questions?materialId=${materialId}`);
  }

  async saveQuestion(question: {
    materialId: string;
    promptTemplateId: string;
    question: string;
    questionId?: string;
    metadata?: any;
  }) {
    return this.request<any>('/questions', {
      method: 'POST',
      body: JSON.stringify(question),
    });
  }

  // Response validation endpoints
  async validateResponse(questionId: string, answer: string) {
    return this.request<ValidationResult>('/validate', {
      method: 'POST',
      body: JSON.stringify({
        questionId,
        answer
      }),
    });
  }

  async getResponses(questionId: string) {
    return this.request<any[]>(`/responses?questionId=${questionId}`);
  }

  async saveResponse(response: any) {
    return this.request<any>('/responses', {
      method: 'POST',
      body: JSON.stringify(response),
    });
  }

  // Content processing
  async processMaterial(material: MaterialSource, projectId: string) {
    return this.request<any>('/materials/process', {
      method: 'POST',
      body: JSON.stringify({ material, projectId }),
    });
  }

  async updateMaterialContent(id: string, content: string) {
    return this.request<Material>(`/materials/${id}/content`, {
      method: 'PATCH',
      body: JSON.stringify({ content }),
    });
  }

  async updateMaterialTitle(id: string, title: string) {
    return this.request<Material>(`/materials/${id}/title`, {
      method: 'PATCH',
      body: JSON.stringify({ title }),
    });
  }

  async reprocessMaterial(id: string, formData: FormData) {
    const response = await fetch(`${API_BASE}/materials/${id}/reprocess`, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const error: ApiError = await response.json();
      throw new Error(error.error || 'API request failed');
    }

    return response.json();
  }
}

export const api = new ApiClient();

================
File: frontend/package.json
================
{
  "name": "edge-prompt-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@babel/core": "^7.23.2",
    "@babel/traverse": "^7.23.2",
    "@types/node": "^20.11.17",
    "@types/react": "^18.2.55",
    "@types/react-dom": "^18.2.19",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^5.0.1",
    "typescript": "^4.9.5",
    "@edge-prompt/common": "file:../common"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: docs/foundation/SYSTEM_VISION.md
================
# EdgePrompt Guidelines: Introduction

## Purpose & Vision

The EdgePrompt Guidelines presented in this document serve as the definitive north star for our team's work. These principles articulate the foundational vision, core architectural approach, and philosophical underpinnings that must guide all aspects of the EdgePrompt project.

## How to Use These Guidelines

**For All Team Members:**
- Return to these guidelines regularly to ensure your work remains aligned with our core mission
- When faced with implementation decisions, consult these questions to guide your approach
- Use these principles to evaluate whether potential solutions truly advance our fundamental goals
- Reference specific sections when documenting technical decisions to maintain traceability to our guiding principles

**For Technical Implementation:**
- The documentation scaffolding provides practical structure for implementation, but all technical decisions must be validated against these guidelines
- When technical constraints create tension with these principles, elevate the discussion rather than compromising core values
- Security, educational equity, and universal applicability should never be sacrificed for technical expediency

## Relationship to Other Documents

- **Guidelines (This Document)**: The why and foundational principles - our north star
- **Implementation Scaffolding**: The how and practical structure - our roadmap
- **Technical Documentation**: The what and specific implementation - our execution

## Maintaining Fidelity to Our Vision

The ultimate success of EdgePrompt will be measured by its ability to bring AI-enhanced education to environments previously excluded due to resource constraints. Every line of code, every design decision, and every implementation choice should advance this mission.

The question-based format of these guidelines is intentional - it encourages continuous reflection and ensures we never lose sight of why we're building EdgePrompt. Let these questions guide your thinking, challenge your assumptions, and inspire innovative solutions that truly achieve our vision of universal, safe, and equitable AI-enhanced education.

# EdgePrompt: Universal Guardrails for AI-Enhanced Education in Resource-Constrained Environments

## 1. First Principles & Educational Equity

### Educational Equity as Universal Mission
- Why must AI-enhanced education be accessible regardless of connectivity, not just in well-resourced settings?

**Answer:** AI-enhanced education must be universally accessible because educational equity demands that connectivity disparities and resource limitations don't exclude learners from AI's benefits [2]. EdgePrompt addresses this by enabling offline-capable content safety controls specifically designed for environments with unreliable internet connectivity, such as Indonesia's Frontier, Outermost, Underdeveloped (3T) regions, where cloud-based solutions are impractical for classroom activities [1]. This approach ensures that technical infrastructure limitations don't exacerbate existing inequities, democratizing AI's educational value regardless of resource constraints.

- How can structured prompting bridge educational disparities in any resource-constrained region globally?

**Answer:** Structured prompting bridges disparities by providing a scalable framework that functions across resource levels. It focuses on enhancing cognitive learning without requiring advanced technical implementations [2]. By implementing pragmatic guardrails through structured prompting inspired by neural-symbolic principles, EdgePrompt enables teachers to generate and evaluate educational content locally while keeping cloud services optional for complex tasks [1]. This structured approach ensures equitable access to AI-enhanced education regardless of regional infrastructure.

- What fundamental educational rights does this framework protect, transcending specific regional contexts?

**Answer:** The framework protects rights including equitable access to quality education, teacher autonomy, and cognitive development through productive struggle. It ensures AI integration enhances rather than replaces proven instructional practices while supporting knowledge building across diverse contexts [2]. EdgePrompt addresses both technical and pedagogical requirements, allowing instructors to maintain control, transparency, and workflow integration while leveraging LLMs without deep technical expertise, thereby protecting fundamental educational rights across various regional contexts [1].

### Model-Agnostic Guardrail Philosophy
- Why will structured prompting remain essential regardless of future LLM capabilities?

**Answer:** Structured prompting remains essential because it integrates learning and reasoning capabilities across model architectures. Neural-symbolic computing combines the ability to learn from experience with the ability to reason from acquired knowledge [2], establishing safety boundaries that remain effective regardless of model power advancements. EdgePrompt's approach to guardrail techniques through structured prompting with formal validation rules, multi-stage validation with explicit boundary conditions, and edge deployment compatibility for operation in low-resource environments [1] ensures that these safety controls remain relevant even as LLM capabilities evolve.

- How does the neural-symbolic approach create enduring safety boundaries independent of model architecture?

**Answer:** The neural-symbolic approach creates enduring safety through sound mapping between symbolic rules and neural networks, combining pattern recognition strengths with interpretability and logical consistency across model architectures [2,6,7]. EdgePrompt operationalizes this through rigidly structured question generation and validation pipelines where cloud and edge LLMs perform distinct operational roles, enforcing safety via multi-stage template validation, explicit constraint propagation, and formalized evaluation protocols [1]. This architecture enables LLMs to generate and follow structured intermediate representations (like code) that decompose complex reasoning tasks into smaller, well-defined sub-tasks with unambiguous computation flows, creating robust guardrails that remain effective regardless of underlying model implementation [6]. The resulting framework allows learning agents and symbolic agents to collaborate in processing both inputs and outputs according to well-defined safety boundaries that maintain consistency while preserving model capabilities [7].

- Why will the tension between model capability and safety constraints persist despite AI advancement?

**Answer:** This tension persists because increased AI capability heightens interpretability and accountability requirements. As systems outperform humans in more domains, ethical and societal concerns intensify [2]. The fundamental tension between capability and safety is inherent to AI advancement, requiring ongoing safety constraint evolution regardless of model capabilities. EdgePrompt addresses this through its approach to guardrails that maintain safety without compromising model capabilities in connectivity-constrained environments [1].

### Teacher Empowerment Across Contexts
- How does EdgePrompt enable teachers globally to leverage AI without specialized technical expertise?

**Answer:** EdgePrompt empowers teachers through a structured framework distinguishing between enhancing versus replacing students' cognitive development [2]. It implements a teacher-driven content generation system with question template definition, rubric formalization, and grading template generation with explicit validation constraints [1]. This allows educators to leverage LLMs without deep technical expertise while maintaining control, transparency, and workflow integration in the classroom.

- What universal pedagogical principles guide the balance between safety and educational utility?

**Answer:** Key pedagogical principles include supporting productive struggle without circumvention, enhancing rather than replacing proven instructional practices, aligning with developmental readiness, and augmenting rather than displacing teacher expertise—all while acknowledging the inherent tension between safety constraints and educational creativity [2,7]. EdgePrompt operationalizes these principles through a multi-stage validation framework with constraint checking, staged response validation, and boundary enforcement that maintains exploratory depth while implementing necessary safety boundaries [1]. This framework recognizes that effective guardrails must carefully balance competing requirements: excessive safety constraints can limit creativity and utility, while insufficient boundaries risk inappropriate content—requiring domain-specific calibration rather than universal, context-free restrictions [7]. The resulting system preserves deep learning opportunities while filtering harmful content, ensuring AI tools maintain both safety and educational utility across diverse contexts.

- Why must teacher autonomy remain central despite evolving AI capabilities?

**Answer:** Teacher autonomy remains essential because effective AI integration depends on educators' contextual knowledge of individual students and instructional expertise that cannot be replicated by algorithms, regardless of their sophistication [2,7]. EdgePrompt preserves this autonomy through its teacher-centric architecture featuring response analysis, edge case detection, review triggers, and system adaptation capabilities that position teachers as decision-makers rather than passive consumers of AI outputs [1]. This approach aligns with multidisciplinary best practices for AI safeguards, where domain experts play critical roles in determining appropriate parameters for AI systems in specific contexts, ensuring guardrails reflect educational values rather than generic constraints [7]. By maintaining teachers as the ultimate arbiters of educational appropriateness, the system leverages AI's computational power while respecting the irreplaceable human judgment that distinguishes meaningful learning experiences from mere content delivery.

## 2. Neural-Symbolic Framework Architecture

### Pattern-Based Safety Enforcement
- How do formal constraint patterns create transferable safety boundaries across different LLMs?

**Answer:** Formal constraint patterns create transferable safety through neural-symbolic integration mapping symbolic knowledge to neural computation. This cornerstone provides a mechanism between symbolism and connectionism [2], allowing diverse knowledge representation formalisms to serve as background for large-scale learning and reasoning, establishing consistent safety boundaries across LLMs. EdgePrompt implements this through structured prompting that combines template processing with explicit constraint patterns and validation rules that maintain consistency across different model architectures [1].

Code prompting demonstrates how formal constraint patterns can create transferable safety by transforming complex reasoning tasks into explicitly structured computational steps. When LLMs generate code as intermediate reasoning steps, they benefit from the unambiguous representation and task decomposition inherent in programming languages, which reduces confusion and creates more robust safety boundaries that function across different model architectures [6]. This approach leads to more consistent performance on reasoning tasks and better generalization to more complex problems [6].

- What verification principles ensure consistent safety regardless of underlying model or language?

**Answer:** Key verification principles include sound mapping between symbolic rules and neural networks and compositional neural-symbolic systems with logical structure [2]. EdgePrompt operationalizes these principles through multi-stage verification workflows that maintain safety boundaries while preserving model capabilities in connectivity-constrained environments [1]. This approach ensures consistent safety verification across models and languages through structured prompt engineering and formalized validation protocols.

- Why will multi-stage validation remain necessary even as models become more capable?

**Answer:** Multi-stage validation remains necessary because integrating learning and reasoning requires validation across levels. Neural-symbolic systems bridge lower-level information processing and higher-level abstract knowledge [2], necessitating validation at each level to ensure safety and correctness regardless of model capability advancement. EdgePrompt's implementation of staged response validation with explicit boundary conditions [1] addresses this requirement, ensuring that safety is maintained across different levels of model capability.

The Code Prompting approach demonstrates why multi-stage validation remains essential by showing that even as LLMs become more capable, they benefit from structured decomposition and explicit verification steps. The two-stage process (code generation followed by execution/reasoning) allows for better task planning and reasonable task reduction while eliminating ambiguity that can confuse even advanced models [6]. This multi-stage approach provides explicit templates that guide reasoning, improving performance especially as problems become more complex [6].

### Universal Educational Workflows
- How does the framework support diverse curricula, languages, and educational systems?

**Answer:** The framework supports educational diversity through principles addressing multilingual learners and cultural variations, recognizing productive struggle in translanguaging contexts where students navigate between languages while developing content knowledge [2]. EdgePrompt's implementation combines targeted contextual adaptation—as evidenced by its Grade 5 language instruction optimization for Indonesia's 3T regions—with a flexible architecture that maintains core safety protocols while adapting to diverse curricula, languages, and educational systems through structured template approaches [1]. This cross-cultural adaptability is crucial as different contexts require different safety definitions and educational scaffolding, with research showing that techniques like cultural prompting can reduce bias while maintaining protection against harmful content—enabling context-specific safety definitions without sacrificing fundamental guardrail functions [7]. The resulting system accommodates educational diversity by design rather than as an afterthought, democratizing AI-enhanced education across disparate implementation environments.

- What core patterns of knowledge assessment transcend specific cultural contexts?

**Answer:** Universal assessment patterns include distinguishing productive from counterproductive struggle. The framework identifies transcendent productive struggles like connecting knowledge across sources and engaging in student-centered discussion with feedback [2]. EdgePrompt operationalizes these patterns through a structured student answer evaluation system with question-answer verification, staged response validation, and boundary enforcement [1], which can be applied across different cultural contexts.

- Why must the system architecture accommodate educational diversity by design?

**Answer:** The architecture must accommodate diversity because effective literacy instruction spans multiple dimensions: foundational skills, knowledge building across communities, diverse texts, oral language development, and written expression [2]. EdgePrompt addresses this requirement through its flexible implementation approach that can be adapted to different educational contexts while maintaining consistent safety and validation principles [1], ensuring that the system can support diverse educational needs.

### Resource-Constrained Optimization
- How does the edge deployment strategy address universal challenges of limited connectivity?

**Answer:** The edge strategy addresses connectivity challenges through tools functioning in resource-constrained environments. Prioritizing universal accessibility despite connectivity disparities [2], EdgePrompt's deployment architecture implements optimized edge runtime for lightweight LLMs with minimal resource footprint, consistent environment, offline storage, and validation protocols that maintain safety constraints [1]. This enables operation in environments with limited or unreliable internet connectivity, making AI-enhanced education accessible in remote regions.

- What performance optimization techniques apply across diverse hardware environments?

**Answer:** EdgePrompt applies performance optimization through its edge deployment architecture that includes optimized runtime for lightweight LLMs (such as Llama 3.2 3B), minimized resource footprint, and consistent model behavior across different environments [1]. This approach ensures that the system can operate effectively on the hardware available in resource-constrained settings, while maintaining the safety and educational effectiveness of the AI tools.

- Why will offline capability remain relevant despite infrastructure improvements?

**Answer:** Offline capability remains relevant because connectivity disparities persist despite infrastructure advances. Ensuring AI benefits aren't limited by connectivity issues [2], offline capabilities democratize educational value across all environments, preventing exclusion of resource-constrained settings from AI-enhanced learning regardless of global technological advancement patterns. EdgePrompt's focus on local content generation and evaluation with optional cloud services [1] addresses this ongoing need for offline capability.

## 3. Implementation Approach

### Future-Proof Design Principles
- How does the architecture anticipate continual evolution of AI capabilities?

**Answer:** The architecture anticipates AI evolution through neural-symbolic modularity and compositionality that separates knowledge representation from specific implementations, creating abstraction layers that insulate educational workflows from model-specific changes [2]. EdgePrompt implements this forward-looking approach through rigidly structured question generation and validation pipelines where cloud and edge LLMs perform distinct operational roles within a framework that focuses on prompt engineering rather than model modification [1,7]. This separation enables the system to adapt to advancing capabilities without requiring complete redesign, as structured prompting establishes safety mechanisms that remain effective even as underlying model architectures evolve in sophistication and capability [7]. By addressing the requirements specification rather than tying guardrails to specific model implementations, the framework creates a sustainable path for AI integration that can scale alongside increasing model sophistication while maintaining consistent safety principles across generations of AI development.

- What abstraction layers insulate educational workflows from model-specific changes?

**Answer:** The abstraction layers include: (1) a goal specification layer where educational objectives are defined independent of implementation; (2) a perception-action mapping layer that connects learning observations to appropriate responses regardless of underlying model; and (3) a neural-symbolic integration layer that maintains stable knowledge representation despite changing model architectures [2]. EdgePrompt implements these through its template processing, validation framework, and integration architecture components [1] that insulate educational workflows from changes in the underlying models.

- Why will the separation of prompt engineering from educational interfaces remain essential?

**Answer:** Separation of prompt engineering from educational interfaces remains essential because it allows technical specialists to optimize AI interaction patterns while educators focus on pedagogical design. This separation creates a perceptual augmentation where AI handles the technical complexity of prompt optimization while teachers maintain control over educational content and objectives [2]. EdgePrompt's implementation separates the technical prompt development from the teacher-facing interfaces [1], maintaining this essential division of responsibility.

### Cross-Cultural Safety Adaptability
- How do content safety boundaries adapt to diverse cultural and linguistic contexts?

**Answer:** Safety boundaries adapt through recognition that effective AI integration must accommodate varied cultural and linguistic norms while maintaining core protections—a challenge that requires both technical flexibility and cultural sensitivity [2,7]. EdgePrompt addresses this through its structured approach that targets specific educational contexts (like Grade 5 language instruction in Indonesia) while implementing template-based validation that permits regional customization without compromising fundamental safety protocols [1]. Research demonstrates that cultural prompting techniques can effectively reduce bias in LLMs—although effectiveness varies across contexts—enabling guardrails to maintain consistent validation processes while accommodating culture-specific adjustments to safety definitions and educational appropriateness [7]. This adaptability is particularly crucial in educational settings where content must simultaneously respect local cultural values while supporting knowledge building across diverse communities through culturally responsive pedagogical approaches that leverage rather than suppress linguistic diversity.

- What mechanisms enable appropriate localization without compromising core safety?

**Answer:** Localization mechanisms include adapting content while preserving safety principles. Teachers can identify accessibility obstacles based on student knowledge [2] and support multilingual translanguaging [2]. EdgePrompt implements these mechanisms through its structured prompt templates and multi-stage validation that can be adapted to different cultural and linguistic contexts while maintaining consistent safety principles [1].

- Why must safety verification respect educational norms across different regions?

**Answer:** Safety verification must respect regional norms because effective learning is culturally embedded. The framework enables using AI for various text engineering and language scaffolds [2] appropriate to specific contexts. EdgePrompt's implementation for Indonesia's 3T regions [1] demonstrates this respect for regional educational norms while maintaining fundamental safety protections that apply across different cultural contexts.

### Universal Deployment Strategy
- How does the system scale across different educational environments and infrastructure constraints?

**Answer:** The system scales through flexible principles rather than rigid technological prescriptions. Recognizing varying contexts from teacher-focused planning tools [2] to advanced implementations, the framework focuses on enhancing rather than replacing cognitive development without mandating specific technical approaches, enabling adaptation across diverse educational environments. EdgePrompt's edge deployment architecture with optimized runtime, offline storage, and validation protocols [1] ensures that the system can scale across environments with different infrastructure constraints.

- What implementation patterns enable adaptation to varied regional requirements?

**Answer:** Adaptive implementation patterns include teacher autonomy and contextual decision-making. Emphasizing alignment with students' developmental readiness [2], the framework guides teachers in identifying region-specific accessibility obstacles [2]. EdgePrompt's implementation targets specific regional contexts like Indonesia's 3T regions [1] while maintaining a flexible architecture that can be adapted to different regional requirements through its structured template approach.

- Why does starting with regional pilots strengthen rather than limit the framework's universal application?

**Answer:** Regional pilots strengthen universal application by generating diverse implementation experiences for global deployment. The iterative, learning-oriented approach [2] builds understanding through practice across different contexts. EdgePrompt's initial deployment targeting Grade 5 language instruction in Indonesia's 3T regions [1] exemplifies this approach, using specific regional implementation to develop a more robust and adaptable global framework.

## 4. Scientific Contribution & Educational Innovation

### Novel Educational AI Safety Paradigm
- How does EdgePrompt advance the field of educational AI safety beyond current approaches?

**Answer:** EdgePrompt advances educational AI safety by integrating neural-symbolic computing with prompt engineering principles to create a comprehensive framework that maintains explainability while maximizing AI capabilities, embedding safety directly into the interaction model between humans and AI rather than treating it as an external constraint [2,3,4]. The framework specifically addresses the challenges of ensuring robust content safety in offline settings, enabling accurate assessment with edge-based validation, and maintaining consistency in distributed evaluation processes [1], creating a transformative educational safety paradigm that combines theoretical foundations with practical implementation strategies.

- What unique contribution does structured prompting make to safe AI deployment in education?

**Answer:** Structured prompting uniquely contributes to safe educational AI by simultaneously enhancing learning outcomes and maintaining safety guardrails through a principled approach that integrates neural-symbolic reasoning with an iterative learning process that fosters critical thinking while democratizing access to advanced AI capabilities [2,4]. EdgePrompt's implementation of structured prompting through templates embedding safety constraints with formal validation rules and multi-stage checks with explicit boundary conditions [1] creates accountability through transparency, enabling systems where safety emerges naturally from educationally-sound interaction patterns.

The Code Prompting research demonstrates that structured prompting contributes uniquely to safe AI deployment by providing abstraction and simplification, explicit task reduction, disambiguation, and explicit templates for reasoning [6]. This approach makes AI reasoning more transparent and predictable by transforming complex problems into smaller, verifiable steps that are easier to validate, which is particularly valuable in educational contexts where safety and reliability are paramount [6].

- Why does the neural-symbolic approach offer advantages over pure symbolic or neural methods?

**Answer:** Neural-symbolic integration offers decisive advantages by combining neural networks' robust learning capabilities with symbolic systems' interpretability and reasoning power, creating architectures that simultaneously leverage pattern recognition strengths while maintaining the explainability and logical consistency essential for educational contexts [2,4]. While EdgePrompt draws inspiration from neural-symbolic principles, its current implementation focuses on structured prompt engineering without formal symbolic reasoning components [1], demonstrating effective guardrails through prompt engineering while maintaining the potential for future neural-symbolic integration.

The Code Prompting method demonstrates specific advantages of neural-symbolic approaches by showing how they can overcome limitations of pure neural methods. The research shows that while current prompting methods using natural language can cause imperfect task reduction and confusion due to ambiguity, code prompting provides structured, unambiguous representations with explicit computation flows that make reasoning more accurate [6]. This approach helps LLMs plan the whole process of solution ahead, reducing complex problems into well-defined steps that are easier to validate [6].

### Bridging Educational Technology Divides
- How does this framework specifically address longstanding inequities in educational technology?

**Answer:** EdgePrompt addresses educational inequities by combining universal accessibility with enhancement of fundamental learning processes, explicitly prioritizing access in resource-constrained environments while ensuring AI tools enhance rather than replace critical cognitive development [2,3,4]. The framework specifically targets Indonesia's remote 3T regions with mostly unreliable internet connectivity, where cloud-based solutions are impractical for classroom activities [1], transforming what could be another digital divide into an opportunity for educational leveling through offline-capable AI tools.

- What mechanisms ensure technology serves pedagogy rather than constraining it?

**Answer:** The framework maintains pedagogy's primacy over technology through mechanisms that clearly distinguish productive from counterproductive AI uses, positioning technology as augmenting rather than replacing educational practices and human expertise while supporting, not circumventing, the productive struggle essential to learning [2,3,4]. EdgePrompt's implementation includes teacher-driven content generation with explicit learning objective mapping and formal rubric development [1], ensuring that technology serves pedagogical needs rather than constraining educational approaches.

- Why does this approach offer a more sustainable path to AI integration than alternatives?

**Answer:** This approach achieves greater sustainability by building on fundamental educational principles rather than specific technological implementations, establishing an adaptable framework capable of evolving alongside both AI capabilities and pedagogical understanding [2,3,4]. EdgePrompt's focus on structured prompt engineering rather than model modification [1] creates a more sustainable approach that can adapt to evolving LLM capabilities while maintaining consistent safety and educational principles across different implementations.

### Adaptable Educational Assessment
- How does multi-stage validation enhance rather than replace teacher assessment?

**Answer:** Multi-stage validation enhances teacher assessment by providing complementary data streams while preserving the essential role of teacher judgment, creating a hybrid evaluation system where AI tools generate supporting insights but educators retain final evaluative authority based on their contextual understanding of student needs [2,3,4]. EdgePrompt implements this through its student answer evaluation system with edge validation, evaluation logic, and teacher review system [1], providing structured assessment support while maintaining teacher autonomy in the evaluation process.

- What educational measurement principles guide the automated feedback systems?

**Answer:** Automated feedback systems operate on principles that maintain the distinction between productive and counterproductive struggle, providing scaffolding for student learning while requiring critical engagement with AI-generated responses, fostering an iterative improvement process rather than simply delivering answers [2,3,4]. EdgePrompt's implementation includes evaluation logic that applies rubrics through transformation, calibrated scoring functions, and constraint satisfaction verification [1], maintaining these educational measurement principles in its automated feedback approach.

- Why will this approach remain pedagogically sound across evolving educational paradigms?

**Answer:** This approach maintains pedagogical relevance across paradigm shifts by focusing on fundamental learning processes rather than specific techniques, building around universal principles of productive struggle and iterative improvement that transcend particular educational philosophies or technological implementations [2,3,4]. EdgePrompt's emphasis on structured prompting and multi-stage validation establishes assessment principles that adapt to evolving educational contexts while preserving their core effectiveness in supporting student learning [1]. By following systematic development processes with rigorous testing methodologies—including statistical certification with confidence bounds and Pareto front optimization for balancing multiple requirements—the framework can verify its effectiveness across different educational contexts while evolving alongside changing pedagogical approaches [7]. This evidence-based, principled approach creates guardrails that function as enduring educational scaffolds rather than rigid technological constraints, enabling continual refinement without sacrificing fundamental learning principles.

## 5. Technical Architecture & Implementation

### Enduring Security Model
- How does prompt constraint enforcement create model-agnostic safety boundaries?

**Answer:** Prompt constraints create model-agnostic safety through principled integration of neural learning, efficient inference, and symbolic interpretation [2]. EdgePrompt implements this through structured prompting with templates embedding safety constraints and formal validation rules [1], establishing safety at the knowledge representation rather than implementation level and maintaining consistent boundaries across model architectures.

The Code Prompting research offers insight into how prompt constraint enforcement creates model-agnostic safety by showing that transforming problems into structured code provides explicit task reduction and disambiguation that works reliably across different models [6]. The approach creates robust safety boundaries by leveraging the unambiguous nature of programming languages and formal task decomposition, which reduces confusion and ensures consistent behavior even when tasks increase in complexity [6].

- What validation principles will remain essential regardless of future model capabilities?

**Answer:** Essential validation principles include sound mapping between symbolic rules and neural networks and verification of proper symbolic knowledge implementation [2]. EdgePrompt operationalizes these through multi-stage validation with sequential prompt-based checks and explicit boundary conditions [1], providing validation foundations that transcend specific architectures and maintain safety and explainability across model evolution.

- Why must security boundaries evolve alongside but remain independent from model architecture?

**Answer:** Security boundaries must evolve independently because explainability and accountability requirements [2] persist regardless of architectural advances. EdgePrompt's implementation of edge deployment compatibility with optimized mechanisms for operation in low-resource environments [1] enables independence between security boundaries and specific implementations, allowing incorporation of new architectures while maintaining consistent safety properties.

### Educational Workflow Components
- How do teacher and student interfaces universally support diverse educational contexts?

**Answer:** Interfaces support diverse contexts through core pedagogical principles rather than specific technological approaches. EdgePrompt implements teacher-driven content generation with question template definition, rubric formalization, and grading template generation [1], enabling interfaces that can adapt to different educational systems worldwide while maintaining consistent operational principles.

- What assessment patterns remain consistent across different curricula and languages?

**Answer:** Consistent assessment patterns evaluate productive versus counterproductive struggle balance. EdgePrompt implements student answer evaluation with question-answer verification, staged response validation, and boundary enforcement [1], focusing on fundamental learning processes applicable across contexts while adapting to specific curricula and languages.

- Why must educational workflows dictate technical implementation, not the reverse?

**Answer:** Educational workflows must drive technical implementation because effective AI integration enhances rather than replaces proven practices [2]. EdgePrompt's methodology prioritizes prompt development and framework development that support educational objectives [1], ensuring technology serves pedagogy rather than forcing educational conformity to technical limitations.

### Resource-Adaptive Implementation
- How does the architecture scale from minimal to advanced infrastructure environments?

**Answer:** The architecture scales through structured prompting approaches functioning across technology sophistication levels. EdgePrompt's deployment architecture implements optimized edge runtime for lightweight LLMs with minimal resource footprint [1], enabling scaling from environments with basic infrastructure to those supporting more advanced implementations.

- What graceful degradation ensures educational continuity across varying resource constraints?

**Answer:** Graceful degradation comes through hierarchical implementation approaches maintaining educational value at all technology levels. EdgePrompt enables teachers to generate and evaluate educational content locally while keeping cloud services optional for complex tasks [1], ensuring educational continuity despite varying resource constraints.

- Why does prioritizing resource efficiency strengthen rather than compromise educational impact?

**Answer:** Resource efficiency strengthens impact by extending AI benefits to all learners regardless of environment. EdgePrompt specifically addresses the challenges of resource-constrained environments like Indonesia's 3T regions [1], maximizing reach and impact while ensuring AI-enhanced education advances equity rather than exacerbating existing resource-based educational disparities.

## References

[1] Syah, R. A., Haryanto, C. Y., Lomempow, E., Malik, K., & Putra, I. (2025). EdgePrompt: Engineering Guardrail Techniques for Offline LLMs in K-12 Educational Settings. *Companion Proceedings of the ACM Web Conference 2025*.

[2] Garcez, A., Gori, M., Lamb, L. C., Serafini, L., Spranger, M., & Tran, S. N. (2019). Neural-symbolic computing: An effective methodology for principled integration of machine learning and reasoning. *Journal of Applied Logics*, 1-21.

[3] Holstein, K., Aleven, V., & Rummel, N. (2020). A conceptual framework for human–AI hybrid adaptivity in education. In *International Conference on Artificial Intelligence in Education* (pp. 240-254). Springer.

[4] Hu, L. K., & Lee, D. C. (2024). Prompt engineering for critical thinking and equity in general education. *American Research Journal of Humanities and Social Sciences*, 10(1), 122-129.

[5] AI for Education & Student Achievement Partners. (2024). *Guide to integrating generative AI for deeper literacy learning*.

[6] Hu, Y., Yang, H., Lin, Z., & Zhang, M. (2023). Code Prompting: a Neural Symbolic Method for Complex Reasoning in Large Language Models. *arXiv preprint arXiv:2305.18507v2*.

[7] Dong, Y., Mu, R., Jin, G., Qi, Y., Hu, J., Zhao, X., Meng, J., Ruan, W., & Huang, X. (2024). Building Guardrails for Large Language Models. *arXiv preprint arXiv:2402.01822v2*.

================
File: frontend/src/components/project/ProjectView.tsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { Project, Material } from '../../types';
import { api } from '../../services/api';
import { ProjectEditForm } from './ProjectEditForm';
import { useProject } from '../../contexts/ProjectContext';
import { MaterialDetailView } from '../teacher/MaterialDetailView';

interface Props {
  project: Project;
  onUpdate: () => void;
}

export const ProjectView: React.FC<Props> = ({ project, onUpdate }) => {
  const { promptTemplates } = useProject();
  const [isEditing, setIsEditing] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [materials, setMaterials] = useState<Material[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedMaterialId, setSelectedMaterialId] = useState<string | null>(null);

  // Extract loadMaterials as a separate function outside useEffect
  const loadMaterials = useCallback(async () => {
    if (!project.id) return;
    
    setIsLoading(true);
    try {
      const projectMaterials = await api.getMaterials(project.id);
      setMaterials(projectMaterials);
    } catch (error) {
      console.error('Error loading materials:', error);
    } finally {
      setIsLoading(false);
    }
  }, [project.id]);

  // Load materials when the component mounts or project changes
  useEffect(() => {
    loadMaterials();
  }, [loadMaterials]);

  // Get the current template
  const currentTemplate = project.promptTemplateId ? 
    promptTemplates.find(t => t.id === project.promptTemplateId) : 
    null;

  const configuration = typeof project.configuration === 'string' 
    ? JSON.parse(project.configuration) 
    : project.configuration;

  const handleDelete = async () => {
    if (!window.confirm('Are you sure you want to delete this project?')) {
      return;
    }

    setIsDeleting(true);
    try {
      await api.deleteProject(project.id);
      onUpdate();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete project');
    } finally {
      setIsDeleting(false);
    }
  };

  // If a material is selected, show its detail view
  if (selectedMaterialId) {
    return (
      <MaterialDetailView 
        materialId={selectedMaterialId} 
        onBack={() => setSelectedMaterialId(null)} 
        onRefresh={() => loadMaterials()}
      />
    );
  }

  return (
    <div className="card">
      <div className="card-header">
        <div className="d-flex justify-content-between align-items-center">
          <div>
            <h5 className="mb-0">{project.name}</h5>
            <small className="text-muted">{project.description}</small>
          </div>
          <div>
            <button 
              className="btn btn-sm btn-outline-primary me-2"
              onClick={() => setIsEditing(true)}
            >
              <i className="bi bi-pencil me-1"></i>
            </button>
            <button 
              className="btn btn-sm btn-outline-danger"
              onClick={handleDelete}
              disabled={isDeleting}
            >
              <i className="bi bi-trash"></i>
            </button>
          </div>
        </div>
      </div>

      <div className="list-group list-group-flush">
        <div className="list-group-item">
          <div className="row">
            <div className="col-xxl-4 mb-3">
              <small className="text-muted d-block">Model</small>
              <strong>{project.modelName}</strong>
            </div>
            <div className="col-xxl-4 mb-3">
              <small className="text-muted d-block">Language</small>
              <strong>{configuration.language}</strong>
            </div>
            <div className="col-xxl-4 mb-3">
              <small className="text-muted d-block">Subject</small>
              <strong>{configuration.subject}</strong>
            </div>
          </div>
        </div>

        <div className="list-group-item">
          <div className="row">
            <div className="col-xxl-6 mb-3">
              <small className="text-muted d-block">Grade Level</small>
              <strong>{configuration.gradeLevel}</strong>
            </div>
            <div className="col-xxl-6 mb-3">
              <small className="text-muted d-block">Prompt Template</small>
              {currentTemplate ? (
                <div>
                  <strong>{currentTemplate.name}</strong>
                  <small className="text-muted ms-2">v{currentTemplate.version}</small>
                </div>
              ) : (
                <div className="text-danger">
                  <i className="bi bi-exclamation-triangle me-1"></i>
                  Template not found
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {error && (
        <div className="card-footer">
          <div className="alert alert-danger mb-0">
            <i className="bi bi-exclamation-triangle me-2"></i>
            {error}
          </div>
        </div>
      )}

      {isEditing && (
        <ProjectEditForm
          project={project}
          onClose={() => setIsEditing(false)}
          onSuccess={() => {
            setIsEditing(false);
            onUpdate();
          }}
        />
      )}

      <div className="card mt-4">
        <div className="card-header">
          <h5 className="mb-0">Materials</h5>
        </div>
        <div className="card-body">
          {isLoading ? (
            <div className="text-center py-3">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
              <p className="mt-2">Loading materials...</p>
            </div>
          ) : materials.length === 0 ? (
            <div className="text-center py-3">
              <p className="text-muted">No materials found for this project.</p>
              <button 
                className="btn btn-outline-primary"
                onClick={() => window.location.hash = '#content-generator'}
              >
                <i className="bi bi-plus-circle me-2"></i>
                Add Material
              </button>
            </div>
          ) : (
            <div className="list-group">
              {materials.map(material => (
                <div 
                  key={material.id} 
                  className="list-group-item list-group-item-action"
                  onClick={() => setSelectedMaterialId(material.id)}
                  style={{ cursor: 'pointer' }}
                >
                  <div className="d-flex w-100 justify-content-between">
                    <h5 className="mb-1">{material.title}</h5>
                    <small>
                      <span className={`badge bg-${getBadgeColor(material.status)}`}>
                        {material.status}
                      </span>
                    </small>
                  </div>
                  <p className="mb-1 text-truncate">{material.focusArea}</p>
                  <small className="text-muted">
                    Word count: {material.metadata?.wordCount || 'N/A'} • 
                    Learning objectives: {material.metadata?.learningObjectives?.length || 0}
                  </small>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

function getBadgeColor(status: string): string {
  switch (status) {
    case 'completed': return 'success';
    case 'pending': return 'warning';
    case 'processing': return 'primary';
    case 'error': return 'danger';
    default: return 'secondary';
  }
}

================
File: frontend/src/components/teacher/ContentGenerator.tsx
================
import React, { useState, useEffect } from 'react';
import { Template, ValidationRule, MaterialSource, ContentTemplate } from '../../../../backend/src/types';
import { MaterialUploader } from './MaterialUploader';
import { api } from '../../services/api';
import { useProject } from '../../contexts/ProjectContext';
import { ProjectSelectionModal } from '../common/ProjectSelectionModal';
import { SimplifiedMaterialUploader } from './SimplifiedMaterialUploader';

interface Props {
  onGenerate: (template: Template, rules: ValidationRule) => void;
  projectId?: string;
}

export const ContentGenerator: React.FC<Props> = ({ onGenerate, projectId }) => {
  const { activeProject, promptTemplates } = useProject();
  const [activeTab, setActiveTab] = useState<'teacher' | 'student'>('teacher');
  const [template, setTemplate] = useState<Template>({
    pattern: '',
    constraints: []
  });
  const [uploadedContent, setUploadedContent] = useState<{
    id?: string;
    content: string;
    objectives: string[];
    templates: ContentTemplate[];
    wordCount: number;
    useSourceLanguage?: boolean;
  } | null>(null);
  const [generatedQuestionId, setGeneratedQuestionId] = useState<string | null>(null);
  const [studentAnswer, setStudentAnswer] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [feedback, setFeedback] = useState<{
    id?: string;
    score?: number;
    feedback?: string;
    error?: string;
  } | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showProjectWarning, setShowProjectWarning] = useState(!projectId && !activeProject);
  const [showProjectModal, setShowProjectModal] = useState(false);

  useEffect(() => {
    setShowProjectWarning(!projectId && !activeProject);
  }, [projectId, activeProject]);

  const handleMaterialLoad = (material: MaterialSource) => {
    if (!material.id) {
      console.warn('Material loaded without an ID');
    }
    
    setUploadedContent({
      id: material.id,
      content: material.content,
      objectives: material.metadata.learningObjectives || [],
      templates: material.metadata.templates || [],
      wordCount: material.content.split(/\s+/).length,
      useSourceLanguage: material.metadata.useSourceLanguage || false
    });

    if (material.metadata.templates?.length) {
      const firstTemplate = material.metadata.templates[0];
      setTemplate({
        pattern: firstTemplate.pattern,
        constraints: firstTemplate.constraints
      });
    }
  };

  const handleAnswerSubmit = async () => {
    if (!studentAnswer.trim() || !generatedQuestionId) {
      return;
    }

    setIsSubmitting(true);
    setFeedback(null);

    try {
      const validationResult = await api.validateResponse(
        generatedQuestionId,
        studentAnswer
      );

      const responseData = await api.saveResponse({
        questionId: generatedQuestionId,
        response: studentAnswer,
        score: validationResult.score,
        feedback: validationResult.feedback,
        metadata: {
          isValid: validationResult.isValid
        }
      });

      setFeedback({
        id: responseData.id,
        ...validationResult
      });
    } catch (error) {
      setFeedback({
        error: error instanceof Error ? error.message : 'Failed to validate answer'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleGenerateQuestion = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!template.pattern || !uploadedContent) {
      alert('Please select or enter a question template and upload material');
      return;
    }

    if (!uploadedContent.id) {
      alert('Material ID is missing. Please re-upload the material.');
      return;
    }

    setIsGenerating(true);

    try {
      // Generate question - backend will save it directly
      const generatedQuestion = await api.generateQuestion(
        uploadedContent.id,
        activeProject?.promptTemplateId || promptTemplates[0]?.id,
        0,  // First template
        { useSourceLanguage: uploadedContent.useSourceLanguage }
      );
      
      // Store the question ID for validation purposes
      setGeneratedQuestionId(generatedQuestion.id);
      
      // Update the UI with the generated question
      setTemplate({
        ...template,
        pattern: generatedQuestion.question
      });

      setActiveTab('student');
    } catch (error) {
      console.error('Generation error:', error);
      alert('Failed to generate question. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleUploadClick = () => {
    if (!projectId && !activeProject) {
      setShowProjectModal(true);
    }
  };

  return (
    <div>
      {showProjectWarning && (
        <div className="alert alert-warning mb-4">
          <i className="bi bi-exclamation-triangle-fill me-2"></i>
          <strong>No project selected.</strong> Please select a project from the dropdown in the navigation bar before uploading materials.
        </div>
      )}

      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'teacher' ? 'active' : ''}`}
            onClick={() => setActiveTab('teacher')}
            style={{ 
              backgroundColor: activeTab === 'teacher' ? '#0d6efd' : 'transparent',
              color: activeTab === 'teacher' ? 'white' : '#0d6efd'
            }}
          >
            <i className="bi bi-person-workspace"></i> Teacher Interface
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'student' ? 'active' : ''}`}
            onClick={() => setActiveTab('student')}
            style={{ 
              backgroundColor: activeTab === 'student' ? '#198754' : 'transparent',
              color: activeTab === 'student' ? 'white' : '#198754'
            }}
            disabled={!uploadedContent}
          >
            <i className="bi bi-person-video3"></i> Student Interface
          </button>
        </li>
      </ul>

      {activeTab === 'teacher' && (
        <>
          <SimplifiedMaterialUploader 
            onMaterialLoad={handleMaterialLoad} 
            projectId={projectId || (activeProject ? activeProject.id : undefined)}
          />
          
          {uploadedContent && (
            <>
              <div className="card mb-4">
                <div className="card-header d-flex justify-content-between align-items-center">
                  <h5 className="mb-0">
                    <i className="bi bi-file-text"></i> Content Analysis
                  </h5>
                  <span className="badge bg-secondary">
                    {uploadedContent.wordCount} words
                  </span>
                </div>
                
                <div className="card-body">
                  <div className="row">
                    <div className="col-lg-6">
                      <div className="mb-3">
                        <h6><i className="bi bi-file-text"></i> Content Preview</h6>
                        <div className="border rounded p-3 bg-light" 
                             style={{ height: '300px', overflow: 'auto' }}>
                          <pre style={{ whiteSpace: 'pre-wrap', fontSize: '0.9em' }}>
                            {uploadedContent.content}
                          </pre>
                        </div>
                      </div>
                    </div>

                    <div className="col-lg-6">
                      <div className="mb-3">
                        <h6><i className="bi bi-bullseye"></i> Learning Objectives</h6>
                        <div className="list-group mb-3" style={{ maxHeight: '120px', overflow: 'auto' }}>
                          {uploadedContent.objectives.map((objective, index) => (
                            <div key={index} className="list-group-item py-2">
                              {objective}
                            </div>
                          ))}
                        </div>

                        <h6><i className="bi bi-list-check"></i> Question Templates</h6>
                        <div className="list-group" style={{ maxHeight: '150px', overflow: 'auto' }}>
                          {uploadedContent.templates.map((tmpl, index) => (
                            <button
                              key={index}
                              className={`list-group-item list-group-item-action ${
                                template.pattern === tmpl.pattern ? 'active' : ''
                              }`}
                              onClick={() => setTemplate({
                                pattern: tmpl.pattern,
                                constraints: tmpl.constraints
                              })}
                            >
                              <div className="mb-1 fw-bold">{tmpl.pattern}</div>
                              <small className="d-block text-muted">
                                {tmpl.targetGrade} · {tmpl.subject}
                              </small>
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="card">
                <div className="card-header bg-primary text-white">
                  <h5 className="mb-0">
                    <i className="bi bi-gear"></i> Question Generation
                  </h5>
                </div>
                <div className="card-body">
                  <form onSubmit={handleGenerateQuestion}>
                    <div className="row">
                      <div className="col-md-6">
                        <div className="mb-3">
                          <label className="form-label">
                            <i className="bi bi-pencil-square"></i> Selected Template
                          </label>
                          <textarea
                            className="form-control"
                            rows={3}
                            value={template.pattern}
                            onChange={(e) => setTemplate({...template, pattern: e.target.value})}
                            placeholder="Select a template from above or write your own..."
                            required
                          />
                        </div>

                        <div className="mb-3">
                          <label className="form-label">
                            <i className="bi bi-list-check"></i> Constraints
                          </label>
                          <div className="list-group">
                            {template.constraints.map((constraint, index) => (
                              <div key={index} className="list-group-item">
                                {constraint}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="text-end">
                      <button 
                        type="submit" 
                        className="btn btn-primary"
                        disabled={isGenerating || !template.pattern}
                      >
                        {isGenerating ? (
                          <>
                            <span className="spinner-border spinner-border-sm me-2" />
                            Generating...
                          </>
                        ) : (
                          <>
                            <i className="bi bi-lightning-charge"></i> Generate Question
                          </>
                        )}
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </>
          )}
        </>
      )}

      {activeTab === 'student' && (
        <div className="card">
          <div className="card-header bg-success text-white">
            <h5 className="mb-0">
              <i className="bi bi-pencil"></i> Answer Question
            </h5>
          </div>
          <div className="card-body p-4">
            <div className="mb-4">
              <label className="form-label fw-bold">Question:</label>
              <div className="p-4 bg-light rounded border">
                {template.pattern || 'No question selected'}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label fw-bold">Your Answer:</label>
              <textarea
                className="form-control"
                rows={6}
                value={studentAnswer}
                onChange={(e) => setStudentAnswer(e.target.value)}
                placeholder="Type your answer here..."
              />
            </div>

            <div className="d-flex justify-content-between align-items-start gap-3">
              <button 
                className="btn btn-success btn-lg"
                onClick={handleAnswerSubmit}
                disabled={isSubmitting || !studentAnswer.trim()}
              >
                {isSubmitting ? (
                  <>
                    <span className="spinner-border spinner-border-sm me-2" />
                    Submitting...
                  </>
                ) : (
                  <>
                    <i className="bi bi-check-circle"></i> Submit Answer
                  </>
                )}
              </button>

              {feedback && (
                <div className={`alert ${feedback.error ? 'alert-danger' : 'alert-success'} flex-grow-1 mb-0 p-3`}>
                  {feedback.error ? (
                    <><i className="bi bi-exclamation-circle me-2"></i> {feedback.error}</>
                  ) : (
                    <>
                      <h6 className="mb-2"><strong>Score: {feedback.score}%</strong></h6>
                      <p className="mb-0">{feedback.feedback}</p>
                    </>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      <ProjectSelectionModal 
        isOpen={showProjectModal} 
        onClose={() => setShowProjectModal(false)} 
      />
    </div>
  );
};

================
File: frontend/src/types/index.ts
================
export * from '@edge-prompt/common/types/index.js';

// Any frontend-specific types would go here

export interface Project {
  id: string;
  name: string;
  description: string;
  modelName: string;
  promptTemplateId: string;
  configuration: string | ProjectConfiguration;
  createdAt: string;
}

export interface ProjectConfiguration {
  language: string;
  gradeLevel: string;
  subject: string;
}

export interface PromptTemplate {
  id: string;
  name: string;
  version: string;
  type: 'question_generation' | 'validation' | 'objective_extraction';
  content: string;
  description: string;
  createdAt: string;
}

export interface Template {
  pattern: string;
  constraints: string[];
}

export interface ValidationRule {
  criteria: string;
  parameters: {
    threshold: number;
    boundaries: {
      min: number;
      max: number;
    };
  };
}

export interface ContentTemplate {
  pattern: string;
  constraints: string[];
  source: any;
  targetGrade: string;
  subject: string;
  learningObjectives: string[];
}

export interface Material {
  id: string;
  projectId: string;
  projectName: string;
  title: string;
  content: string;
  focusArea: string;
  filePath?: string;
  fileType?: string;
  fileSize?: number;
  status: string;
  metadata?: {
    learningObjectives?: string[];
    templates?: ContentTemplate[];
    wordCount?: number;
    processedAt?: string;
    [key: string]: any;
  };
  createdAt: string;
}

================
File: README.md
================
# EdgePrompt

EdgePrompt is a secure framework for implementing pragmatic guardrails for Large Language Models (LLMs) in K-12 educational settings through structured prompting, based on a backend-first architecture.

## Features

- 🔒 Secure backend-focused architecture with proper data isolation
- 🚀 Edge-first design for offline LLM usage
- 📚 Support for multiple file formats (PDF, Word, Markdown, Text)
- 🌍 Multi-language support with automatic language detection
- 🎯 Focus area-driven content analysis
- 📊 Structured prompt templates with database persistence
- 📝 Backend-managed question generation with rubrics
- ✅ Multi-stage answer validation system

## Architecture

EdgePrompt follows a secure architecture where:

1. **Backend owns all sensitive logic**:
   - All LLM interactions happen on the backend
   - Content processing and validation are isolated from the frontend
   - Template management is database-driven
   - Multi-stage validation occurs server-side

2. **Frontend handles presentation only**:
   - User interface components for material management
   - Project and template selection
   - Question display and student responses
   - Feedback presentation

This design ensures:
- No prompt injection vulnerabilities
- Proper data isolation and security
- Consistent validation across all content
- Reliable prompt template management

## Getting Started

### Prerequisites

- Node.js 18+
- LM Studio running locally with a supported model
- SQLite (included automatically)

### Installation

1. Clone the repository:
```bash
git clone https://github.com/build-club-ai-indonesia/edge-prompt
cd edge-prompt
```

2. Install all dependencies and run database migrations:
```bash
# Install all dependencies and set up database
npm install
npm run build:common
```

3. Start LM Studio and load your preferred model

4. Start the development servers:
```bash
# Start both backend and frontend
./run.sh

# You can customize the LM Studio URL if running on another machine:
./run.sh --lm-studio-url=http://192.168.68.114:1234
```

### Additional Options

- If you encounter issues or need to customize the setup:
  The run.sh script automatically:
  - Detects if you're running in WSL and finds the Windows host IP
  - Sets up the LM Studio URL in backend/.env
  - Installs dependencies and builds packages
  - Manages process cleanup when stopping the server

```bash
# If you need to run parts of the system manually:
cd backend && npm run dev  # Run only the backend
cd frontend && npm run dev # Run only the frontend

# Run database migrations manually if needed
cd backend && npm run migrate
```

## Usage

1. **Create a Project**
   - Create a project with a name and description
   - Select the model being used in LM Studio
   - Choose a prompt template for content generation

2. **Upload Learning Material**
   - Select a file (PDF, Word, Markdown, or Text)
   - Specify the focus area for content analysis
   - Optionally enable source language matching
   - Add optional metadata (title, subject, grade level, chapter)

3. **Content Analysis & Question Generation**
   - View extracted learning objectives
   - Preview suggested question templates
   - Generate questions from templates
   - Review automatically generated rubrics

4. **Student Interface**
   - Answer generated questions
   - Submit responses for validation
   - Receive feedback based on the rubric
   - View scores and detailed explanations

## Database Schema

EdgePrompt uses SQLite for data persistence with the following key tables:

- **projects**: Stores project information and configuration
- **prompt_templates**: Contains prompt templates for different generation tasks
- **materials**: Stores uploaded learning materials and metadata
- **generated_questions**: Contains questions generated from materials
- **responses**: Stores student responses and validation results

## Directory Structure

```
edge-prompt/
├── backend/
│   ├── src/
│   │   ├── db/
│   │   │   ├── migrations/       # Database migrations
│   │   │   ├── schema.sql        # Database schema
│   │   │   └── index.ts          # Database access methods
│   │   ├── services/
│   │   │   ├── DatabaseService.ts   # Database operations
│   │   │   ├── LMStudioService.ts   # LLM integration
│   │   │   ├── MaterialProcessor.ts # Content processing
│   │   │   ├── StorageService.ts    # File management
│   │   │   └── ValidationService.ts # Answer validation
│   │   └── index.ts              # API endpoints
└── frontend/
    └── src/
        ├── components/
        │   ├── common/           # Common UI components
        │   ├── project/          # Project management
        │   ├── prompt/           # Prompt template UI
        │   ├── teacher/          # Teacher interfaces
        │   └── student/          # Student interfaces
        ├── contexts/             # React contexts
        ├── services/             # API client services
        └── types/                # TypeScript type definitions
```

## Features in Detail

### Content Processing
- Secure file upload and storage
- Automatic text extraction from multiple formats
- Focus area-driven learning objective extraction
- Multi-language support for content generation

### Question Generation
- Template-based question creation
- Backend-managed rubric generation
- Context-aware question formulation
- Automatic database persistence

### Validation
- Multi-stage answer validation
- Secure rubric-based assessment
- Detailed feedback generation
- Language-matched response evaluation

## Documentation

For detailed project guidelines, architecture documentation, and implementation considerations, see the [documentation folder](./docs/README.md).

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- [BuildClub.ai](https://www.buildclub.ai/) - Training campus for AI learners
- [LM Studio](https://lmstudio.ai/) - Local LLM runtime
- Contributors and maintainers

## Research

For more details about the methodology and research behind EdgePrompt, please refer to our paper:
[EdgePrompt: Engineering Guardrails for Offline LLMs in K-12 Educational Settings](https://github.com/build-club-ai-indonesia/edge-prompt/blob/main/paper.pdf)

================
File: run.sh
================
#!/bin/bash

# Default LM Studio URL
DEFAULT_LM_STUDIO_URL="http://localhost:1234"
LM_STUDIO_URL=""

# Process command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --lm-studio-url=*)
      LM_STUDIO_URL="${1#*=}"
      shift
      ;;
    --lm-studio-url)
      LM_STUDIO_URL="$2"
      shift 2
      ;;
    *)
      # Unknown option
      shift
      ;;
  esac
done

# Store process IDs
MAIN_PID=""

# Cleanup function
cleanup() {
    echo -e "\nShutting down servers..."
    
    # Kill development processes
    pkill -f "tsx watch"
    pkill -f "react-scripts start"
    pkill -f "tsc -w"
    
    # Kill main process if exists
    if [ ! -z "$MAIN_PID" ]; then
        kill $MAIN_PID 2>/dev/null
    fi
    
    # Force kill any remaining processes on these ports
    fuser -k 3000/tcp 2>/dev/null
    fuser -k 3001/tcp 2>/dev/null
    
    exit 0
}

# Set up trap for cleanup
trap cleanup SIGINT SIGTERM EXIT

# Get Windows host IP from WSL2 (if running in WSL)
if [ -z "$LM_STUDIO_URL" ]; then
    if grep -qi microsoft /proc/version; then
        WINDOWS_HOST=$(ip route show | grep -i default | awk '{ print $3}')
        echo "Windows host IP detected: $WINDOWS_HOST"
        LM_STUDIO_URL="http://$WINDOWS_HOST:1234"
    else
        LM_STUDIO_URL="$DEFAULT_LM_STUDIO_URL"
    fi
    echo "Using auto-detected LM Studio URL: $LM_STUDIO_URL"
else
    echo "Using provided LM Studio URL: $LM_STUDIO_URL"
fi

# Update .env with the LM Studio URL
echo "LM_STUDIO_URL=$LM_STUDIO_URL" > backend/.env

# Print connection info
echo "================================================================="
echo "EdgePrompt will connect to LM Studio at: $LM_STUDIO_URL"
echo "If this is incorrect, press Ctrl+C and restart with:"
echo "  ./run.sh --lm-studio-url=http://your-lm-studio-ip:1234"
echo "================================================================="

# Install dependencies and build packages
echo "Installing dependencies..."
npm install

# Build common package first
echo "Building common package..."
npm run build:common

# Start development servers with proper cleanup
echo "Starting development servers..."
npm run dev &

# Store the main process PID
MAIN_PID=$!

# Wait for Ctrl+C
wait $MAIN_PID

================
File: backend/src/services/DatabaseService.ts
================
import Database from 'better-sqlite3';
import { v4 as uuid } from 'uuid';
import { Project, ProjectConfiguration } from '../types/index.js';
import { StorageService } from './StorageService.js';
import { Material, MaterialStatus } from '../types/index.js';
import { rm } from 'fs/promises';

interface ProjectRow {
  id: string;
  name: string;
  description: string | null;
  model_name: string;
  prompt_template_id: string;
  configuration: string;
  created_at: string;
}

interface ColumnInfo {
  cid: number;
  name: string;
  type: string;
  notnull: number;
  dflt_value: string | null;
  pk: number;
}

export interface User {
  id: string;
  username: string;
  email: string;
  password_hash: string;
  position: string;
  created_at?: string;
}

export class DatabaseService {
  private db: Database.Database;
  private storage: StorageService;

  constructor() {
    this.db = new Database('research.db');
    this.db.pragma('journal_mode = WAL'); // Better concurrency
    this.db.pragma('foreign_keys = ON');  // Enforce foreign key constraints
    this.storage = new StorageService();
  }

  // Add method to get a prepared statement
  private prepareStatement(sql: string): Database.Statement {
    return this.db.prepare(sql);
  }

  // Update material with file info
  async updateMaterialFile(
    materialId: string,
    content: string,
    filePath: string | null,
    fileType: string | null,
    fileSize: number | null,
    status: MaterialStatus
  ): Promise<void> {
    const stmt = this.prepareStatement(`
      UPDATE materials 
      SET content = ?, file_path = ?, file_type = ?, file_size = ?, status = ?
      WHERE id = ?
    `);

    stmt.run(
      content,
      filePath,
      fileType,
      fileSize,
      status,
      materialId
    );
  }

  // Add transaction support
  transaction<T>(fn: () => T): T {
    try {
      this.db.prepare('BEGIN').run();
      const result = fn();
      this.db.prepare('COMMIT').run();
      return result;
    } catch (error) {
      this.db.prepare('ROLLBACK').run();
      throw error;
    }
  }

  exec(sql: string) {
    return this.db.exec(sql);
  }

  // Project methods
  getProjects(): Project[] {
    const stmt = this.db.prepare('SELECT * FROM projects ORDER BY created_at DESC');
    const projects = stmt.all() as ProjectRow[];
    
    return projects.map(project => ({
      id: project.id,
      name: project.name,
      description: project.description || '',
      modelName: project.model_name,
      promptTemplateId: project.prompt_template_id,
      configuration: JSON.parse(project.configuration) as ProjectConfiguration,
      createdAt: project.created_at
    }));
  }

  getProject(id: string): Project {
    const stmt = this.db.prepare('SELECT * FROM projects WHERE id = ?');
    const project = stmt.get(id) as ProjectRow | undefined;
    
    if (!project) {
      throw new Error(`Project not found: ${id}`);
    }

    return {
      id: project.id,
      name: project.name,
      description: project.description || '',
      modelName: project.model_name,
      promptTemplateId: project.prompt_template_id,
      configuration: JSON.parse(project.configuration) as ProjectConfiguration,
      createdAt: project.created_at
    };
  }

  async createProject(params: {
    name: string;
    description?: string;
    modelName: string;
    promptTemplateId: string;
    configuration: any;
  }) {
    const stmt = this.db.prepare(`
      INSERT INTO projects (id, name, description, model_name, prompt_template_id, configuration)
      VALUES (?, ?, ?, ?, ?, ?)
    `);

    const id = uuid();
    stmt.run(
      id,
      params.name,
      params.description || null,
      params.modelName,
      params.promptTemplateId,
      JSON.stringify(params.configuration)
    );
    return id;
  }

  async updateProject(id: string, params: {
    name: string;
    description?: string;
    modelName: string;
    promptTemplateId: string;
    configuration: any;
  }) {
    const stmt = this.db.prepare(`
      UPDATE projects 
      SET name = ?, description = ?, model_name = ?, 
          prompt_template_id = ?, configuration = ?
      WHERE id = ?
    `);

    stmt.run(
      params.name,
      params.description || null,
      params.modelName,
      params.promptTemplateId,
      JSON.stringify(params.configuration),
      id
    );
  }

  async deleteProject(id: string) {
    const stmt = this.db.prepare('DELETE FROM projects WHERE id = ?');
    stmt.run(id);
  }

  // Prompt template methods
  async getPromptTemplates() {
    return this.db.prepare('SELECT * FROM prompt_templates ORDER BY name, version').all();
  }

  async getPromptTemplate(id: string) {
    return this.db.prepare('SELECT * FROM prompt_templates WHERE id = ?').get(id);
  }

  async createPromptTemplate(params: {
    name: string;
    version: string;
    type: string;
    content: string;
    description?: string;
  }) {
    const stmt = this.db.prepare(`
      INSERT INTO prompt_templates (id, name, version, type, content, description)
      VALUES (?, ?, ?, ?, ?, ?)
    `);

    const id = uuid();
    stmt.run(
      id,
      params.name,
      params.version,
      params.type,
      params.content,
      params.description || null
    );
    return id;
  }

  // Material management methods
  async createMaterial(params: {
    projectId: string;
    title: string;
    content: string;
    focusArea: string;
    filePath?: string;
    fileType?: string;
    fileSize?: number;
    metadata?: any;
  }): Promise<string> {
    const stmt = this.db.prepare(`
      INSERT INTO materials (
        id, project_id, title, content, focus_area, 
        file_path, file_type, file_size, metadata, status
      )
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    const id = uuid();
    stmt.run(
      id,
      params.projectId,
      params.title,
      params.content,
      params.focusArea,
      params.filePath || null,
      params.fileType || null,
      params.fileSize || null,
      params.metadata ? JSON.stringify(params.metadata) : null,
      'pending' as MaterialStatus
    );

    return id;
  }

  async getMaterial(id: string): Promise<Material> {
    const stmt = this.db.prepare(`
      SELECT m.*, p.name as project_name 
      FROM materials m
      JOIN projects p ON m.project_id = p.id
      WHERE m.id = ?
    `);
    
    const material = stmt.get(id) as any;
    if (!material) {
      throw new Error(`Material not found: ${id}`);
    }

    return {
      id: material.id,
      projectId: material.project_id,
      projectName: material.project_name,
      title: material.title,
      content: material.content,
      focusArea: material.focus_area,
      filePath: material.file_path,
      fileType: material.file_type,
      fileSize: material.file_size,
      status: material.status as MaterialStatus,
      metadata: material.metadata ? JSON.parse(material.metadata) : null,
      createdAt: material.created_at
    };
  }

  async getProjectMaterials(projectId: string): Promise<Material[]> {
    const stmt = this.db.prepare(`
      SELECT m.*, p.name as project_name 
      FROM materials m
      JOIN projects p ON m.project_id = p.id
      WHERE m.project_id = ?
      ORDER BY m.created_at DESC
    `);
    
    const materials = stmt.all(projectId) as any[];
    return materials.map(material => ({
      id: material.id,
      projectId: material.project_id,
      projectName: material.project_name,
      title: material.title,
      content: material.content,
      focusArea: material.focus_area,
      filePath: material.file_path,
      fileType: material.file_type,
      fileSize: material.file_size,
      status: material.status as MaterialStatus,
      metadata: material.metadata ? JSON.parse(material.metadata) : null,
      createdAt: material.created_at
    }));
  }

  async updateMaterialStatus(id: string, status: MaterialStatus): Promise<void> {
    const stmt = this.db.prepare(`
      UPDATE materials 
      SET status = ?
      WHERE id = ?
    `);

    stmt.run(status, id);
  }

  async deleteMaterial(id: string): Promise<void> {
    const material = await this.getMaterial(id);
    
    // Delete original file if it exists
    if (material.filePath) {
      await rm(material.filePath, { force: true });
    }

    const stmt = this.db.prepare('DELETE FROM materials WHERE id = ?');
    stmt.run(id);
  }

  getTableInfo(tableName: string): ColumnInfo[] {
    const stmt = this.db.prepare(`PRAGMA table_info(${tableName})`);
    return stmt.all() as ColumnInfo[];
  }

  // Question methods
  async getMaterialQuestions(materialId: string) {
    const stmt = this.db.prepare(`
      SELECT * FROM generated_questions 
      WHERE material_id = ?
      ORDER BY created_at DESC
    `);
    
    const questions = stmt.all(materialId) as any[];
    return questions.map(q => ({
      id: q.id,
      materialId: q.material_id,
      promptTemplateId: q.prompt_template_id,
      question: q.question,
      constraints: JSON.parse(q.constraints || '{}'),
      metadata: JSON.parse(q.metadata || '{}'),
      createdAt: q.created_at
    }));
  }

  async getQuestion(id: string) {
    const stmt = this.db.prepare(`
      SELECT * FROM generated_questions 
      WHERE id = ?
    `);
    
    const q = stmt.get(id) as any;
    if (!q) {
      throw new Error(`Question not found: ${id}`);
    }
    
    return {
      id: q.id,
      materialId: q.material_id,
      promptTemplateId: q.prompt_template_id,
      question: q.question,
      constraints: JSON.parse(q.constraints || '{}'),
      metadata: JSON.parse(q.metadata || '{}'),
      createdAt: q.created_at
    };
  }

  async createQuestion(params: {
    materialId: string;
    promptTemplateId: string;
    question: string;
    template: string;
    rules: string;
    metadata?: any;
  }) {
    const stmt = this.prepareStatement(`
      INSERT INTO generated_questions (
        id, material_id, prompt_template_id, question, constraints, metadata
      )
      VALUES (?, ?, ?, ?, ?, ?)
    `);

    const id = uuid();
    stmt.run(
      id,
      params.materialId,
      params.promptTemplateId,
      params.question,
      params.template,
      params.metadata ? JSON.stringify({
        ...params.metadata,
        rules: params.rules
      }) : null
    );
    
    return id;
  }

  async getQuestionsByMaterial(materialId: string) {
    const stmt = this.db.prepare(`
      SELECT id, material_id, prompt_template_id, question, constraints, metadata
      FROM generated_questions 
      WHERE material_id = ?
      ORDER BY created_at DESC
    `);
    
    const questions = stmt.all(materialId) as any[];
    
    return questions.map(q => {
      // Parse metadata to get the rules field (which contains our rubric)
      let metadata = {};
      let rubric = {};
      
      try {
        metadata = JSON.parse(q.metadata || '{}');
        // The rules are stored in metadata.rules in our database schema
        if (metadata.rules) {
          rubric = JSON.parse(metadata.rules);
          delete metadata.rules; // Remove from metadata to avoid duplication
        }
      } catch (e) {
        console.warn(`Failed to parse metadata for question ${q.id}`, e);
      }
      
      // Parse template constraints
      let template = {};
      try {
        template = JSON.parse(q.constraints || '{}');
      } catch (e) {
        console.warn(`Failed to parse constraints for question ${q.id}`, e);
      }
      
      return {
        id: q.id,
        materialId: q.material_id,
        promptTemplateId: q.prompt_template_id,
        question: q.question,
        template,
        rubric,  // Include the parsed rubric
        metadata
      };
    });
  }

  // Response methods
  async getQuestionResponses(questionId: string) {
    const stmt = this.db.prepare(`
      SELECT * FROM responses 
      WHERE question_id = ?
      ORDER BY created_at DESC
    `);
    
    const responses = stmt.all(questionId) as any[];
    return responses.map(r => ({
      id: r.id,
      questionId: r.question_id,
      response: r.response,
      score: r.score,
      feedback: r.feedback,
      metadata: JSON.parse(r.metadata || '{}'),
      createdAt: r.created_at
    }));
  }

  async getResponse(id: string) {
    const stmt = this.db.prepare(`
      SELECT * FROM responses 
      WHERE id = ?
    `);
    
    const r = stmt.get(id) as any;
    if (!r) {
      throw new Error(`Response not found: ${id}`);
    }
    
    return {
      id: r.id,
      questionId: r.question_id,
      response: r.response,
      score: r.score,
      feedback: r.feedback,
      metadata: JSON.parse(r.metadata || '{}'),
      createdAt: r.created_at
    };
  }

  async createResponse(params: {
    questionId: string;
    response: string;
    score?: number;
    feedback?: string;
    metadata?: any;
  }) {
    const stmt = this.db.prepare(`
      INSERT INTO responses (
        id, question_id, response, score, feedback, metadata
      )
      VALUES (?, ?, ?, ?, ?, ?)
    `);

    const id = uuid();
    stmt.run(
      id,
      params.questionId,
      params.response,
      params.score || null,
      params.feedback || null,
      params.metadata ? JSON.stringify(params.metadata) : null
    );
    
    return id;
  }

  getDatabasePath() {
    return this.db.name || 'research.db';
  }

  async updateMaterialMetadata(materialId: string, metadata: any): Promise<void> {
    const stmt = this.prepareStatement(`
      UPDATE materials 
      SET metadata = ?
      WHERE id = ?
    `);

    stmt.run(
      JSON.stringify(metadata),
      materialId
    );
  }

  async updateMaterialContent(materialId: string, content: string): Promise<void> {
    const stmt = this.prepareStatement(`
      UPDATE materials 
      SET content = ?
      WHERE id = ?
    `);

    stmt.run(
      content,
      materialId
    );
  }

  async updateMaterialTitle(materialId: string, title: string): Promise<void> {
    const stmt = this.prepareStatement(`
      UPDATE materials 
      SET title = ?
      WHERE id = ?
    `);

    stmt.run(
      title,
      materialId
    );
  }

  async updateMaterialReprocessed(params: {
    id: string;
    content: string;
    filePath: string;
    fileType: string;
    fileSize: number;
    metadata: any;
  }): Promise<void> {
    const stmt = this.prepareStatement(`
      UPDATE materials 
      SET 
        content = ?,
        file_path = ?,
        file_type = ?,
        file_size = ?,
        metadata = ?,
        status = 'completed'
      WHERE id = ?
    `);

    stmt.run(
      params.content,
      params.filePath,
      params.fileType,
      params.fileSize,
      JSON.stringify(params.metadata),
      params.id
    );
  }

  // User methods

  //Create User
  async createUser(user: Omit<User, 'created_at'>): Promise<string> {
    const stmt = this.db.prepare(`
        INSERT INTO users (id, username, email, password_hash, position)
        VALUES (?, ?, ?, ?, ?)
    `);
    stmt.run(user.id, user.username, user.email, user.password_hash, user.position);
    console.log(user.id)
    return user.id;
  }

  //getUserByEmail
  async getUserByEmail(email: string): Promise<User | null> { // Changed return type to User | null
    const stmt = this.db.prepare(`SELECT * FROM users WHERE email = ?`);
    const user = stmt.get(email) as User | undefined;
    return user || null; // Return null if user is undefined
  }

  //delete User by ID
  async deleteUserById(userId: string): Promise<void> {
    const stmt = this.prepareStatement('DELETE FROM users WHERE id = ?');
    stmt.run(userId);
  }

  close() {
    this.db.close();
  }
}

================
File: backend/package.json
================
{
  "name": "edge-prompt-backend",
  "version": "1.0.0",
  "description": "Backend for EdgePrompt framework",
  "main": "dist/index.js",
  "type": "module",
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "tsx watch src/index.ts",
    "migrate": "tsx src/db/migrate.ts",
    "test": "NODE_ENV=test mocha --require tsx/cjs 'src/**/*.test.ts' --file src/test/setup.ts",
    "test:watch": "mocha --watch",
    "test:database": "mocha src/services/DatabaseService.test.ts",
    "test:storage": "mocha src/services/StorageService.test.ts"
  },
  "dependencies": {
    "@edge-prompt/common": "file:../common",
    "@types/jsonwebtoken": "^9.0.9",
    "axios": "^1.6.7",
    "better-sqlite3": "^9.6.0",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "mammoth": "^1.6.0",
    "multer": "^1.4.5-lts.1",
    "pdfjs-dist": "3.11.174",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@types/better-sqlite3": "^7.6.12",
    "@types/chai": "^4.3.5",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/mocha": "^10.0.1",
    "@types/multer": "^1.4.7",
    "@types/node": "^20.11.17",
    "@types/pdfjs-dist": "^2.10.378",
    "@types/uuid": "^9.0.8",
    "chai": "^4.3.7",
    "mocha": "^10.2.0",
    "tsx": "^4.7.0",
    "typescript": "^5.3.3"
  }
}

================
File: backend/src/types/index.ts
================
export * from '@edge-prompt/common/types/index.js';

export interface Template {
  pattern: string;
  constraints: string[];
}

export interface ValidationRule {
  criteria: string;
  parameters: ValidationParameters;
}

export interface ValidationParameters {
  threshold: number;
  boundaries: {
    min: number;
    max: number;
  };
}

export interface ValidationResult {
  isValid: boolean;
  score: number;
  feedback: string;
}

export interface EvaluationState {
  questionId: string;
  studentId: string;
  response: string;
  validationStages: ValidationResult[];
  finalScore?: number;
  status: 'pending' | 'completed' | 'review';
}

export interface MaterialSource {
  id?: string;
  type: string;
  content: string;
  metadata: {
    title?: string;
    subject?: string;
    grade?: string;
    chapter?: string;
    focusArea: string;
    useSourceLanguage?: boolean;
    learningObjectives?: string[];
    templates?: ContentTemplate[];
    [key: string]: any;
  };
}

export interface ContentTemplate {
  pattern: string;
  constraints: string[];
  source: MaterialSource;
  targetGrade: string;
  subject: string;
  learningObjectives: string[];
}

export interface AnswerSpace {
  type: 'essay' | 'short-answer' | 'explanation';
  minLength?: number;
  maxLength?: number;
  requiredConcepts?: string[];
  prohibitedContent?: string[];
}

export interface Project {
  id: string;
  name: string;
  description?: string;
  modelName: string;
  promptTemplateId: string;
  configuration: string | ProjectConfiguration;
  createdAt?: string;
}

export interface ProjectConfiguration {
  language: string;
  gradeLevel: string;
  subject: string;
}

export interface PromptTemplate {
  id: string;
  name: string;
  version: string;
  type: 'question_generation' | 'validation' | 'objective_extraction';
  content: string;
  description?: string;
  createdAt?: string;
}

export type MaterialStatus = 'pending' | 'processing' | 'completed' | 'error';

export interface Material {
  id: string;
  projectId: string;
  projectName: string;
  title: string;
  content: string;
  focusArea: string;
  filePath?: string;
  fileType?: string;
  fileSize?: number;
  status: MaterialStatus;
  metadata?: any;
  createdAt: string;
}

================
File: backend/src/index.ts
================
import express from 'express';
import cors from 'cors';
import { ValidationService } from './services/ValidationService.js';
import { LMStudioService } from './services/LMStudioService.js';
import { MaterialProcessor } from './services/MaterialProcessor.js';
import multer from 'multer';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { mkdirSync } from 'fs';
import { MaterialSource } from './types/index.js';
import fs from 'fs/promises';
import { DatabaseService } from './services/DatabaseService.js';
import { StorageService } from './services/StorageService.js';
import { v4 as uuid } from 'uuid';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
app.use(cors());
app.use(express.json());

// Create uploads directory if it doesn't exist
const uploadsDir = join(dirname(__dirname), 'uploads');
mkdirSync(uploadsDir, { recursive: true });

const lmStudio = new LMStudioService();
const validator = new ValidationService(lmStudio);
const materialProcessor = new MaterialProcessor(lmStudio);
const db = new DatabaseService();
const storage = new StorageService();
await storage.initialize();

// Configure multer for file uploads
const storageMulter = multer.diskStorage({
  destination: (_req, _file, cb) => {
    cb(null, uploadsDir);
  },
  filename: (_req, file, cb) => {
    cb(null, `${Date.now()}-${path.basename(file.originalname)}`);
  }
});

const upload = multer({ storage: storageMulter });

app.post('/api/validate', async (req, res): Promise<void> => {
  try {
    const { questionId, answer } = req.body;
    
    if (!questionId || !answer) {
      res.status(400).json({ 
        error: 'Missing required fields',
        details: {
          questionId: !questionId,
          answer: !answer
        }
      });
      return;
    }

    // Retrieve the question from database
    const question = await db.getQuestion(questionId);
    if (!question) {
      res.status(404).json({ error: 'Question not found' });
      return;
    }
    
    // Get the prompt template using the ID from the question
    const promptTemplate = await db.getPromptTemplate(question.promptTemplateId);
    if (!promptTemplate) {
      res.status(404).json({ error: 'Prompt template not found' });
      return;
    }

    // Validate the answer using the retrieved data and prompt template
    const result = await validator.validateResponse(
      question.question,
      answer,
      promptTemplate
    );
    
    res.json(result);
  } catch (error) {
    console.error('Validation error:', error);
    res.status(500).json({ 
      error: 'Validation failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

app.post('/api/generate', async (req, res): Promise<void> => {
  try {
    const { materialId, promptTemplateId, templateIndex, useSourceLanguage } = req.body;
    
    if (!materialId || !promptTemplateId || templateIndex === undefined) {
      res.status(400).json({ 
        error: 'Missing required fields',
        details: {
          materialId: !materialId,
          promptTemplateId: !promptTemplateId,
          templateIndex: templateIndex === undefined
        }
      });
      return;
    }

    // Retrieve material from database
    const material = await db.getMaterial(materialId);
    if (!material) {
      res.status(404).json({ error: 'Material not found' });
      return;
    }
    
    // Retrieve prompt template from database
    const promptTemplate = await db.getPromptTemplate(promptTemplateId);
    if (!promptTemplate) {
      res.status(404).json({ error: 'Prompt template not found' });
      return;
    }
    
    // Get the question template from the material's metadata
    const questionTemplate = material.metadata?.templates?.[templateIndex];
    if (!questionTemplate) {
      res.status(404).json({ error: 'Question template not found at specified index' });
      return;
    }

    // Generate question using the material's content and templates
    const questionText = await materialProcessor.generateQuestion(
      questionTemplate, 
      material.content,
      promptTemplate,
      useSourceLanguage
    );
    
    // Generate appropriate rules based on the prompt template
    const rubric = await materialProcessor.generateRubric(
      questionText,
      questionTemplate,
      promptTemplate
    );
    
    // Generate a UUID for the question
    const questionId = uuid();
    
    // Save to database
    await db.createQuestion({
      materialId,
      promptTemplateId,
      question: questionText,
      template: JSON.stringify(questionTemplate),
      rules: JSON.stringify(rubric),
      metadata: {
        generatedAt: new Date().toISOString(),
        templateIndex,
        validationStages: ['content_relevance', 'vocabulary_appropriateness', 'detailed_criteria_evaluation']
      }
    });
    
    // Return the complete question with its ID
    res.json({ 
      id: questionId,
      materialId,
      promptTemplateId,
      question: questionText,
      template: questionTemplate,
      rubric,
      metadata: {
        generatedAt: new Date().toISOString(),
        templateIndex,
        validationStages: ['content_relevance', 'vocabulary_appropriateness', 'detailed_criteria_evaluation']
      }
    });
  } catch (error) {
    console.error('Generation error:', error);
    res.status(500).json({ 
      error: 'Failed to generate question',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

app.get('/api/health', async (_req, res): Promise<void> => {
  try {
    const isLMStudioAvailable = await lmStudio.isAvailable();
    res.json({ 
      status: 'ok',
      lmStudio: isLMStudioAvailable 
    });
  } catch (error) {
    console.error('Health check error:', error);
    res.status(500).json({ 
      status: 'error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

app.post('/api/materials/process', async (req, res): Promise<void> => {
  const { material, projectId } = req.body;
  
  if (!projectId) {
    res.status(400).json({ error: 'Project ID is required' });
    return;
  }
  
  try {
    // Extract content if not already provided
    const content = typeof material.content === 'string' && !material.content.startsWith('/') 
      ? material.content 
      : await materialProcessor.extractContent(material);
    
    // Generate objectives and templates
    const objectives = await materialProcessor.extractLearningObjectives(
      content, 
      material.metadata.focusArea,
      material.metadata.useSourceLanguage
    );
    
    const templates = await materialProcessor.suggestQuestionTemplates(
      content, 
      objectives, 
      material.metadata.focusArea,
      material.metadata.useSourceLanguage
    );
    
    // Create database record for the material
    const materialId = await db.createMaterial({
      projectId,
      title: material.metadata.title || 'Untitled Material',
      content: content,
      focusArea: material.metadata.focusArea,
      metadata: {
        ...material.metadata,
        learningObjectives: objectives,
        templates: templates,
        wordCount: content.split(/\s+/).length,
        processedAt: new Date().toISOString()
      }
    });
    
    // Update material status to completed
    await db.updateMaterialStatus(materialId, 'completed');
    
    res.json({
      id: materialId,
      objectives,
      templates,
      wordCount: content.split(/\s+/).length,
      status: 'success'
    });
  } catch (error) {
    console.error('Material processing error:', error);
    res.status(500).json({ 
      error: 'Failed to process material',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Add file upload endpoint
app.post('/api/materials/upload', upload.single('file'), async (req, res): Promise<void> => {
  try {
    if (!req.file) {
      res.status(400).json({ error: 'No file uploaded' });
      return;
    }

    // Get file extension without the dot
    const fileType = path.extname(req.file.originalname).toLowerCase().substring(1);
    
    if (!['txt', 'pdf', 'doc', 'docx', 'md'].includes(fileType)) {
      res.status(400).json({ 
        error: 'Unsupported file type', 
        details: `File type ${fileType} is not supported. Supported types: txt, pdf, doc, docx, md` 
      });
      return;
    }

    const metadata = JSON.parse(req.body.metadata || '{}');
    const projectId = metadata.projectId || null;
    
    if (!projectId) {
      res.status(400).json({ error: 'Project ID is required' });
      return;
    }

    // Extract content from file
    const material: MaterialSource = {
      type: fileType,
      content: req.file.path,
      metadata
    };
    
    // Process file to extract content
    const content = await materialProcessor.extractContent(material);
    
    // Generate objectives and templates
    const objectives = await materialProcessor.extractLearningObjectives(
      content, 
      metadata.focusArea,
      metadata.useSourceLanguage
    );
    
    const templates = await materialProcessor.suggestQuestionTemplates(
      content, 
      objectives, 
      metadata.focusArea,
      metadata.useSourceLanguage
    );

    // Create database record for the material
    const materialId = await db.createMaterial({
      projectId,
      title: metadata.title || 'Untitled Material',
      content: content,
      focusArea: metadata.focusArea,
      filePath: req.file.path,
      fileType,
      fileSize: req.file.size,
      metadata: {
        ...metadata,
        learningObjectives: objectives,
        templates: templates,
        wordCount: content.split(/\s+/).length,
        processedAt: new Date().toISOString()
      }
    });
    
    // Update material status to completed
    await db.updateMaterialStatus(materialId, 'completed');
    
    // Clean up the uploaded file if needed (since we've already extracted the content)
    // Uncomment this if you don't need the original file anymore
    // await fs.unlink(req.file.path).catch(err => {
    //   console.warn('Failed to delete uploaded file:', err);
    // });

    res.json({
      id: materialId,
      content,
      objectives,
      templates,
      wordCount: content.split(/\s+/).length,
      status: 'success'
    });
  } catch (error) {
    // Clean up file on error
    if (req.file) {
      await fs.unlink(req.file.path).catch(() => {});
    }
    
    console.error('Material upload error:', error);
    res.status(500).json({ 
      error: 'Failed to process uploaded material',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Project endpoints
app.get('/api/projects', async (_req, res): Promise<void> => {
  try {
    const projects = await db.getProjects();
    res.json(projects);
  } catch (error) {
    console.error('Failed to get projects:', error);
    res.status(500).json({ error: 'Failed to get projects' });
  }
});

app.post('/api/projects', async (req, res): Promise<void> => {
  try {
    const projectId = await db.createProject(req.body);
    const project = await db.getProject(projectId);
    res.json(project);
  } catch (error) {
    console.error('Failed to create project:', error);
    res.status(500).json({ error: 'Failed to create project' });
  }
});

app.put('/api/projects/:id', async (req, res): Promise<void> => {
  try {
    await db.updateProject(req.params.id, req.body);
    const project = await db.getProject(req.params.id);
    res.json(project);
  } catch (error) {
    console.error('Failed to update project:', error);
    res.status(500).json({ error: 'Failed to update project' });
  }
});

app.delete('/api/projects/:id', async (req, res): Promise<void> => {
  try {
    await db.deleteProject(req.params.id);
    res.json({ success: true });
  } catch (error) {
    console.error('Failed to delete project:', error);
    res.status(500).json({ error: 'Failed to delete project' });
  }
});

// Prompt template endpoints
app.get('/api/prompt-templates', async (_req, res): Promise<void> => {
  try {
    const templates = await db.getPromptTemplates();
    res.json(templates);
  } catch (error) {
    console.error('Failed to get prompt templates:', error);
    res.status(500).json({ error: 'Failed to get prompt templates' });
  }
});

app.post('/api/prompt-templates', async (req, res): Promise<void> => {
  try {
    const templateId = await db.createPromptTemplate(req.body);
    const template = await db.getPromptTemplate(templateId);
    res.json(template);
  } catch (error) {
    console.error('Failed to create prompt template:', error);
    res.status(500).json({ error: 'Failed to create prompt template' });
  }
});

// Add materials endpoints
app.get('/api/materials', async (req, res): Promise<void> => {
  try {
    const projectId = req.query.projectId as string;
    if (!projectId) {
      res.status(400).json({ error: 'Missing projectId parameter' });
      return;
    }
    
    const materials = await db.getProjectMaterials(projectId);
    res.json(materials);
  } catch (error) {
    console.error('Failed to get materials:', error);
    res.status(500).json({ 
      error: 'Failed to get materials',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

app.get('/api/materials/:id', async (req, res): Promise<void> => {
  try {
    const id = req.params.id;
    const material = await db.getMaterial(id);
    res.json(material);
  } catch (error) {
    console.error('Failed to get material:', error);
    res.status(500).json({ 
      error: 'Failed to get material',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

app.delete('/api/materials/:id', async (req, res): Promise<void> => {
  try {
    const id = req.params.id;
    await db.deleteMaterial(id);
    res.json({ success: true });
  } catch (error) {
    console.error('Failed to delete material:', error);
    res.status(500).json({ 
      error: 'Failed to delete material',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Add question endpoints
app.get('/api/questions', async (req, res): Promise<void> => {
  try {
    const { materialId } = req.query;
    
    if (!materialId) {
      res.status(400).json({ error: 'Material ID is required' });
      return;
    }
    
    const questions = await db.getQuestionsByMaterial(materialId as string);
    res.json(questions.map(q => ({
      id: q.id,
      materialId: q.materialId,
      promptTemplateId: q.promptTemplateId,
      question: q.question,
      template: q.template,
      rubric: q.rubric,
      metadata: q.metadata
    })));
  } catch (error) {
    console.error('Failed to get questions:', error);
    res.status(500).json({ 
      error: 'Failed to get questions',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

app.post('/api/questions', async (req, res): Promise<void> => {
  try {
    const { materialId, promptTemplateId, question, metadata } = req.body;
    
    if (!materialId || !promptTemplateId || !question) {
      res.status(400).json({
        error: 'Missing required fields',
        details: {
          materialId: !materialId,
          promptTemplateId: !promptTemplateId,
          question: !question
        }
      });
      return;
    }
    
    // Use the DatabaseService createQuestion method
    const questionId = await db.createQuestion({
      materialId,
      promptTemplateId,
      question,
      template: JSON.stringify({}),  // Empty template object since we're not using it anymore
      rules: JSON.stringify({}),     // Empty rules object since we're not using it anymore
      metadata
    });
    
    // Return the saved question with its ID
    res.json({
      id: questionId,
      materialId,
      promptTemplateId,
      question,
      metadata: metadata || {}
    });
  } catch (error) {
    console.error('Error saving question:', error);
    res.status(500).json({
      error: 'Failed to save question',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Add response endpoints
app.get('/api/responses', async (req, res): Promise<void> => {
  try {
    const questionId = req.query.questionId as string;
    if (!questionId) {
      res.status(400).json({ error: 'Missing questionId parameter' });
      return;
    }
    
    const responses = await db.getQuestionResponses(questionId);
    res.json(responses);
  } catch (error) {
    console.error('Failed to get responses:', error);
    res.status(500).json({ 
      error: 'Failed to get responses',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

app.post('/api/responses', async (req, res): Promise<void> => {
  try {
    const { questionId, response, score, feedback, metadata } = req.body;
    
    if (!questionId || !response) {
      res.status(400).json({ 
        error: 'Missing required fields',
        details: {
          questionId: !questionId,
          response: !response
        }
      });
      return;
    }
    
    const responseId = await db.createResponse({
      questionId,
      response,
      score,
      feedback,
      metadata: metadata || {}
    });
    
    const createdResponse = await db.getResponse(responseId);
    res.json(createdResponse);
  } catch (error) {
    console.error('Failed to create response:', error);
    res.status(500).json({ 
      error: 'Failed to create response',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Add this endpoint to handle material content updates
app.patch('/api/materials/:id/content', async (req, res): Promise<void> => {
  try {
    const { id } = req.params;
    const { content } = req.body;
    
    if (!content) {
      res.status(400).json({ error: 'Content is required' });
      return;
    }
    
    // Get the existing material
    const material = await db.getMaterial(id);
    
    // Update just the content
    await db.updateMaterialContent(id, content);
    
    // Return the updated material
    const updatedMaterial = await db.getMaterial(id);
    res.json(updatedMaterial);
  } catch (error) {
    console.error('Error updating material content:', error);
    res.status(500).json({ 
      error: 'Failed to update material content',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Add this endpoint to update material title
app.patch('/api/materials/:id/title', async (req, res): Promise<void> => {
  try {
    const { id } = req.params;
    const { title } = req.body;
    
    if (!title) {
      res.status(400).json({ error: 'Title is required' });
      return;
    }
    
    await db.updateMaterialTitle(id, title);
    
    // Return the updated material
    const updatedMaterial = await db.getMaterial(id);
    res.json(updatedMaterial);
  } catch (error) {
    console.error('Error updating material title:', error);
    res.status(500).json({ 
      error: 'Failed to update material title',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Add this endpoint to re-upload and reprocess a material
app.post('/api/materials/:id/reprocess', upload.single('file'), async (req, res): Promise<void> => {
  try {
    const { id } = req.params;
    
    if (!req.file) {
      res.status(400).json({ error: 'No file uploaded' });
      return;
    }
    
    // Get original material to preserve metadata
    const originalMaterial = await db.getMaterial(id);
    if (!originalMaterial) {
      res.status(404).json({ error: 'Material not found' });
      return;
    }
    
    // Get file extension without the dot
    const fileType = path.extname(req.file.originalname).toLowerCase().substring(1);
    
    if (!['txt', 'pdf', 'doc', 'docx', 'md'].includes(fileType)) {
      res.status(400).json({ 
        error: 'Unsupported file type', 
        details: `File type ${fileType} is not supported. Supported types: txt, pdf, doc, docx, md` 
      });
      return;
    }
    
    // Extract content from new file
    const material = {
      type: fileType,
      content: req.file.path,
      metadata: {
        ...originalMaterial.metadata,
        focusArea: originalMaterial.focusArea,
        projectId: originalMaterial.projectId
      }
    };
    
    // Process file to extract content
    const content = await materialProcessor.extractContent(material);
    
    // Generate objectives and templates
    const objectives = await materialProcessor.extractLearningObjectives(
      content, 
      originalMaterial.focusArea,
      originalMaterial.metadata?.useSourceLanguage
    );
    
    const templates = await materialProcessor.suggestQuestionTemplates(
      content, 
      objectives, 
      originalMaterial.focusArea,
      originalMaterial.metadata?.useSourceLanguage
    );
    
    // Update the material with new content and processed data
    await db.updateMaterialReprocessed({
      id,
      content,
      filePath: req.file.path,
      fileType,
      fileSize: req.file.size,
      metadata: {
        ...originalMaterial.metadata,
        learningObjectives: objectives,
        templates: templates,
        wordCount: content.split(/\s+/).length,
        processedAt: new Date().toISOString()
      }
    });
    
    // Update material status to completed
    await db.updateMaterialStatus(id, 'completed');
    
    // Return the updated material
    const updatedMaterial = await db.getMaterial(id);
    res.json({
      id,
      content,
      objectives,
      templates,
      wordCount: content.split(/\s+/).length,
      status: 'success'
    });
  } catch (error) {
    console.error('Material reprocessing error:', error);
    res.status(500).json({ 
      error: 'Failed to reprocess material',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Create debug info logging function
function logServerConfiguration() {
  console.log('\n----- EdgePrompt Server Configuration -----');
  
  // Log basic server info
  console.log(`\n🌐 Server running on port: ${PORT}`);
  console.log(`🔗 API Base URL: http://localhost:${PORT}/api`);
  
  // Log LM Studio configuration
  const llmConfig = lmStudio.getConfig();
  console.log('\n🤖 LLM Service Configuration:');
  console.log(`   - API URL: ${llmConfig.apiUrl}`);
  console.log(`   - Model: ${llmConfig.model || 'Not specified'}`);
  console.log(`   - Temperature: ${llmConfig.temperature || 'Default'}`);
  console.log(`   - Max Tokens: ${llmConfig.maxTokens || 'Default'}`);
  
  // Log database info
  console.log('\n💾 Database Configuration:');
  console.log(`   - Database Path: ${db.getDatabasePath()}`);
  console.log(`   - Uploads Directory: ${uploadsDir}`);
  
  // Only try to access storage if it exists
  try {
    if (storage && typeof storage.getConfig === 'function') {
      console.log(`   - Storage Root: ${storage.getConfig().rootDir}`);
    } else {
      console.log(`   - Storage: Not initialized`);
    }
  } catch (error) {
    console.log(`   - Storage: Error accessing configuration`);
  }
  
  // Log registered API endpoints
  console.log('\n📡 Registered API Endpoints:');
  
  // Get all registered routes
  const routes: string[] = [];
  
  // Function to extract routes recursively from Express app
  function extractRoutes(app: any, basePath = '') {
    if (!app._router || !app._router.stack) return;
    
    app._router.stack.forEach((layer: any) => {
      if (layer.route) {
        // Routes registered directly on the app
        const methods = Object.keys(layer.route.methods)
          .filter(method => layer.route.methods[method])
          .map(method => method.toUpperCase())
          .join(', ');
        
        routes.push(`   ${methods} ${basePath}${layer.route.path}`);
      } else if (layer.name === 'router' && layer.handle.stack) {
        // Router middleware
        const routerPath = layer.regexp.toString()
          .replace('\\/?(?=\\/|$)', '')
          .replace('?', '')
          .replace(/\\/g, '')
          .replace(/\^|\$/g, '')
          .replace(/\(\?:\(\[\^\\\/\]\+\?\)\)/g, ':param');
          
        layer.handle.stack.forEach((stackItem: any) => {
          if (stackItem.route) {
            const methods = Object.keys(stackItem.route.methods)
              .filter(method => stackItem.route.methods[method])
              .map(method => method.toUpperCase())
              .join(', ');
            
            routes.push(`   ${methods} ${basePath}${routerPath}${stackItem.route.path}`);
          }
        });
      }
    });
  }
  
  extractRoutes(app);
  
  // Filter to show only /api routes and sort them
  const apiRoutes = routes
    .filter(route => route.includes('/api'))
    .sort((a, b) => {
      // Sort by HTTP method first, then by path
      const methodA = a.trim().split(' ')[0];
      const methodB = b.trim().split(' ')[0];
      const pathA = a.trim().split(' ')[1];
      const pathB = b.trim().split(' ')[1];
      
      if (pathA === pathB) {
        return methodA.localeCompare(methodB);
      }
      return pathA.localeCompare(pathB);
    });
  
  // Output all API routes
  apiRoutes.forEach(route => console.log(route));
  
  console.log('\n------------------------------------------\n');
}

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  logServerConfiguration();
}); 

// Signup
app.post('/api/register', async (req, res) => {
  try {
      const { username, email, password, role } = req.body;
      const password_hash = await bcrypt.hash(password, 10); // Hash the password
      const userId = await db.createUser({ username, email, password_hash, role });
      res.status(201).json({ id: userId, message: 'User created' });
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Registration failed' });
  }
});

// Login
app.post('/api/login', async (req, res) => {
  try {
      const { email, password } = req.body;
      const user = await db.getUserByEmail(email);
      if (user && await bcrypt.compare(password, user.password_hash)) {
          const token = jwt.sign({ userId: user.id, role: user.role }, 'your-secret-key', { expiresIn: '1h' }); // Generate token
          res.json({ token });
      } else {
          res.status(401).json({ error: 'Invalid credentials' });
      }
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Login failed' });
  }
});

================
File: .gitignore
================
# Root .gitignore
node_modules/
dist/
.env
.env.*
!.env.example
coverage/
*.log
.DS_Store
.vscode/
.idea/

# Uploaded files
uploads/
test-uploads/
*.db
*.db-*
research.db
research.db-shm
research.db-wal

# Build artifacts
build/
*.tsbuildinfo

# Dependencies
.pnp/
.pnp.js

# Environment files
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
*.log

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS
Thumbs.db

# TypeScript
*.tsbuildinfo

# Backend specific
backend/dist/
backend/node_modules/
backend/.env
backend/*.log
backend/uploads/*
!backend/uploads/.gitkeep

# Frontend specific
frontend/build/
frontend/node_modules/
frontend/.env
frontend/*.log

# Common specific
common/dist/
common/node_modules/

# Misc
.cache/
.temp/
repomix-output.xml

================
File: frontend/src/App.tsx
================
import React, { useState, useEffect } from 'react';
import { SimplifiedMaterialUploader } from './components/teacher/SimplifiedMaterialUploader';
import { MaterialDetailView } from './components/teacher/MaterialDetailView';
import { ProjectProvider, useProject } from './contexts/ProjectContext';
import { ErrorBoundary } from './components/ErrorBoundary';
import { PromptTemplateManager } from './components/prompt/PromptTemplateManager';
import PromptEngineeringTool from './components/tools/PromptEngineeringTool';
import { api } from './services/api';
import { Material } from './types';
import { ProjectForm } from './components/project/ProjectForm';

// Main content wrapper that uses the project context
const MainContent: React.FC = () => {
  const { projects, activeProject, setActiveProject } = useProject();
  const [activeTab, setActiveTab] = useState<'generator' | 'templates' | 'promptTools'>('generator');
  const [autoSelectDisabled, setAutoSelectDisabled] = useState(false);
  const [materials, setMaterials] = useState<Material[]>([]);
  const [isLoadingMaterials, setIsLoadingMaterials] = useState(false);
  const [selectedMaterialId, setSelectedMaterialId] = useState<string | null>(null);
  const [showCreateProject, setShowCreateProject] = useState(false);

  // Auto-select first project if none selected
  useEffect(() => {
    if (!activeProject && projects.length > 0 && !autoSelectDisabled) {
      setActiveProject(projects[0]);
    }
  }, [projects, activeProject, setActiveProject, autoSelectDisabled]);

  // Load materials when active project changes
  useEffect(() => {
    const loadMaterials = async () => {
      if (!activeProject) return;
      
      setIsLoadingMaterials(true);
      try {
        const projectMaterials = await api.getMaterials(activeProject.id);
        setMaterials(projectMaterials);
      } catch (error) {
        console.error('Error loading materials:', error);
      } finally {
        setIsLoadingMaterials(false);
      }
    };
    
    loadMaterials();
  }, [activeProject]);

  // Handle material upload completion
  const handleMaterialUploaded = async () => {
    if (!activeProject) return;
    
    try {
      const projectMaterials = await api.getMaterials(activeProject.id);
      setMaterials(projectMaterials);
    } catch (error) {
      console.error('Error refreshing materials:', error);
    }
  };

  // Handle back to projects
  const handleBackToProjects = () => {
    setAutoSelectDisabled(true);
    setActiveProject(null);
  };

  // Get main content based on tab and selection
  const getMainContent = () => {
    if (!activeProject) {
      return (
        <div className="alert alert-info">
          <i className="bi bi-info-circle me-2"></i>
          Please select a project to begin
        </div>
      );
    }

    if (activeTab === 'generator') {
      if (selectedMaterialId) {
        return (
          <MaterialDetailView 
            materialId={selectedMaterialId}
            onBack={() => setSelectedMaterialId(null)}
            onRefresh={handleMaterialUploaded}
          />
        );
      } else {
        return (
          <div className="text-center p-5 bg-light rounded border">
            <i className="bi bi-file-earmark-text display-1 text-muted"></i>
            <h4 className="mt-3">Select a Material</h4>
            <p className="text-muted">
              Click on a material from the list on the left,<br />
              or upload a new material to begin.
            </p>
          </div>
        );
      }
    } else if (activeTab === 'templates') {
      return <PromptTemplateManager />;
    } else {
      return <PromptEngineeringTool />;
    }
  };

  return (
    <div className="container-fluid">
      <header className="bg-primary text-white p-3 mb-4">
        <div className="d-flex justify-content-between align-items-center">
          <h1 className="h4 mb-0">
            <i className="bi bi-braces"></i> EdgePrompt
          </h1>
          {activeProject ? (
            <div className="badge bg-light text-primary">
              {activeProject.name} ({activeProject.modelName})
            </div>
          ) : (
            <div className="badge bg-warning text-dark">
              <i className="bi bi-exclamation-triangle-fill me-1"></i>
              No project selected
            </div>
          )}
        </div>
      </header>

      <div className="row">
        {/* Left Sidebar */}
        <div className="col-md-3">
          {/* Projects Section */}
          <div className="card mb-3">
            <div className="card-header bg-light">
              <h5 className="mb-0">Projects</h5>
            </div>
            <div className="card-body p-0">
              {projects.length === 0 ? (
                <div className="text-center py-3">
                  <p className="text-muted">No projects found</p>
                  <button 
                    className="btn btn-sm btn-primary"
                    onClick={() => setShowCreateProject(true)}
                  >
                    <i className="bi bi-plus-circle me-1"></i>
                    Create Project
                  </button>
                </div>
              ) : (
                <div className="list-group list-group-flush">
                  {projects.map(project => (
                    <button
                      key={project.id}
                      className={`list-group-item list-group-item-action ${activeProject?.id === project.id ? 'active' : ''}`}
                      onClick={() => setActiveProject(project)}
                    >
                      <div className="d-flex w-100 justify-content-between">
                        <h6 className="mb-0">{project.name}</h6>
                        <small>{project.modelName}</small>
                      </div>
                      <small className="text-truncate d-block" style={{ maxWidth: '100%' }}>
                        {project.description}
                      </small>
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Upload Material Section (only when project is selected) */}
          {activeProject && (
            <>
              <SimplifiedMaterialUploader onMaterialUploaded={handleMaterialUploaded} />

              {/* Materials List */}
              <div className="card">
                <div className="card-header bg-light d-flex justify-content-between align-items-center">
                  <h5 className="mb-0">
                    <i className="bi bi-journal-text me-1"></i>
                    Materials
                  </h5>
                </div>
                <div className="card-body p-0">
                  {isLoadingMaterials ? (
                    <div className="text-center py-3">
                      <div className="spinner-border spinner-border-sm" role="status">
                        <span className="visually-hidden">Loading...</span>
                      </div>
                      <p className="small mt-2 mb-0">Loading materials...</p>
                    </div>
                  ) : materials.length === 0 ? (
                    <div className="text-center py-3">
                      <p className="text-muted small mb-0">No materials found</p>
                    </div>
                  ) : (
                    <div className="list-group list-group-flush">
                      {materials.map(material => (
                        <button
                          key={material.id}
                          className={`list-group-item list-group-item-action ${selectedMaterialId === material.id ? 'active' : ''}`}
                          onClick={() => setSelectedMaterialId(material.id)}
                        >
                          <div className="d-flex justify-content-between">
                            <span className="fw-semibold text-truncate" style={{ maxWidth: '180px' }}>
                              {material.title || 'Untitled Material'}
                            </span>
                            <span className={`badge bg-${getBadgeColor(material.status)}`}>
                              {material.status}
                            </span>
                          </div>
                          <small className="text-truncate d-block" style={{ maxWidth: '100%' }}>
                            {material.focusArea}
                          </small>
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </>
          )}
        </div>

        {/* Main Content Area */}
        <div className="col-md-9">
          {activeProject && (
            <ul className="nav nav-tabs mb-4">
              <li className="nav-item">
                <button 
                  className={`nav-link ${activeTab === 'generator' ? 'active' : ''}`}
                  onClick={() => {
                    setActiveTab('generator');
                  }}
                >
                  <i className="bi bi-file-text me-1"></i>
                  Content Generator
                </button>
              </li>
              <li className="nav-item">
                <button 
                  className={`nav-link ${activeTab === 'templates' ? 'active' : ''}`}
                  onClick={() => {
                    setActiveTab('templates');
                    setSelectedMaterialId(null);
                  }}
                >
                  <i className="bi bi-file-earmark-text me-1"></i>
                  Prompt Templates
                </button>
              </li>
              <li className="nav-item">
                <button 
                  className={`nav-link ${activeTab === 'promptTools' ? 'active' : ''}`}
                  onClick={() => {
                    setActiveTab('promptTools');
                    setSelectedMaterialId(null);
                  }}
                >
                  <i className="bi bi-tools me-1"></i>
                  Prompt Engineering Tools
                </button>
              </li>
            </ul>
          )}

          {getMainContent()}
        </div>
      </div>

      {showCreateProject && (
        <div className="modal show d-block" tabIndex={-1} style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Create New Project</h5>
                <button 
                  type="button" 
                  className="btn-close" 
                  onClick={() => setShowCreateProject(false)}
                ></button>
              </div>
              <div className="modal-body">
                <ProjectForm 
                  onSuccess={() => {
                    setShowCreateProject(false);
                    // Refresh projects list
                    api.getProjects().then(projectsData => {
                      if (projectsData.length > 0) {
                        setActiveProject(projectsData[0]);
                      }
                    });
                  }}
                  onClose={() => setShowCreateProject(false)}
                />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Helper function for badge colors
function getBadgeColor(status: string): string {
  switch (status) {
    case 'completed': return 'success';
    case 'pending': return 'warning';
    case 'processing': return 'primary';
    case 'error': return 'danger';
    default: return 'secondary';
  }
}

// Wrap the app with ProjectProvider
function App() {
  return (
    <ErrorBoundary>
      <ProjectProvider>
        <MainContent />
      </ProjectProvider>
    </ErrorBoundary>
  );
}

export default App;



================================================================
End of Codebase
================================================================
