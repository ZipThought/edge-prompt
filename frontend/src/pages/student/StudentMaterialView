import React, { useState, useEffect, useCallback } from 'react';
import { Material, Project } from '../../types';
import { api } from '../../services/api';
import { GeneratedQuestion } from '../../types/edgeprompt'; // Import GeneratedQuestion type

interface Props {
  project: Project | null; // Keep project for context if needed, though not strictly used in this view yet
  materialId: string;
  onBack: () => void;
  // onRefresh is not needed for student view as they don't modify content
}

export const StudentMaterialDetailView: React.FC<Props> = ({ project, materialId, onBack }) => {
  const [material, setMaterial] = useState<Material | null>(null);
  const [questions, setQuestions] = useState<GeneratedQuestion[]>([]); // State for questions
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  // Removed activeTab state as we no longer use tabs

  // Load material and questions when the component mounts or materialId changes
  useEffect(() => {
    const loadMaterialAndQuestions = async () => {
      setLoading(true);
      try {
        const materialData = await api.getMaterial(materialId);
        setMaterial(materialData);

        // Fetch questions related to this material
        const fetchedQuestions = await api.getQuestions(materialId);
        setQuestions(fetchedQuestions);

      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load material details');
        console.error('Error loading material details:', err);
      } finally {
        setLoading(false);
      }
    };

    loadMaterialAndQuestions();
  }, [materialId]); // Dependency array includes materialId

  if (loading) {
    return (
      <div className="text-center py-5">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
        <p className="mt-3">Loading material details...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="alert alert-danger">
        <h4 className="alert-heading">Error</h4>
        <p>{error}</p>
        <button className="btn btn-outline-danger" onClick={onBack}>
          <i className="bi bi-arrow-left me-2"></i>Back
        </button>
      </div>
    );
  }

  if (!material) {
    return (
      <div className="alert alert-warning">
        <h4 className="alert-heading">Material Not Found</h4>
        <p>The material you're looking for could not be found.</p>
        <button className="btn btn-outline-warning" onClick={onBack}>
          <i className="bi bi-arrow-left me-2"></i>Back
        </button>
      </div>
    );
  }

  return (
    <div className="card">
      <div className="card-header bg-light">
        <div className="d-flex justify-content-between align-items-center">
          <div className="d-flex align-items-center">
            <button className="btn btn-sm btn-outline-secondary me-2" onClick={onBack}>
              <i className="bi bi-arrow-left"></i>
            </button>
            <span className="h5 mb-0">{material.title || 'Untitled Material'}</span>
          </div>
          {/* No edit or generate buttons for students */}
        </div>
      </div>

      {/* Content Section */}
      <div className="card-body">
        <div>
          <h5 className="mb-3">Material Content</h5>
          <div
            className="p-3 bg-light rounded border"
            style={{
              maxHeight: '500px',
              overflow: 'auto'
            }}
          >
            <pre style={{ whiteSpace: 'pre-wrap', fontSize: '0.9em' }}>
              {material.content}
            </pre>
          </div>

          {/* Optional: Keep some basic info if relevant */}
          <div className="mt-3">
            <div className="row">
              <div className="col-md-6">
                <div className="mb-3">
                  <span className="text-muted">Focus Area:</span>
                  <div className="fw-bold">{material.focusArea}</div>
                </div>
              </div>
              <div className="col-md-6">
                <div className="mb-3">
                  <span className="text-muted">Word Count:</span>
                  <div className="fw-bold">{material.metadata?.wordCount || 'N/A'}</div>
                </div>
              </div>
              {/* Removed Subject and Grade Level as per request */}
            </div>
          </div>
        </div>

        <hr className="my-4" /> {/* Separator */}

        {/* Questions Section */}
        <div>
          <h5 className="mb-3">Generated Questions</h5>
          {questions.length === 0 ? (
            <div className="alert alert-info">No questions generated for this material yet.</div>
          ) : (
            <div className="accordion" id="questionsAccordion">
              {questions.map((q, i) => (
                <div className="accordion-item" key={q.id}>
                  <h2 className="accordion-header" id={`heading-${q.id}`}>
                    <button
                      className="accordion-button collapsed"
                      type="button"
                      data-bs-toggle="collapse"
                      data-bs-target={`#collapse-${q.id}`}
                      aria-expanded="false"
                      aria-controls={`collapse-${q.id}`}
                    >
                      Question {i + 1}
                    </button>
                  </h2>
                  <div
                    id={`collapse-${q.id}`}
                    className="accordion-collapse collapse"
                    aria-labelledby={`heading-${q.id}`}
                    data-bs-parent="#questionsAccordion"
                  >
                    <div className="accordion-body">
                      <p>{q.question}</p>
                       {/* Optionally display rubric/marking criteria if available */}
                      {q.rubric?.validationChecks && Array.isArray(q.rubric.validationChecks) && (
                        <div className="mt-3">
                          <h6>Marking Criteria</h6>
                          <ul className="ms-3">
                            {q.rubric.validationChecks.map((check: string, idx: number) => (
                              <li key={idx}>
                                <span className="badge bg-secondary me-2">âœ“</span> {String(check)}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {/* Add student response area here in the future */}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="card-footer bg-light d-flex justify-content-end">
        <small className="text-muted align-self-center">
          Created: {new Date(material.createdAt).toLocaleString()}
        </small>
      </div>
    </div>
  );
};

// Helper function for badge colors (though status is not displayed in this view)
function getBadgeColor(status: string): string {
  switch (status) {
    case 'completed': return 'success';
    case 'pending': return 'warning';
    case 'processing': return 'primary';
    case 'error': return 'danger';
    default: return 'secondary';
  }
}